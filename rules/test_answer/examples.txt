### ================= EXAMPLE 1 ================= ###
% Cryptoaddition:
% Find the unique answer to:

% Define available digits
digit(0). digit(1). digit(2). digit(3). digit(4).
digit(5). digit(6). digit(7). digit(8). digit(9).

% The first digit of a multi-digit number cannot be 0
leftdigit(D) :- digit(D), D =\= 0.

% All elements are different
all_different([]).
all_different([H|T]) :- \+ member(H, T), all_different(T).

member(X, [X|_]).
member(X, [_|T]) :- member(X, T).

% Simulate a column addition: Cin is the input carry, Cout is the output carry
sumdigit(Cin, A, B, Sum, Cout) :-
    X is Cin + A + B,
    ( X < 10, Sum = X, Cout = 0
    ; 
    X >= 10, Sum is X - 10, Cout = 1 ).

% Main predicate: AB + BCD = CDE
query_sum([A,B,C,D,E]) :-
    % Value range and first digit non-zero
    leftdigit(A), leftdigit(B), leftdigit(C),
 
    digit(D), digit(E),

    % Units digit B + D → E, produces carry C1
    sumdigit(0, B, D, E, C1),

    % Tens digit A + C + C1 → D, produces carry C2
    sumdigit(C1, A, C, D, C2),

    % Hundards digit B + C2 → C, no carry
    sumdigit(C2, 0, B, C, 0),

    % Make sure all letters are different
    all_different([A,B,C,D,E]).

% Initiate query example:
query(query_sum([A,B,C,D,E])).



### ================= EXAMPLE 2 ================= ###
% member/2 for ProbLog
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).

% --------- Basic meta-interpreter ---------
% Prove "true" always succeeds
prove(true).

prove(Goal) :-
	% For all other goals, use the clause/2 facts/rules defined in the program
	clause(Goal, Body),
	prove(Body).

% Prove compound goal A,B: prove A first, then prove B
prove((A,B)) :-
	prove(A),
	prove(B).

% --------- Extended logic processing ---------
% 1. implies(P,Q): P ⇒ Q, when P is unprovable or Q is provable
prove(implies(P,Q)) :-
	( \+ prove(P) % if P is unprovable
	; prove(Q) ). % or Q is provable

% 2. opposite(P): "opposite"/negation of P; that is, P is unprovable
prove(opposite(P)) :-
	\+ prove(P).

% 3. expand(A,B): first use expand/2 rule to expand A into B, then prove B
% You need to define several expand/2 facts or rules in the program
prove(expand(A,B)) :-
	expand(A,B).

% 4. includes(Set,X): set inclusion relation, equivalent to member/2
prove(includes(Set,X)) :-
	member(X,Set).

% 5. extend(List,Elem,Extended): add Elem to the head of List to get Extended
prove(extend(List,Elem,Extended)) :-
	Extended = [Elem|List].

% 6. refute(P): refute, equivalent to "unprovable"
prove(refute(P)) :-
	\+ prove(P).



% --------- Examples ---------- %
% Define some expand rules:
expand(double(X), Y) :- Y is X*2.
expand(square(X), Y) :- Y is X*X.

parent(alice, bob).
parent(bob, carol).

ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).


% --------- Queries ---------- %
query(prove(implies(parent(alice,bob), ancestor(alice,bob)))).

query(prove(opposite(parent(carol,alice)))).

query(prove(expand(double(3),6))).

query(prove(includes([a,b,c],b))).

query(prove(extend([1,2],3,[3,1,2]))).


### ================= EXAMPLE 3 ================= ###
% generated: 17 November 1989
% option(s): SOURCE_TRANSFORM_1
%
%   query
%
%   David H. D. Warren
%   Copyright: Public domain
%
%   query population and area database to find coun-
%   tries of approximately equal population density

query_pop([C1,D1,C2,D2]) :-
    density(C1,D1),
    density(C2,D2),
    D1 > D2,
    T1 is 20*D1,
    T2 is 21*D2,
    T1 < T2.

density(C,D) :-
    pop(C,P),
    area(C,A),
    D is (P*100)//A.

% populations in 100000's
pop(china,	8250).
pop(india,	5863).
pop(usa,	2119).
pop(indonesia,	1276).
pop(japan,	1097).
pop(brazil,	1042).
pop(bangladesh,	 750).
pop(pakistan,	 682).
pop(nigeria,	 613).
pop(mexico,	 581).
pop(uk,		 559).
pop(italy,	 554).
pop(france,	 525).
pop(philippines, 415).
pop(thailand,	 410).
pop(turkey,	 383).
pop(egypt,	 364).
pop(spain,	 352).
pop(poland,	 337).
pop(s_korea,	 335).
pop(iran,	 320).
pop(ethiopia,	 272).
pop(argentina,	 251).

% areas in 1000's of square miles
area(china,     3380).
area(india,     1139).
area(usa,       3609).
area(indonesia,  570).
area(japan,      148).
area(brazil,    3288).
area(bangladesh,  55).
area(pakistan,   311).
area(nigeria,    373).
area(mexico,     764).
area(uk,          86).
area(italy,      116).
area(france,     213).
area(philippines, 90).
area(thailand,   200).
area(turkey,     296).
area(egypt,      386).
area(spain,      190).
area(poland,     121).
area(s_korea,     37).
area(iran,       628).
area(ethiopia,   350).
area(argentina, 1080).

query(query_pop(_)).



### ================= EXAMPLE 4 ================= ###
% -------------------------
% Basic rules of rock-paper-scissors
% -------------------------

% Three gestures
move(rock).
move(paper).
move(scissor).

% Win-lose relationship: X beats Y
beats(rock, scissor).
beats(scissor, paper).
beats(paper, rock).

% -------------------------
% Calculate the result of the game
% -------------------------

% Same gestures are considered a draw
result(X, X, draw) :-
move(X).

% If X beats Y, then X wins
result(X, Y, win) :-
beats(X, Y).

% If Y beats X, then X loses
result(X, Y, lose) :-
beats(Y, X).

% End of recursion: empty list corresponds to empty result
play([], [], []).

% Recursive advancement: take out each round of gestures, calculate the results, and continue
play([P1|P1T], [P2|P2T], [R|Rs]) :-
% The correct call is result(P1,P2,R), not semicolon
result(P1, P2, R),
% (Optional) Update the score according to R
play(P1T, P2T, Rs).

compute_score([], 0).
compute_score([win | Rs], S) :- compute_score(Rs, S1), S is S1 + 1.
compute_score([lose | Rs], S) :- compute_score(Rs, S1), S is S1 - 1.
compute_score([draw | Rs], S) :- compute_score(Rs, S1), S is S1.

determine_winner(P1Moves,P2Moves,Winner) :- 
play(P1Moves,P2Moves,Results), 
compute_score(Results,S), 
( S > 0, Winner = player1 
; S < 0, Winner = player2 
; S = 0, Winner = draw 
).

query(determine_winner([rock,rock,rock],[paper,paper,scissor],W)).


### ================= EXAMPLE 5 ================= ###
zebra(Houses) :-
	houses(Houses),
	my_member(house(red, english, _, _, _), Houses),
	my_member(house(_, spanish, dog, _, _), Houses),
	my_member(house(green, _, _, coffee, _), Houses),
	my_member(house(_, ukrainian, _, tea, _), Houses),
	right_of(house(green,_,_,_,_), house(ivory,_,_,_,_), Houses),
	my_member(house(_, _, snails, _, winstons), Houses),
	my_member(house(yellow, _, _, _, kools), Houses),
	Houses = [_, _, house(_, _, _, milk, _), _,_],
	Houses = [house(_, norwegian, _, _, _)|_],
	next_to(house(_,_,_,_,chesterfields), house(_,_,fox,_,_), Houses),
	next_to(house(_,_,_,_,kools), house(_,_,horse,_,_), Houses),
	my_member(house(_, _, _, orange_juice, lucky_strikes), Houses),
	my_member(house(_, japanese, _, _, parliaments), Houses),
	next_to(house(_,norwegian,_,_,_), house(blue,_,_,_,_), Houses),
	my_member(house(_, _, zebra, _, _), Houses),
	my_member(house(_, _, _, water, _), Houses).

houses([
	house(_, _, _, _, _),
	house(_, _, _, _, _),
	house(_, _, _, _, _),
	house(_, _, _, _, _),
	house(_, _, _, _, _)
]).

right_of(A, B, [B, A | _]).
right_of(A, B, [_ | Y]) :- right_of(A, B, Y).

next_to(A, B, [A, B | _]).
next_to(A, B, [B, A | _]).
next_to(A, B, [_ | Y]) :- next_to(A, B, Y).

my_member(X, [X|_]).
my_member(X, [_|Y]) :- my_member(X, Y).

query(zebra(Houses)).



### ================= EXAMPLE 6 ================= ###
digit(img_1,1).
digit(img_2,2).
digit(img_3,3).
digit(img_4,4).
digit(img_5,5).
digit(img_6,6).
digit(img_7,7).
digit(img_8,8).
digit(img_9,9).
digit(img_0,0).

number([],Result,Result).
number([H|T],Acc,Result) :- digit(H,Nr), Acc2 is Nr+10*Acc,number(T,Acc2,Result).
number(X,Y) :- number(X,0,Y).

multi_addition(X,Y,Z) :- number(X,X2),number(Y,Y2), Z is X2+Y2.

query(multi_addition([img_7,img_9],[img_3,img_1,img_2],Z)).



### ================= EXAMPLE 7 ================= ###
hole(X,Y,X,Y):-
    swap(X,Y,no_swap).

hole(X,Y,Y,X):-
    swap(X,Y,swap).

bubble([X],[],X).
bubble([H1,H2|T],[X1|T1],X):-
    hole(H1,H2,X1,X2),
    bubble([X2|T],T1,X).

bubblesort([],L,L).

bubblesort(L,L3,Sorted) :-
    bubble(L,L2,X),
    bubblesort(L2,[X|L3],Sorted).

forth_sort(L,L2) :- bubblesort(L,[],L2).

swap(X,Y,no_swap) :- X < Y.
swap(X,Y,swap) :- \+ swap(X,Y,no_swap).
    
query(forth_sort([3,1,2,5,7,12],X)).



### ================= EXAMPLE 8 ================= ###
insertion_sort([], []).
insertion_sort([H|T], Sorted) :-
    insertion_sort(T, TSorted),
    insert_element(H, TSorted, Sorted).

insert_element(X, [], [X]).
insert_element(X, [H|T], [X,H|T]) :-
    X =< H.
insert_element(X, [H|T], [H|RT]) :-
    X > H,
    insert_element(X, T, RT).
    
query(insertion_sort([3,1,2,5,7,12],X)).


### ================= EXAMPLE 9 ================= ###
merge_sort([], []).
merge_sort([X], [X]).
merge_sort(List, Sorted) :-
    length(List, Len),
    Len > 1,
    split_list(List, Left, Right),
    merge_sort(Left, SortedLeft),
    merge_sort(Right, SortedRight),
    merge(SortedLeft, SortedRight, Sorted).

split_list(List, Left, Right) :-
    length(List, Len),
    Half is Len // 2,
    length(Left, Half),
    append(Left, Right, List).

merge([], List, List).
merge(List, [], List).
merge([H1|T1], [H2|T2], [H1|Merged]) :-
    H1 =< H2,
    merge(T1, [H2|T2], Merged).
merge([H1|T1], [H2|T2], [H2|Merged]) :-
    H1 > H2,
    merge([H1|T1], T2, Merged).
    
append([], L, L).
append([H|T], L2, [H|R]) :-
    append(T, L2, R).


query(merge_sort([3,1,2,5,7,12],X)).



### ================= EXAMPLE 10 ================= ###
% Stach operations:
stack_op(push(X), Stack, [X|Stack]).
stack_op(pop, [_|Stack], Stack).
stack_op(dup, [X|Stack], [X,X|Stack]).
stack_op(swap, [X,Y|Stack], [Y,X|Stack]).
stack_op(over, [X,Y|Stack], [Y,X,Y|Stack]).
stack_op(rot, [X,Y,Z|Stack], [Z,X,Y|Stack]).

% Sorting operation
stack_op(sort, Stack, SortedStack) :-
    % Take out the top N elements of the stack and sort them
    get_top_n(Stack, 3, Elements, RestStack),
    insertion_sort(Elements, SortedElements),
    append(SortedElements, RestStack, SortedStack).

% Get the top N elements of the stack
get_top_n(Stack, N, Elements, Rest) :-
    length(Elements, N),
    append(Elements, Rest, Stack).

query(stack_op(push(1),[2,3,4],Y)).
query(stack_op(pop,[1,2,3,4],Y)).
query(stack_op(dup,[1,2,3,4],Y)).
query(stack_op(swap,[1,2,3,4],Y)).
query(stack_op(over,[1,2,3,4],Y)).
query(stack_op(rot,[1,2,3,4],Y)).

### ================= EXAMPLE 11 ================= ##
detect_number(image_0, 0).
detect_number(image_1, 1).
detect_number(image_2, 2).
detect_number(image_3, 3).
detect_number(image_4, 4).
detect_number(image_5, 5).
detect_number(image_6, 6).
detect_number(image_7, 7).
detect_number(image_8, 8).
detect_number(image_9, 9).

detect_operator(image_plus, +).
detect_operator(image_minus, -).
detect_operator(image_multiply, *).
detect_operator(image_divide, /).

detect_all([N], [N2]) :- 
    detect_number(N, N2).
detect_all([N,O|T], [N2,O2|T2]) :- 
    detect_number(N, N2), 
    detect_operator(O, O2), 
    detect_all(T, T2).

almost_equal(X, Y) :- 
    ground(Y), 
    abs(X - Y) < 0.0001.
almost_equal(X, Y) :- 
    var(Y), 
    Y is float(X).

expression(Images, Result) :- 
    detect_all(Images, Symbols), 
    parse(Symbols, Result).

parse([N], R) :- 
    almost_equal(N, R).

parse([N1,+|T], R) :-
    parse(T, R2),
    almost_equal(N1 + R2, R).

parse([N1,-|T], R) :-
    parse([-1, *|T], R2),
    almost_equal(N1 + R2, R).

parse([N1,*,N2|T], R) :-
    N3 is N1 * N2,
    parse([N3|T], R).

parse([N1,/,N2|T], R) :-
    N2 \== 0,
    N3 is N1 / N2,
    parse([N3|T], R).

% calculate: 2 / (3 + 3) - 2 * 7
query(expression([image_2, image_divide, image_3, image_plus, image_3, image_minus, image_2, image_multiply, image_7], X)).


### ================= EXAMPLE 12 ================= ###
% Aircraft Flap Controller
% This example is inspired by one in Filieri et al, Reliability Analysis in Symbolic Pathfinder, ICSE 2013

% the range of the flap
legal_flap_position(FP) :- between(0,10,FP).

% the strength of the actuators
actuator_strength(a,2).
actuator_strength(b,1).

% random prior on which actuator to use
0.5::use_actuator(T,a); 0.5::use_actuator(T,b).

% wind strength model
0.7::wind(weak); 0.3::wind(strong).
0.25::wind_effect(T,-1); 0.5::wind_effect(T,0); 0.25::wind_effect(T,1) :- wind(weak).
0.2::wind_effect(T,-3); 0.3::wind_effect(T,-2); 0.3::wind_effect(T,2); 0.2::wind_effect(T,3) :- wind(strong).

% the flap is moved to an attempted position if that is legal
flap_position(Time,Pos) :-
     Time > 0,
     attempted_flap_position(Time,Pos),
     legal_flap_position(Pos).

% an overrun exception occurs else
overrun_exception(Time) :-
     attempted_flap_position(Time,Pos),
     \+ legal_flap_position(Pos).

% did we reach the goal?
goal_reached(Time) :-
     goal(G),
     flap_position(Time,G).
 
% if the previous position was not the goal, attempt a new position
% the position depends on the chosen actuator and the current wind
attempted_flap_position(Time,Pos) :-
     Time > 0,
     Prev is Time-1,
     flap_position(Prev,Old),
     \+ goal(Old),
     use_actuator(Time,A),
     actuator_strength(A,AS),
     goal(GP),
     AE is sign(GP-Old)*AS,
     wind_effect(Time,WE),
     Pos is Old + AE + WE.

% we want to go from 6 to 4, i.e., move two steps left
flap_position(0,6).
goal(4).

% restrict attention to first five steps
at(5).
query(goal_reached(T))  :- at(S),between(1,S,T).
query(overrun_exception(T))  :- at(S),between(1,S,T).



### ================= EXAMPLE 13 ================= ###
PH::make_coin(C,PH).
coin(C) :- make_coin(C,0.8).
coins_r(SC,SC,0).
coins_r(SC,S,CNT) :-
    CNT > 0,
    (coin(CNT),
     SC2 is SC+1;
     \+coin(CNT),
     SC2 is SC),
    CNT2 is CNT-1,
    coins_r(SC2,S,CNT2).
total(S) :- coins_r(0,S,4).

query(total(_)).



### ================= EXAMPLE 14 ================= ###
% Based on Monty Hall problem on https://github.com/friguzzi/cplint

1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).

select_door(1).

member(X,[X|T]).
member(X,[H|T]) :- member(X,T).

0.5::open_door(A) ; 0.5::open_door(B) :-
  member(A, [1,2,3]),
  member(B, [1,2,3]),
  A < B,
  \+ prize(A), \+ prize(B),
  \+ select_door(A), \+ select_door(B).
 
open_door(A) :-
  member(A, [1,2,3]),
  member(B, [1,2,3]),
  \+ prize(A), prize(B),
  \+ select_door(A), \+ select_door(B).

win_keep :-
  select_door(A),
  prize(A).

win_switch :-
  member(A, [1,2,3]),
  \+ select_door(A),
  prize(A),
  \+ open_door(A).

query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).


### ================= EXAMPLE 15 ================= ###
% source: David Poole. Abducing through negation as failure: stable models within the independent choice logic. JLP 2000.

carrying(key,s(T)) :-
     do(pickup(key),T),
     at(robot,Pos,T),
     at(key,Pos,T),
     pickup_succeeds(T).
carrying(key,s(T)) :-
     carrying(key,T),
     \+ do(putdown(key),T),
     \+ do(pickup(key),T),
     \+ drops(key,T).
 
0.7::pickup_succeeds(T); 0.3::pickup_fails(T).
 
drops(key,T) :-
     slippery(key,T),
     drop_slippery_key(T).
drops(key,T) :-
     \+ slippery(key,T),
     fumbles_key(T).
 
0.6::drop_slippery_key(T); 0.4::holds_slippery_key(T).
0.2::fumbles_key(T); 0.8::retains_key(T).
 
slippery(key,s(T)) :-
    slippery(key,T),
    stays_slippery(T).
slippery(key,0) :-
    initially_slippery(key).
 
0.75::stays_slippery(T); 0.25::stops_being_slippery(T).
0.5::initially_slippery(key); 0.5::initially_unslippery(key).
 
at(robot,Pos,s(T)) :-
    do(goto(Pos),T),
    goto_succeeds(T).
at(robot,Pos1,s(T)) :-
    do(goto(Pos),T),
    at(robot,Pos1,T),
    \+ goto_succeeds(T).
at(robot,Pos,s(T)) :-
    \+ goto_action(T),
    at(robot,Pos,T).
at(key,Pos,T) :-
    carrying(key,T),
    at(robot,Pos,T).
at(key,Pos,s(T)) :-
    \+ carrying(key,s(T)),
    at(key,Pos,T).
 
0.9::goto_succeeds(T); 0.1::goto_fails(T).
 
goto_action(T) :-
    do(goto(Pos),T).
 
do(goto(loc1),0).
do(pickup(key),s(0)).
do(goto(loc2),s(0)).
at(key,loc1,0).
at(robot,loc0,0).
 
query(carrying(key,s(s(s(0))))).
query(at(_,_,s(s(s(0))))).


### ================= EXAMPLE 16 ================= ###

0.5::pick(N, a) ; 0.5::pick(N,b).

% a palindrome of length N spans positions 1 to N
palindrome(N) :-
      palindrome(1,N).

% base case for even length: left and right crossed
palindrome(A,B) :-
      A > B.
% base case for uneven length: arbitrary middle character
palindrome(N,N) :-
      pick(N,_).
% recursive case: add same character at both ends and move positions towards the middle
palindrome(A,B) :-
      A < B,
      pick(A,X),
      pick(B,X),
      AA is A+1,
      BB is B-1,
      palindrome(AA,BB).

bb(N) :-
      Max is N-1,
      between(1,Max,I),
      pick(I,b),
      II is I+1,
      pick(II,b).

len(5).
evidence(palindrome(X)) :- len(X).
query(bb(X)) :- len(X).