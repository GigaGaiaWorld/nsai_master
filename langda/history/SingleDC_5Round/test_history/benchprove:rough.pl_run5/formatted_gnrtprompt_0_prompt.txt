System: You are a coding assistant. You should use the available tools to complete the task.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>

% member/2 for ProbLog
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).
% --------- Basic meta-interpreter ---------
% Prove "true" always succeeds
prove(true).
prove(Goal) :-
	% For all other goals, use the clause/2 facts/rules defined in the program
	clause(Goal, Body),
	prove(Body).
% Prove compound goal A,B: prove A first, then prove B
prove((A,B)) :-
	prove(A),
	prove(B).
% --------- Extended logic processing ---------
<Langda> Information:
<HASH> Hash tag of code: 2DFC0CFD </HASH>
<Requirements>Extended define multiple prove/1 logic processing predicates, which should contain: 	1.implies/2 	2.opposite/1 	3.expand/2 (use already defined rules) 	4.includes/2 	5.extend/2(add Elem to the head of List) 	6.refute/1 </Requirements></Langda>
.
% --------- Examples ---------- %
% Define some expand rules:
expand(double(X), Y) :- Y is X*2.
expand(square(X), Y) :- Y is X*X.
parent(alice, bob).
parent(bob, carol).
ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).
% --------- Queries ---------- %
query(prove(implies(parent(alice,bob), ancestor(alice,bob)))).
query(prove(opposite(parent(carol,alice)))).
query(prove(expand(double(3),6))).
query(prove(includes([a,b,c],b))).
query(prove(extend([1,2],3,[3,1,2]))).

</Code>

<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 

**split**


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

% member/2 for ProbLog
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).
% --------- Basic meta-interpreter ---------
% Prove "true" always succeeds
prove(true).
prove(Goal) :-
	% For all other goals, use the clause/2 facts/rules defined in the program
	clause(Goal, Body),
	prove(Body).
% Prove compound goal A,B: prove A first, then prove B
prove((A,B)) :-
	prove(A),
	prove(B).
% --------- Extended logic processing ---------
<Langda> Information:
<HASH> Hash tag of code: 2DFC0CFD </HASH>
<Requirements>Extended define multiple prove/1 logic processing predicates, which should contain: 	1.implies/2 	2.opposite/1 	3.expand/2 (use already defined rules) 	4.includes/2 	5.extend/2(add Elem to the head of List) 	6.refute/1 </Requirements></Langda>
.
% --------- Examples ---------- %
% Define some expand rules:
expand(double(X), Y) :- Y is X*2.
expand(square(X), Y) :- Y is X*X.
parent(alice, bob).
parent(bob, carol).
ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).
% --------- Queries ---------- %
query(prove(implies(parent(alice,bob), ancestor(alice,bob)))).
query(prove(opposite(parent(carol,alice)))).
query(prove(expand(double(3),6))).
query(prove(includes([a,b,c],b))).
query(prove(extend([1,2],3,[3,1,2]))).

</origin_code>
<generated_code>

% member/2 for ProbLog
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).

% --------- Basic meta-interpreter ---------
% Prove "true" always succeeds
prove(true).
prove(Goal) :-
    % For all other goals, use the clause/2 facts/rules defined in the program
    clause(Goal, Body),
    prove(Body).
% Prove compound goal A,B: prove A first, then prove B
prove((A,B)) :-
    prove(A),
    prove(B).

% --------- Extended logic processing ---------
% 1. implies/2: Succeeds if Goal1 implies Goal2
prove(implies(Goal1, Goal2)) :-
    (prove(Goal1) -> prove(Goal2)).

% 2. opposite/1: Succeeds if the negation of Goal holds
prove(opposite(Goal)) :-
    \+ prove(Goal).

% 3. expand/2: Uses already defined rules to expand a term
prove(expand(Term, Result)) :-
    expand(Term, Result).

% 4. includes/2: Succeeds if List includes Elem
prove(includes(List, Elem)) :-
    member(Elem, List).

% 5. extend/2: Adds Elem to the head of List
prove(extend(List, Elem, [Elem|List])).

% 6. refute/1: Succeeds if the negation of Goal holds (synonym for opposite/1)
prove(refute(Goal)) :-
    \+ prove(Goal).

% --------- Examples ---------- %
% Define some expand rules:
expand(double(X), Y) :- Y is X*2.
expand(square(X), Y) :- Y is X*X.
parent(alice, bob).
parent(bob, carol).
ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).

% --------- Queries ---------- %
query(prove(implies(parent(alice,bob), ancestor(alice,bob)))).
query(prove(opposite(parent(carol,alice)))).
query(prove(expand(double(3),6))).
query(prove(includes([a,b,c],b))).
query(prove(extend([1,2],3,[3,1,2]))).

<generated_code>
<Final_Answer>
For each code block, extract it and format it in the following JSON format, please remove all code comments:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```

If there's no corresponding code exist:
```problog
{"HASH": "XXXX7890","Code": ""}
```
</Final_Answer>