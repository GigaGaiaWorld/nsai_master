Here are the extracted and formatted code blocks corresponding to the stack operations in the generated code:

```problog
{"HASH": "5E40E418", "Code": "stack_op(push(X), Stack, [X | Stack]) :- is_list(Stack)."}
```

```problog
{"HASH": "5E40E418", "Code": "stack_op(pop, [X | Stack], Stack) :- is_list(Stack)."}
```

```problog
{"HASH": "5E40E418", "Code": "stack_op(dup, [X | Stack], [X, X | Stack]) :- is_list(Stack)."}
```

```problog
{"HASH": "5E40E418", "Code": "stack_op(swap, [X, Y | Stack], [Y, X | Stack]) :- is_list(Stack)."}
```

```problog
{"HASH": "5E40E418", "Code": "stack_op(over, [X, Y | Stack], [Y, X, Y | Stack]) :- is_list(Stack)."}
```

```problog
{"HASH": "5E40E418", "Code": "stack_op(rot, [X, Y, Z | Stack], [Y, Z, X | Stack]) :- is_list(Stack)."}
```

```problog
{"HASH": "5E40E418", "Code": "stack_op(sort, Stack, SortedStack) :- is_list(Stack), get_top_n(Stack, 3, Elements, RestStack), insertion_sort(Elements, SortedElements), append(SortedElements, RestStack, SortedStack)."}
```

```problog
{"HASH": "5E40E418", "Code": "get_top_n(Stack, N, Elements, Rest) :- is_list(Stack), length(Elements, N), append(Elements, Rest, Stack)."}
```

```problog
{"HASH": "5E40E418", "Code": "insertion_sort(List, Sorted) :- insertion_sort(List, [], Sorted).\ninsertion_sort([], Acc, Acc).\ninsertion_sort([H | T], Acc, Sorted) :- insert(H, Acc, NewAcc), insertion_sort(T, NewAcc, Sorted).\ninsert(X, [], [X]).\ninsert(X, [Y | T], [X, Y | T]) :- X =< Y.\ninsert(X, [Y | T], [Y | NewT]) :- X > Y, insert(X, T, NewT)."}
```

```problog
{"HASH": "5E40E418", "Code": "is_list(List) :- (var(List) -> false ; is_list_aux(List)).\nis_list_aux([]).\nis_list_aux([_ | T]) :- is_list_aux(T)."}
```