System: You are a coding assistant.
Human: You are an expert code evaluator specialized in ProbLog and DeepProbLog. Analyze the provided code and test results to identify any errors and suggest fixes.

<Code>
% member/2 for ProbLog
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).
% --------- Basic meta-interpreter ---------
% Prove "true" always succeeds
prove(true).
prove(Goal) :-
	% For all other goals, use the clause/2 facts/rules defined in the program
	clause(Goal, Body),
	prove(Body).
% Prove compound goal A,B: prove A first, then prove B
prove((A,B)) :-
	prove(A),
	prove(B).
% --------- Extended logic processing ---------
<Langda>
<Code_Block>prove(true).
prove(Goal) :-
	clause(Goal, Body),
	prove(Body).
prove((A,B)) :-
	prove(A),
	prove(B).
prove(implies(A,B)) :- prove(A), prove(B).
prove(opposite(A)) :- \+prove(A).
prove(expand(A,B)) :- expand(A,B).
prove(includes(List,Elem)) :- member(Elem,List).
prove(extend(List,Elem,Result)) :- Result = [Elem|List].
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).
expand(double(X), Y) :- Y is X*2.
expand(square(X), Y) :- Y is X*X.
parent(alice, bob).
parent(bob, carol).
ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).
query(prove(implies(parent(alice,bob), ancestor(alice,bob)))).
query(prove(opposite(parent(carol,alice)))).
query(prove(expand(double(3),6))).
query(prove(includes([a,b,c],b))).
query(prove(extend([1,2],3,[3,1,2]))).</Code_Block>
<HASH> Hash tag of code: 2DFC0CFD </HASH>
<Requirements>Extended define multiple prove/1 logic processing predicates, which should contain: 	1.implies/2 	2.opposite/1 	3.expand/2 (use already defined rules) 	4.includes/2 	5.extend/2(add Elem to the head of List) 	6.refute/1 </Requirements></Langda>
.
% --------- Examples ---------- %
% Define some expand rules:
expand(double(X), Y) :- Y is X*2.
expand(square(X), Y) :- Y is X*X.
parent(alice, bob).
parent(bob, carol).
ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).
% --------- Queries ---------- %
query(prove(implies(parent(alice,bob), ancestor(alice,bob)))).
query(prove(opposite(parent(carol,alice)))).
query(prove(expand(double(3),6))).
query(prove(includes([a,b,c],b))).
query(prove(extend([1,2],3,[3,1,2]))).
<Result>
 Here are the testing result of code:
 % Problog Inference Result：
prove(implies(parent(alice,bob),ancestor(alice,bob))) = 1.0000
prove(opposite(parent(carol,alice))) = 1.0000
prove(expand(double(3),6)) = 1.0000
prove(includes([a, b, c],b)) = 1.0000
prove(extend([1, 2],3,[3, 1, 2])) = 1.0000
</Result> 
</Code>

<Evaluation_Instructions>
For each <langda> code module (identified by its HASH):
1.Summarize the errors in that module in a brief *ErrorSummary*. If no errors, state "No issues found."
2.Propose a *SuggestedFix* that specifically addresses the error(s) (e.g. add a missing predicate, correct a probability rule). Include line numbers or module names if helpful.
3.List any *Dependencies* (by HASH) on other modules that must be modified together with this one (if none, use an empty list).
4.Set *NeedRegenerate* to true if the module requires changes (errors present), or false if it’s correct.
</Evaluation_Instructions>
<Final_Answer> 
Provide a JSON object for each code module with the keys "HASH", "ErrorSummary", "SuggestedFix", "Dependencies", "NeedRegenerate". Format the output as a JSON array or separate JSON blocks. For example:
// Inside the ```report ... ``` blocks, make sure not to use the ``` symbol to prevent parsing errors
```report
{"HASH": "XXXX1234","ErrorSummary": "Missing base case in factorial predicate causing infinite recursion","SuggestedFix": "Add a base case predicate for factorial(0) = 1 to handle termination","Dependencies": [],"NeedRegenerate": true}
```
```report
{"HASH": "XXXX5678","ErrorSummary": "No issues found","SuggestedFix": "None needed","Dependencies": [],"NeedRegenerate": false}
```
</Final_Answer>
