Based on the requirements in the <langda> block, I'll regenerate the code to properly implement the coin counting logic where the success count SC increases by 1 when a coin turns up heads, and remains unchanged otherwise, with the counter decreasing to 0.

Here's the regenerated code:

```problog
{"HASH": "EA5E8D55","Code": "PH::make_coin(C,PH).\ncoin(C) :- make_coin(C,0.8).\ncoins_r(SC,SC,0).\ncoins_r(SC,S,CNT) :-\n CNT > 0,\n (coin(CNT) -> NSC is SC + 1 ; NSC = SC),\n CNT1 is CNT - 1,\n coins_r(NSC,S,CNT1).\ntotal(S) :- coins_r(0,S,4).\nquery(total(_))."}
```

The key changes made:
1. Added the conditional logic to check if coin(CNT) is heads
2. If heads, increment the success count (NSC is SC + 1)
3. If tails, keep the success count unchanged (NSC = SC)
4. Decrement the counter and recurse with the updated values
5. Maintained the same base case and query structure

This implementation now properly accumulates the count of successful coin flips as required.