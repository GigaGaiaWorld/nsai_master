#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "mnist_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.001\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(mnist_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,Result) :- number(Digit1,Num1), number(Digit2,Num2), Sum is Num1+Num2, (Sum>150, Result=1; Sum=<150, Result=0).\n"}
#Accuracy 0.86
i,time,loss,ground_time,compile_time,eval_time
100,10.920279026031494,0.43858528879778746,2.011699265241623,0.14524466991424562,0.033140294551849366
200,18.166285037994385,0.3130269491873588,2.0112561225891112,0.1437177848815918,0.03328950524330139
300,25.730963945388794,0.3226716483331316,1.999092984199524,0.1419639015197754,0.03408312201499939