System: You are a coding assistant. You could use the available tools to complete the task, you should always use 'get_report_tool' first to gain more information.
Human: You are an expert programmer proficient in Problog and DeepProbLog.  Your task is to regenerate the code in each <langda> block inside <Regenerate_format>

<Regenerate_format>
<Langda> Information:
<HASH> Hash tag of code: 5E40E418 </HASH>
<Requirements>Implemented a series of stack operations </Requirements></Langda>
.
stack_op(sort, Stack, SortedStack) :-
 get_top_n(Stack, 3, Elements, RestStack),
 insertion_sort(Elements, SortedElements),
 append(SortedElements, RestStack, SortedStack).
get_top_n(Stack, N, Elements, Rest) :-
 length(Elements, N),
 append(Elements, Rest, Stack).
query(stack_op(push(1),[2,3,4],Y)).
query(stack_op(pop,[1,2,3,4],Y)).
query(stack_op(dup,[1,2,3,4],Y)).
query(stack_op(swap,[1,2,3,4],Y)).
query(stack_op(over,[1,2,3,4],Y)).
query(stack_op(rot,[1,2,3,4],Y)).
<Regenerate_format>

<Regenerate_Instructions>
1. In <Regenerate_format> you will see the code template format to be followed, and the <langda> block in the template marks the part that needs to be completed.
2. Your task is to generate and output the complete Problog/DeepProbLog code according to the user's specific requirements for each <langda> block. The new code should fix the error in previous code.
3. Your could take the advise in <Analysis>
</Regenerate_Instructions>

<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed code here
```
</Final_Answer>


AI: 

**split**


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

<Langda> Information:
<HASH> Hash tag of code: 5E40E418 </HASH>
<Requirements>Implemented a series of stack operations </Requirements></Langda>
.
stack_op(sort, Stack, SortedStack) :-
 get_top_n(Stack, 3, Elements, RestStack),
 insertion_sort(Elements, SortedElements),
 append(SortedElements, RestStack, SortedStack).
get_top_n(Stack, N, Elements, Rest) :-
 length(Elements, N),
 append(Elements, Rest, Stack).
query(stack_op(push(1),[2,3,4],Y)).
query(stack_op(pop,[1,2,3,4],Y)).
query(stack_op(dup,[1,2,3,4],Y)).
query(stack_op(swap,[1,2,3,4],Y)).
query(stack_op(over,[1,2,3,4],Y)).
query(stack_op(rot,[1,2,3,4],Y)).

</origin_code>
<generated_code>

% Stack operations in ProbLog

% Push operation: Add an element to the top of the stack
stack_op(push(X), Stack, [X | Stack]) :-
    is_list(Stack).

% Pop operation: Remove the top element from the stack
stack_op(pop, [X | Stack], Stack) :-
    is_list(Stack).

% Dup operation: Duplicate the top element of the stack
stack_op(dup, [X | Stack], [X, X | Stack]) :-
    is_list(Stack).

% Swap operation: Swap the top two elements of the stack
stack_op(swap, [X, Y | Stack], [Y, X | Stack]) :-
    is_list(Stack).

% Over operation: Copy the second element to the top of the stack
stack_op(over, [X, Y | Stack], [Y, X, Y | Stack]) :-
    is_list(Stack).

% Rot operation: Rotate the top three elements of the stack
stack_op(rot, [X, Y, Z | Stack], [Y, Z, X | Stack]) :-
    is_list(Stack).

% Sort operation: Sort the top N elements of the stack
stack_op(sort, Stack, SortedStack) :-
    is_list(Stack),
    get_top_n(Stack, 3, Elements, RestStack),
    insertion_sort(Elements, SortedElements),
    append(SortedElements, RestStack, SortedStack).

% Helper predicate to get the top N elements of the stack
get_top_n(Stack, N, Elements, Rest) :-
    is_list(Stack),
    length(Elements, N),
    append(Elements, Rest, Stack).

% Insertion sort for sorting elements
insertion_sort(List, Sorted) :-
    insertion_sort(List, [], Sorted).

insertion_sort([], Acc, Acc).
insertion_sort([H | T], Acc, Sorted) :-
    insert(H, Acc, NewAcc),
    insertion_sort(T, NewAcc, Sorted).

insert(X, [], [X]).
insert(X, [Y | T], [X, Y | T]) :-
    X =< Y.
insert(X, [Y | T], [Y | NewT]) :-
    X > Y,
    insert(X, T, NewT).

% Input validation predicate
is_list(List) :-
    (var(List) -> false ; is_list_aux(List)).

is_list_aux([]).
is_list_aux([_ | T]) :-
    is_list_aux(T).

% Example queries
query(stack_op(push(1), [2, 3, 4], Y)).
query(stack_op(pop, [1, 2, 3, 4], Y)).
query(stack_op(dup, [1, 2, 3, 4], Y)).
query(stack_op(swap, [1, 2, 3, 4], Y)).
query(stack_op(over, [1, 2, 3, 4], Y)).
query(stack_op(rot, [1, 2, 3, 4], Y)).

<generated_code>
<Final_Answer> 
For each code block, extract it and format it in the following JSON format, please remove all code comments:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```

If there's no corresponding code exist:
```problog
{"HASH": "XXXX7890","Code": ""}
```
</Final_Answer>