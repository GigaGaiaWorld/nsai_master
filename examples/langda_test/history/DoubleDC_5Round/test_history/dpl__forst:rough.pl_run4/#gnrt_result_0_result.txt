Here are the extracted code blocks from the generated code that correspond to the operations mentioned in the origin code, formatted as requested:

```problog
{"HASH": "5E40E418", "Code": "stack_op(push(X), Stack, [X|Stack])."}
```

```problog
{"HASH": "5E40E418", "Code": "stack_op(pop, [X|Rest], Rest)."}
```

```problog
{"HASH": "5E40E418", "Code": "stack_op(dup, [X|Rest], [X, X|Rest])."}
```

```problog
{"HASH": "5E40E418", "Code": "stack_op(swap, [X, Y|Rest], [Y, X|Rest])."}
```

```problog
{"HASH": "5E40E418", "Code": "stack_op(over, [X, Y|Rest], [Y, X, Y|Rest])."}
```

```problog
{"HASH": "5E40E418", "Code": "stack_op(rot, [X, Y, Z|Rest], [Y, Z, X|Rest])."}
```

```problog
{"HASH": "5E40E418", "Code": "stack_op(sort, Stack, SortedStack) :- get_top_n(Stack, 3, Elements, RestStack), insertion_sort(Elements, SortedElements), append(SortedElements, RestStack, SortedStack)."}
```

```problog
{"HASH": "5E40E418", "Code": "get_top_n(Stack, N, Elements, Rest) :- length(Elements, N), append(Elements, Rest, Stack)."}
```

```problog
{"HASH": "5E40E418", "Code": "insertion_sort(List, Sorted) :- insertion_sort(List, [], Sorted). insertion_sort([], Acc, Acc). insertion_sort([H|T], Acc, Sorted) :- insert(H, Acc, NewAcc), insertion_sort(T, NewAcc, Sorted). insert(X, [], [X]). insert(X, [Y|T], [X, Y|T]) :- X =< Y. insert(X, [Y|T], [Y|NewT]) :- X > Y, insert(X, T, NewT)."}
```