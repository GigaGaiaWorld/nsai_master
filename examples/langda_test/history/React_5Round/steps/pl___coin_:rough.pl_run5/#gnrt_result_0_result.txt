Here is the completed code snippet for the `<langda>` block:

```problog
{"HASH": "DF1FDC54", "Code": "coin_toss(C, heads) :- coin(C).\ncoin_toss(C, tails) :- \+ coin(C).\ncoins_r(SC, S, CNT) :-\n    CNT > 0,\n    coin_toss(_, Result),\n    (Result == heads -> NewSC is SC + 1 ; NewSC = SC),\n    NewCNT is CNT - 1,\n    coins_r(NewSC, S, NewCNT)."}
```

### Explanation:
- `coin_toss/2` defines the probabilistic outcome of tossing a coin (`heads` with probability `0.8`, `tails` with `0.2`).
- In the recursive case of `coins_r/3`:
  - A coin is tossed, and the result (`heads` or `tails`) is checked.
  - If `heads`, `SC` is incremented by 1.
  - `CNT` is decremented, and the predicate recurses with the updated values.

This satisfies the requirement of sampling `CNT` independent coins and accumulating the number of heads.