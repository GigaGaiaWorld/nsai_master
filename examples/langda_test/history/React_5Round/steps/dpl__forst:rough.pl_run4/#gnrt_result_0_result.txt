```problog
{"HASH": "5E40E418","Code": "% Push operation - adds an element to the top of the stack\nstack_op(push(X), Stack, [X|Stack])."}
```
```problog
{"HASH": "5E40E418","Code": "% Pop operation - removes the top element from the stack\nstack_op(pop, [Top|Rest], Rest) :- Top = _."}
```
```problog
{"HASH": "5E40E418","Code": "% Dup operation - duplicates the top element of the stack\nstack_op(dup, [Top|Rest], [Top,Top|Rest])."}
```
```problog
{"HASH": "5E40E418","Code": "% Swap operation - swaps the top two elements of the stack\nstack_op(swap, [X,Y|Rest], [Y,X|Rest])."}
```
```problog
{"HASH": "5E40E418","Code": "% Over operation - copies the second element to the top\nstack_op(over, [X,Y|Rest], [Y,X,Y|Rest])."}
```
```problog
{"HASH": "5E40E418","Code": "% Rot operation - rotates the top three elements\nstack_op(rot, [X,Y,Z|Rest], [Z,X,Y|Rest])."}
```
```problog
{"HASH": "5E40E418","Code": "% Sort operation (already provided)\nstack_op(sort, Stack, SortedStack) :-\n    get_top_n(Stack, 3, Elements, RestStack),\n    insertion_sort(Elements, SortedElements),\n    append(SortedElements, RestStack, SortedStack)."}
```
```problog
{"HASH": "5E40E418","Code": "% Helper predicate to get top N elements\nget_top_n(Stack, N, Elements, Rest) :-\n    length(Elements, N),\n    append(Elements, Rest, Stack)."}
```