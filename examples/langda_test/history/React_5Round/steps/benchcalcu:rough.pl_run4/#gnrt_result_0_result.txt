```problog
{"HASH": "35747D5A","Code": "leftdigit(A), leftdigit(C),\n    digit(B), digit(D), digit(E),\n    all_different([A,B,C,D,E]),\n    % AB + BCD = CDE\n    % Break down into column-wise addition\n    % Units place: B + D = E (with possible carry)\n    sumdigit(0, B, D, E, C1),\n    % Tens place: A + C = D (with carry from units and possible new carry)\n    sumdigit(C1, A, C, D, C2),\n    % Hundreds place: 0 + B = C (with carry from tens)\n    sumdigit(C2, 0, B, C, _)."}
```

### Explanation:
1. `leftdigit(A), leftdigit(C)`: Ensures `A` and `C` are not zero.
2. `digit(B), digit(D), digit(E)`: Assigns digits to `B`, `D`, and `E`.
3. `all_different([A,B,C,D,E])`: Ensures all letters have distinct digits.
4. The `sumdigit/5` predicates break down the addition column-wise:
   - Units place: `B + D = E` (with carry `C1`).
   - Tens place: `A + C + C1 = D` (with carry `C2`).
   - Hundreds place: `0 + B + C2 = C` (final carry is ignored as itâ€™s not needed for this puzzle).

This ensures the equation `AB + BCD = CDE` holds numerically.