Based on the requirements in the <langda> block, I'll regenerate the code for defining the rock-paper-scissors game rules. The current code is incomplete as it's missing the actual game play rules (the `play/3` predicate) that determines win/lose/draw outcomes between moves.

Here's the regenerated code:

```problog
{"HASH": "CFA63C1E","Code": "move(rock).\nmove(paper).\nmove(scissor).\nbeats(rock, scissor).\nbeats(scissor, paper).\nbeats(paper, rock).\nplay([],[],[]).\nplay([P1|P1s],[P2|P2s],[win|Rs]) :- beats(P1,P2), play(P1s,P2s,Rs).\nplay([P1|P1s],[P2|P2s],[lose|Rs]) :- beats(P2,P1), play(P1s,P2s,Rs).\nplay([P1|P1s],[P2|P2s],[draw|Rs]) :- P1 == P2, play(P1s,P2s,Rs).\ncompute_score([], 0).\ncompute_score([win | Rs], S) :- compute_score(Rs, S1), S is S1 + 1.\ncompute_score([lose | Rs], S) :- compute_score(Rs, S1), S is S1 - 1.\ncompute_score([draw | Rs], S) :- compute_score(Rs, S1), S is S1.\ndetermine_winner(P1Moves,P2Moves,Winner) :- \nplay(P1Moves,P2Moves,Results), \ncompute_score(Results,S), \n( S > 0, Winner = player1 \n; S < 0, Winner = player2 \n; S = 0, Winner = draw \n).\nquery(determine_winner([rock,rock,rock],[paper,paper,scissor],W))."}
```