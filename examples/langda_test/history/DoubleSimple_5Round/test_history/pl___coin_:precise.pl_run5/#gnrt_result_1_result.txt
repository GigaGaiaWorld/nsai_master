Based on the requirements in the <langda> block, I'll regenerate the code to properly implement the coin counting logic where the success count SC increases by 1 when a coin turns up heads, and remains unchanged otherwise, with the counter decreasing to 0.

Here's the regenerated code:

```problog
{"HASH": "EA5E8D55","Code": "PH::make_coin(C,PH).\ncoin(C) :- make_coin(C,0.8).\ncoins_r(SC,SC,0).\ncoins_r(SC,S,CNT) :-\n CNT > 0,\n CNT1 is CNT - 1,\n (coin(CNT) -> coins_r(SC1,S,CNT1), SC1 is SC + 1\n ; coins_r(SC,S,CNT1)).\ntotal(S) :- coins_r(0,S,4).\nquery(total(_))."}
```

The key changes made:
1. Added proper recursive logic where CNT decreases by 1 each iteration
2. Added conditional (->/2) to check if the current coin is heads
3. If heads, increment SC by 1 and continue recursion
4. If tails, keep SC unchanged and continue recursion
5. The recursion accumulates the results properly into S

The code now correctly implements the requirements of counting successful coin flips with a decreasing counter.