#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- arabic_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Inlet), number(Digit2,Outlet), Inlet<Outlet.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.8933333333333333
i,time,loss,ground_time,compile_time,eval_time
100,5.388389825820923,0.28416192272641466,0.36171350240707395,0.21653186798095703,0.03963407039642334
200,9.91802167892456,0.4682795227649285,0.3656710863113403,0.21603260040283204,0.0419967246055603
300,14.780191898345947,0.33682053224049013,0.36625720262527467,0.2108515739440918,0.04480832576751709
400,19.399428844451904,0.2533097940027585,0.3670386910438538,0.20394353866577147,0.04283212900161743
500,24.34222102165222,0.3264571946604974,0.3656710863113403,0.21603260040283204,0.04556321859359741
600,29.22566866874695,0.3156395397169217,0.3674294352531433,0.20048952102661133,0.04478640079498291
700,34.10534596443176,0.2543938225778857,0.3652803421020508,0.21948661804199218,0.04542039394378662
800,38.67649579048157,0.34960352799800604,0.3656710863113403,0.21603260040283204,0.04246766567230224
900,43.35110378265381,0.3301745605611632,0.36625720262527467,0.2108515739440918,0.0433856463432312
1000,48.147960901260376,0.22487177058866703,0.3670386910438538,0.20394353866577147,0.044535090923309324
1100,53.16318202018738,0.2989233882373503,0.3656710863113403,0.21603260040283204,0.04627252101898193
1200,57.865041732788086,0.3031656873255906,0.3674294352531433,0.20048952102661133,0.04350488424301147
1300,62.834043741226196,0.25844500252627767,0.3652803421020508,0.21948661804199218,0.04594618558883667
1400,67.60359382629395,0.25358511994920263,0.3656710863113403,0.21603260040283204,0.044579131603240965
1500,72.38990473747253,0.2838142026542482,0.36625720262527467,0.2108515739440918,0.044464735984802245
1600,76.79833388328552,0.16155554029900304,0.3670386910438538,0.20394353866577147,0.04127868175506592
1700,81.86027884483337,0.2069945176793135,0.3656710863113403,0.21603260040283204,0.046837460994720456
1800,86.67737579345703,0.24548023276317735,0.3674294352531433,0.20048952102661133,0.04418280601501465
1900,91.67535376548767,0.18858048663037152,0.3652803421020508,0.21948661804199218,0.04574560165405273
2000,96.11856770515442,0.19711313930142751,0.3656710863113403,0.21603260040283204,0.041479771137237546
2100,100.85576796531677,0.2249654890761576,0.36625720262527467,0.2108515739440918,0.04426628351211548
2200,105.12295699119568,0.12613957747541144,0.3670386910438538,0.20394353866577147,0.03954970121383667
2300,109.53234887123108,0.1682611566349192,0.3656710863113403,0.21603260040283204,0.04099498748779297
2400,114.09423995018005,0.23430360562165334,0.3674294352531433,0.20048952102661133,0.04164040803909302
2500,118.74765586853027,0.13827990915995542,0.3652803421020508,0.21948661804199218,0.043259172439575194
2600,123.37961173057556,0.15121220562479265,0.3656710863113403,0.21603260040283204,0.0420580530166626
2700,127.80261087417603,0.2206710350278081,0.36625720262527467,0.2108515739440918,0.04081637859344482
2800,131.97293996810913,0.12849076362466258,0.3670386910438538,0.20394353866577147,0.03836500644683838
2900,136.2179729938507,0.14252601516221886,0.3656710863113403,0.21603260040283204,0.039638173580169675
3000,140.571843624115,0.1959162341897593,0.3674294352531433,0.20048952102661133,0.04072819471359253