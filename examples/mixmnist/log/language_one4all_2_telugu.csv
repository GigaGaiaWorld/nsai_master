#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- arabic_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Inlet), number(Digit2,Outlet), Inlet<Outlet.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.86
i,time,loss,ground_time,compile_time,eval_time
100,7.561599969863892,0.584257039714139,0.5664323472976684,0.14110080957412718,0.05454315185546875
200,13.21337103843689,0.4800433852517745,0.5664413833618164,0.14324847221374512,0.05073744773864746
300,19.22508716583252,0.42185494795208794,0.5554244136810302,0.1446416759490967,0.05438697099685669
400,24.397319078445435,0.4560260474876122,0.5407351207733154,0.14649928092956543,0.04734566926956177
500,29.631612062454224,0.38615552769821077,0.5664413833618164,0.14324847221374512,0.047796761989593504
600,35.11568593978882,0.422892252036836,0.533390474319458,0.1474280834197998,0.04948915958404541
700,40.50926494598389,0.34327108304100196,0.5737860298156738,0.14231966972351073,0.04913203001022339
800,45.82506084442139,0.34680475287601437,0.5664413833618164,0.14324847221374512,0.04848602294921875
900,51.04862022399902,0.39583253959933246,0.5554244136810302,0.1446416759490967,0.047632920742034915
1000,56.37631607055664,0.3743926010244741,0.5407351207733154,0.14649928092956543,0.04822714328765869
1100,61.99047899246216,0.30289188346112494,0.5664413833618164,0.14324847221374512,0.04993267297744751
1200,67.54635095596313,0.35317101120780536,0.533390474319458,0.1474280834197998,0.049702720642089845
1300,73.9975950717926,0.2850086262123388,0.5737860298156738,0.14231966972351073,0.05837988376617432
1400,79.4499249458313,0.32752434683820864,0.5664413833618164,0.14324847221374512,0.048739385604858396
1500,84.61484694480896,0.3174724785793842,0.5554244136810302,0.1446416759490967,0.04717103004455567
1600,89.73903012275696,0.3109301769185913,0.5407351207733154,0.14649928092956543,0.0471919846534729
1700,94.74344611167908,0.23457957346162403,0.5664413833618164,0.14324847221374512,0.04554907560348511
1800,99.9072778224945,0.28934838046378447,0.533390474319458,0.1474280834197998,0.04600825786590576
1900,104.68782019615173,0.22992674214951542,0.5737860298156738,0.14231966972351073,0.04399072647094727
2000,109.77052092552185,0.3163818870316959,0.5664413833618164,0.14324847221374512,0.0463329005241394
2100,115.06675791740417,0.2991394718539777,0.5554244136810302,0.1446416759490967,0.04742824077606201
2200,120.0578441619873,0.26189718463796735,0.5407351207733154,0.14649928092956543,0.044947192668914795
2300,125.35463881492615,0.20116485581880625,0.5664413833618164,0.14324847221374512,0.04836396455764771
2400,130.44536900520325,0.3009538590712555,0.533390474319458,0.1474280834197998,0.04677348136901856
2500,135.48509097099304,0.18201451289861326,0.5737860298156738,0.14231966972351073,0.04614886045455933
2600,140.0802960395813,0.29214297333709965,0.5664413833618164,0.14324847221374512,0.042509801387786865
2700,144.92299509048462,0.2679721098621303,0.5554244136810302,0.1446416759490967,0.04475497722625733
2800,149.52641892433167,0.20878178181693044,0.5407351207733154,0.14649928092956543,0.042478232383728026
2900,154.17128896713257,0.1859331295798529,0.5664413833618164,0.14324847221374512,0.043080310821533206
3000,158.7278118133545,0.2389000961619513,0.533390474319458,0.1474280834197998,0.04222224473953247