#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- arabic_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Temp), number(Digit2,Flow), (Temp>=60; Flow=<20).\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.9266666666666666
i,time,loss,ground_time,compile_time,eval_time
100,4.597104072570801,0.601894642021507,0.7406774950027466,0.11212010145187377,0.025978591442108154
200,7.557196855545044,0.5163551230495795,0.7623470306396485,0.11161396026611328,0.026948776245117188
300,10.562602996826172,0.3787523224169854,0.7623470306396485,0.11161396026611328,0.027530529499053956
400,13.439013004302979,0.370343694451476,0.7674178123474121,0.11102829933166504,0.02617847204208374
500,16.492300033569336,0.31969580042863527,0.7724885940551758,0.1104426383972168,0.02733242988586426
600,19.33791208267212,0.28877018128816984,0.7699532032012939,0.11073546886444091,0.025780992507934572
700,22.66053009033203,0.22378590942933982,0.7471346855163574,0.11337094306945801,0.028581173419952394
800,25.547658920288086,0.304858126812951,0.7623470306396485,0.11161396026611328,0.026044297218322753
900,28.525004863739014,0.20900415872679104,0.7623470306396485,0.11161396026611328,0.02714846134185791
1000,31.379904985427856,0.22883907953827928,0.7674178123474121,0.11102829933166504,0.02588014841079712
1100,34.22208881378174,0.20223345422625016,0.7724885940551758,0.1104426383972168,0.025781116485595702
1200,37.06115913391113,0.15259867552688605,0.7699532032012939,0.11073546886444091,0.02529063940048218
1300,39.94771599769592,0.18199115559524898,0.7471346855163574,0.11337094306945801,0.025862770080566408
1400,42.8101270198822,0.2956236508371285,0.7623470306396485,0.11161396026611328,0.025949649810791016
1500,45.97608399391174,0.2073086164709292,0.7623470306396485,0.11161396026611328,0.0284466290473938
1600,48.87814807891846,0.15980667405198345,0.7674178123474121,0.11102829933166504,0.026153502464294435
1700,51.74062514305115,0.13249043478087516,0.7724885940551758,0.1104426383972168,0.025675160884857176
1800,54.3342080116272,0.09476962934852338,0.7699532032012939,0.11073546886444091,0.023472568988800048
1900,57.06019973754883,0.15679067759556972,0.7471346855163574,0.11337094306945801,0.024785542488098146
2000,59.951120138168335,0.25202263125939905,0.7623470306396485,0.11161396026611328,0.026008503437042238
2100,62.87230610847473,0.18664296128524258,0.7623470306396485,0.11161396026611328,0.026708149909973146
2200,65.58835291862488,0.08892553685274976,0.7674178123474121,0.11102829933166504,0.02479752779006958
2300,68.30931091308594,0.11903860669713595,0.7724885940551758,0.1104426383972168,0.024940478801727294
2400,70.9040207862854,0.05624704945814983,0.7699532032012939,0.11073546886444091,0.02369469404220581
2500,73.34464979171753,0.09433782143677462,0.7471346855163574,0.11337094306945801,0.022304561138153076
2600,76.08611488342285,0.16845717948215913,0.7623470306396485,0.11161396026611328,0.024650800228118896
2700,78.95861291885376,0.16692419806359793,0.7623470306396485,0.11161396026611328,0.02629823923110962
2800,81.632150888443,0.06573864336000057,0.7674178123474121,0.11102829933166504,0.024444000720977785
2900,84.36266112327576,0.08634888749605465,0.7724885940551758,0.1104426383972168,0.02494550943374634
3000,86.83667492866516,0.04252803454714155,0.7699532032012939,0.11073546886444091,0.022648215293884277