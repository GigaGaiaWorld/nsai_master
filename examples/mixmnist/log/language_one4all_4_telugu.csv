#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- arabic_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Inlet), number(Digit2,Outlet), Inlet<Outlet.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.9
i,time,loss,ground_time,compile_time,eval_time
100,6.916746139526367,0.6241109864041209,0.3697889471054077,0.25041885375976564,0.05026262283325195
200,12.405575275421143,0.5169505660049617,0.37348520278930664,0.25718213081359864,0.04931468248367309
300,18.19218111038208,0.45791999201173894,0.3734100151062012,0.26534730434417725,0.05223418951034546
400,23.638909339904785,0.4655612270883285,0.3733097648620605,0.2762342023849487,0.04924014091491699
500,29.195756196975708,0.38510217893432125,0.37348520278930664,0.25718213081359864,0.05055481672286987
600,34.55080723762512,0.4099197134828864,0.3732596397399902,0.28167765140533446,0.04854765176773071
700,39.92800307273865,0.3203552307694008,0.37353532791137695,0.2517386817932129,0.04896038055419922
800,45.12280297279358,0.35048603829927744,0.37348520278930664,0.25718213081359864,0.04743149757385254
900,50.13798117637634,0.35512506465267507,0.3734100151062012,0.26534730434417725,0.0460527229309082
1000,55.459758281707764,0.3622887058929589,0.3733097648620605,0.2762342023849487,0.04898179531097412
1100,60.64593005180359,0.3139806832065005,0.37348520278930664,0.25718213081359864,0.047255561351776124
1200,65.73696827888489,0.3493002485218312,0.3732596397399902,0.28167765140533446,0.04645090341567993
1300,70.94926118850708,0.2792829614578295,0.37353532791137695,0.2517386817932129,0.04760630130767822
1400,76.54485726356506,0.2849980952069018,0.37348520278930664,0.25718213081359864,0.051200106143951415
1500,81.28782224655151,0.31702084186188584,0.3734100151062012,0.26534730434417725,0.0439447021484375
1600,86.04371523857117,0.2834082396983558,0.3733097648620605,0.2762342023849487,0.04410630941390991
1700,91.30120706558228,0.23981420406686083,0.37348520278930664,0.25718213081359864,0.0482369327545166
1800,96.21089220046997,0.26536581026832207,0.3732596397399902,0.28167765140533446,0.04510346412658692
1900,101.16750812530518,0.2432283090689998,0.37353532791137695,0.2517386817932129,0.04555479288101196
2000,106.14213418960571,0.24142398970055182,0.37348520278930664,0.25718213081359864,0.04597433567047119
2100,110.71325707435608,0.26296235387159866,0.3734100151062012,0.26534730434417725,0.042071125507354735
2200,115.30529928207397,0.24273393448098432,0.3733097648620605,0.2762342023849487,0.04249804973602295
2300,120.49299716949463,0.19142217312379217,0.37348520278930664,0.25718213081359864,0.0471466064453125
2400,125.44632601737976,0.21293174442433155,0.3732596397399902,0.28167765140533446,0.04515536785125732
2500,130.26584601402283,0.18023538792469027,0.37353532791137695,0.2517386817932129,0.044189167022705075
2600,134.83468914031982,0.22147447751570326,0.37348520278930664,0.25718213081359864,0.04256874084472656
2700,139.55226111412048,0.19820426346392195,0.3734100151062012,0.26534730434417725,0.04356941938400269
2800,144.05903124809265,0.1655068102462377,0.3733097648620605,0.2762342023849487,0.04164210557937622
2900,148.56759309768677,0.13362191547298607,0.37348520278930664,0.25718213081359864,0.04143806457519531
3000,153.15339422225952,0.1873442563513163,0.3732596397399902,0.28167765140533446,0.04153727054595947