#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- telugu_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Current1), number(Digit2,Current2), Sum is Current1+Current2, Sum>120.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.8933333333333333
i,time,loss,ground_time,compile_time,eval_time
100,6.436951160430908,0.5633963683247566,0.9094366359710694,0.10864137887954711,0.03925909280776978
200,10.697312116622925,0.5441120938956737,0.9203602075576782,0.10946865081787109,0.03889435291290283
300,14.771610975265503,0.41762055401457476,0.9250087738037109,0.10874590873718262,0.03700124502182007
400,18.84905195236206,0.42743284145311916,0.9505758881568909,0.104770827293396,0.03692388296127319
500,22.881980895996094,0.3859912459249608,0.9412787556648254,0.10621631145477295,0.03658050775527954
600,27.078654050827026,0.34677206074004063,0.9203602075576782,0.10946865081787109,0.03822945356369019
700,31.100327968597412,0.3129172891585222,0.9180359244346619,0.10983002185821533,0.0366859245300293
800,35.40416216850281,0.31549902847730665,0.9203602075576782,0.10946865081787109,0.039162347316741945
900,39.555176973342896,0.26062902084184314,0.9250087738037109,0.10874590873718262,0.0371696400642395
1000,43.63266587257385,0.32116415621552735,0.9505758881568909,0.104770827293396,0.03609808683395386
1100,47.765334129333496,0.26826788898024234,0.9412787556648254,0.10621631145477295,0.037323124408721924
1200,51.72292900085449,0.24708169607130911,0.9203602075576782,0.10946865081787109,0.035964410305023196
1300,55.87335681915283,0.263120594847868,0.9180359244346619,0.10983002185821533,0.03769432067871094
1400,59.81124520301819,0.24163878473193393,0.9203602075576782,0.10946865081787109,0.0359952974319458
1500,63.826600074768066,0.2004711518687145,0.9250087738037109,0.10874590873718262,0.03641594409942627
1600,67.73985886573792,0.25390354387555475,0.9505758881568909,0.104770827293396,0.0354637885093689
1700,71.58372783660889,0.18985198398207104,0.9412787556648254,0.10621631145477295,0.03481289863586426
1800,75.36959385871887,0.15150906217541268,0.9203602075576782,0.10946865081787109,0.0346466064453125
1900,79.08630204200745,0.24253578848612378,0.9180359244346619,0.10983002185821533,0.03403172254562378
2000,82.67007398605347,0.22866759031434875,0.9203602075576782,0.10946865081787109,0.03266296625137329
2100,86.08953595161438,0.1907401364816085,0.9250087738037109,0.10874590873718262,0.03143633365631104
2200,89.53279995918274,0.183019586484102,0.9505758881568909,0.104770827293396,0.03155037403106689
2300,93.08055996894836,0.16548723568989884,0.9412787556648254,0.10621631145477295,0.03216428279876709
2400,96.62398290634155,0.1343959795989897,0.9203602075576782,0.10946865081787109,0.03269810438156128
2500,99.98975276947021,0.16840234409732743,0.9180359244346619,0.10983002185821533,0.030936574935913085
2600,103.40812802314758,0.17621509735352653,0.9203602075576782,0.10946865081787109,0.031080923080444335
2700,106.90412998199463,0.1977602927114482,0.9250087738037109,0.10874590873718262,0.03213201761245728
2800,110.13220310211182,0.16107620033528655,0.9505758881568909,0.104770827293396,0.029545416831970216
2900,113.52073812484741,0.13272936406157732,0.9412787556648254,0.10621631145477295,0.031080567836761476
3000,117.08183193206787,0.11028807640943362,0.9203602075576782,0.10946865081787109,0.032508513927459716