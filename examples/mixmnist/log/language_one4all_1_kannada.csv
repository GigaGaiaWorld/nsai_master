#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- kannada_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Current1), number(Digit2,Current2), Sum is Current1+Current2, Sum>120.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.86
i,time,loss,ground_time,compile_time,eval_time
100,7.226522922515869,0.560086853094399,1.0493347454071045,0.12185721397399903,0.045763893127441405
200,12.185629844665527,0.5684757548570633,1.0513063073158264,0.12344813346862793,0.045138497352600095
300,17.08116364479065,0.6122068697214127,1.0357763051986695,0.1240962028503418,0.04458410024642944
400,22.11532497406006,0.6767177829146385,1.0109283018112183,0.12513311386108397,0.046186599731445316
500,27.000194787979126,0.6210850170254707,1.0326703047752381,0.12422581672668458,0.04456891536712646
600,31.853574752807617,0.6088196232914924,1.0357763051986695,0.1240962028503418,0.044197463989257814
700,36.76616668701172,0.5598911449313164,1.057518308162689,0.12318890571594238,0.044857215881347653
800,41.547497034072876,0.5558126312494278,1.0513063073158264,0.12344813346862793,0.044133968353271484
900,46.33650088310242,0.5819767282903194,1.0357763051986695,0.1240962028503418,0.04436825513839722
1000,51.7366669178009,0.49227707643061874,1.0109283018112183,0.12513311386108397,0.0489701247215271
1100,56.7739200592041,0.3792569402093068,1.0326703047752381,0.12422581672668458,0.045606300830841065
1200,61.89554572105408,0.2993536911028787,1.0357763051986695,0.1240962028503418,0.045119400024414065
1300,66.7944598197937,0.3318762431833602,1.057518308162689,0.12318890571594238,0.04420060634613037
1400,71.99220299720764,0.26564560492364764,1.0513063073158264,0.12344813346862793,0.04725629329681397
1500,76.71581387519836,0.24789615534492895,1.0357763051986695,0.1240962028503418,0.04283219814300537
1600,81.23911786079407,0.25458664636502365,1.0109283018112183,0.12513311386108397,0.04126634120941162
1700,85.87191891670227,0.2606496051198246,1.0326703047752381,0.12422581672668458,0.04229581594467163
1800,90.43475580215454,0.17518708663781354,1.0357763051986695,0.1240962028503418,0.04159825086593628
1900,95.13931965827942,0.19780463905639245,1.057518308162689,0.12318890571594238,0.04327141523361206
2000,99.56294202804565,0.11295439826167133,1.0513063073158264,0.12344813346862793,0.04045907497406006
2100,104.039874792099,0.19335639381479425,1.0357763051986695,0.1240962028503418,0.040845575332641604
2200,108.315260887146,0.1519773795444076,1.0109283018112183,0.12513311386108397,0.03918879508972168
2300,112.77865195274353,0.23046836552977992,1.0326703047752381,0.12422581672668458,0.04082549571990967
2400,117.47274494171143,0.12659198638630756,1.0357763051986695,0.1240962028503418,0.043279793262481686
2500,121.781320810318,0.14627142312146035,1.057518308162689,0.12318890571594238,0.039751081466674804
2600,125.8956789970398,0.07579916760737916,1.0513063073158264,0.12344813346862793,0.03800402641296387
2700,130.1419768333435,0.10799433758030431,1.0357763051986695,0.1240962028503418,0.03864768028259277
2800,134.20070672035217,0.11310430721705082,1.0109283018112183,0.12513311386108397,0.03736236095428467
2900,138.35488486289978,0.18311336913980028,1.0326703047752381,0.12422581672668458,0.0383260440826416
3000,142.82251501083374,0.10337956943603616,1.0357763051986695,0.1240962028503418,0.040843369960784914