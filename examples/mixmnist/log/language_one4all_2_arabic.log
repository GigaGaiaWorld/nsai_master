#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- arabic_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Temp), number(Digit2,Flow), (Temp>=60; Flow=<20).\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.9066666666666666
i,time,loss,ground_time,compile_time,eval_time
100,4.7565388679504395,0.6481092908978462,0.7268626880645752,0.08632472991943359,0.026790802478790284
200,7.678622007369995,0.5652171472273767,0.7414173698425293,0.08738377571105957,0.0266538405418396
300,10.70675802230835,0.41662374484469183,0.7414173698425293,0.08738377571105957,0.02701678276062012
400,13.548293113708496,0.37076295549373756,0.7439951705932617,0.08745063781738281,0.02583613395690918
500,16.490552186965942,0.3862646230901373,0.7465729713439941,0.08751749992370605,0.026846323013305664
600,19.208630084991455,0.2756324826510445,0.7452840709686279,0.08748406887054444,0.024755885601043703
700,22.067193031311035,0.30214093941266595,0.733683967590332,0.08718318939208984,0.02521813154220581
800,25.139230966567993,0.36336243853672845,0.7414173698425293,0.08738377571105957,0.027247743606567384
900,28.375020027160645,0.24251847652232073,0.7414173698425293,0.08738377571105957,0.028867723941802977
1000,31.455104112625122,0.20668290883205154,0.7439951705932617,0.08745063781738281,0.02757455110549927
1100,34.22552299499512,0.22171587997884187,0.7465729713439941,0.08751749992370605,0.025174596309661866
1200,36.84487986564636,0.18325077903405826,0.7452840709686279,0.08748406887054444,0.02385197639465332
1300,39.4785840511322,0.22578352889519493,0.733683967590332,0.08718318939208984,0.023975851535797118
1400,42.38256216049194,0.27115587437508454,0.7414173698425293,0.08738377571105957,0.02587226390838623
1500,45.15546703338623,0.1475599966876053,0.7414173698425293,0.08738377571105957,0.025264196395874024
1600,47.81260395050049,0.1342194276182994,0.7439951705932617,0.08745063781738281,0.023957004547119142
1700,50.59488892555237,0.10630105158056495,0.7465729713439941,0.08751749992370605,0.024999089241027832
1800,53.077229022979736,0.14653877454963776,0.7452840709686279,0.08748406887054444,0.02252190828323364
1900,55.77177286148071,0.18861387958425696,0.733683967590332,0.08718318939208984,0.024033973217010497
2000,58.544942140579224,0.19940361894029593,0.7414173698425293,0.08738377571105957,0.025058450698852538
2100,61.220826864242554,0.14330598258093238,0.7414173698425293,0.08738377571105957,0.02432430028915405
2200,63.89039492607117,0.0875302515113367,0.7439951705932617,0.08745063781738281,0.02413036584854126
2300,66.65546488761902,0.1031618368841373,0.7465729713439941,0.08751749992370605,0.025060765743255616
2400,69.12548804283142,0.05856703640621788,0.7452840709686279,0.08748406887054444,0.02250190734863281
2500,71.90122103691101,0.16078959717237992,0.733683967590332,0.08718318939208984,0.02485461950302124
2600,74.58061504364014,0.12719590149948468,0.7414173698425293,0.08738377571105957,0.02404099941253662
2700,77.33077597618103,0.11653606966709709,0.7414173698425293,0.08738377571105957,0.0247284460067749
2800,79.95559287071228,0.055068488242379775,0.7439951705932617,0.08745063781738281,0.023844220638275147
2900,82.55647802352905,0.051022700670691847,0.7465729713439941,0.08751749992370605,0.023739871978759767
3000,84.94943594932556,0.016038978864897472,0.7452840709686279,0.08748406887054444,0.02176062822341919