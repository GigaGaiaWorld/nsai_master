#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- arabic_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Inlet), number(Digit2,Outlet), Inlet<Outlet.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.8866666666666667
i,time,loss,ground_time,compile_time,eval_time
100,5.05704402923584,0.3167813286647686,0.40490084648132324,0.20022493362426758,0.035011656284332275
200,9.000273942947388,0.42712741503665713,0.40910240173339846,0.204912748336792,0.03627389192581177
300,13.426728010177612,0.3442740958594004,0.40931772232055663,0.2100530481338501,0.040084757804870606
400,17.495766162872314,0.318456244213537,0.4096048164367676,0.21690678119659423,0.03745455503463745
500,21.5578932762146,0.3472064281965504,0.40910240173339846,0.204912748336792,0.03765748739242554
600,25.63210916519165,0.27682126694638554,0.40974836349487304,0.22033364772796632,0.03791051864624023
700,29.48820996284485,0.23747420360072283,0.40895885467529297,0.20148588180541993,0.03594829320907593
800,33.26955604553223,0.31248177816836686,0.40910240173339846,0.204912748336792,0.03533933401107788
900,37.32622504234314,0.2859527225054171,0.40931772232055663,0.2100530481338501,0.03770714282989502
1000,41.15606212615967,0.228052327880805,0.4096048164367676,0.21690678119659423,0.03562480926513672
1100,45.334519147872925,0.28590223567463907,0.40910240173339846,0.204912748336792,0.03838916778564453
1200,49.20170617103577,0.25199324256747785,0.40974836349487304,0.22033364772796632,0.0358918285369873
1300,53.160707235336304,0.1691764456768851,0.40895885467529297,0.20148588180541993,0.036765737533569334
1400,57.91638517379761,0.25983788979739075,0.40910240173339846,0.204912748336792,0.043948206901550296
1500,61.65699315071106,0.2703402330361132,0.40931772232055663,0.2100530481338501,0.03493958473205566
1600,65.30159211158752,0.15751752893598223,0.4096048164367676,0.21690678119659423,0.034152259826660154
1700,69.19012212753296,0.21508141115433319,0.40910240173339846,0.204912748336792,0.03626557826995849
1800,72.77869915962219,0.2752753623830722,0.40974836349487304,0.22033364772796632,0.03359545946121216
1900,76.55749201774597,0.14389444845562138,0.40895885467529297,0.20148588180541993,0.03531220436096191
2000,80.15295219421387,0.18149535384479593,0.40910240173339846,0.204912748336792,0.03384782075881958
2100,83.87294220924377,0.23122785795403616,0.40931772232055663,0.2100530481338501,0.034898076057434085
2200,87.47928309440613,0.14832491042292076,0.4096048164367676,0.21690678119659423,0.033723335266113284
2300,91.1248791217804,0.18449018424812494,0.40910240173339846,0.204912748336792,0.034234373569488524
2400,94.79753804206848,0.28018902867371254,0.40974836349487304,0.22033364772796632,0.034152181148529054
2500,98.50652027130127,0.13834712769995122,0.40895885467529297,0.20148588180541993,0.03466500520706177
2600,102.13632416725159,0.15724293720888455,0.40910240173339846,0.204912748336792,0.03405751466751099
2700,105.73024916648865,0.19016796363457616,0.40931772232055663,0.2100530481338501,0.03378649234771729
2800,109.10909605026245,0.14238299284394088,0.4096048164367676,0.21690678119659423,0.031555569171905516
2900,112.54565095901489,0.15267227130308014,0.40910240173339846,0.204912748336792,0.032334847450256346
3000,115.92724895477295,0.2372084973389633,0.40974836349487304,0.22033364772796632,0.03175646781921387