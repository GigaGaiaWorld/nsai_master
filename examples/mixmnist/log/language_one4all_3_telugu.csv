#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- arabic_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Inlet), number(Digit2,Outlet), Inlet<Outlet.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.8466666666666667
i,time,loss,ground_time,compile_time,eval_time
100,6.5351550579071045,0.6013364883884788,0.35672530889511106,0.19912703275680543,0.048599982261657716
200,12.417009115219116,0.5238664584688376,0.36017584323883056,0.20384200572967529,0.05283030986785889
300,17.855062007904053,0.4319473413543892,0.3598812508583069,0.20905606985092162,0.049941697120666505
400,23.019880056381226,0.46026238118021867,0.3594884610176086,0.21600815534591675,0.047433996200561525
500,28.198806047439575,0.3855157742513984,0.36017584323883056,0.20384200572967529,0.04754103422164917
600,33.51196002960205,0.491420285681379,0.3592920660972595,0.2194841980934143,0.048502144813537595
700,39.16024208068848,0.34626584892308754,0.3603722381591797,0.20036596298217774,0.05019878387451172
800,44.68248796463013,0.3552715731170429,0.36017584323883056,0.20384200572967529,0.04975574970245361
900,50.24755620956421,0.3774312390236446,0.3598812508583069,0.20905606985092162,0.0507353663444519
1000,55.391319036483765,0.35853980634576144,0.3594884610176086,0.21600815534591675,0.04714089155197144
1100,60.88971710205078,0.3293698873985704,0.36017584323883056,0.20384200572967529,0.04965169668197632
1200,66.41606307029724,0.3643061629620206,0.3592920660972595,0.2194841980934143,0.04969258308410644
1300,72.34377908706665,0.32960596883909604,0.3603722381591797,0.20036596298217774,0.053771891593933106
1400,77.78490495681763,0.2910764282763557,0.36017584323883056,0.20384200572967529,0.049014163017272946
1500,83.6917839050293,0.33412059626822155,0.3598812508583069,0.20905606985092162,0.05336243391036987
1600,89.03073620796204,0.27563822326499576,0.3594884610176086,0.21600815534591675,0.0487712025642395
1700,94.39483308792114,0.2756979237667474,0.36017584323883056,0.20384200572967529,0.04883803367614746
1800,99.48624110221863,0.29507101350271114,0.3592920660972595,0.2194841980934143,0.04664052009582519
1900,105.26084303855896,0.3203823866650419,0.3603722381591797,0.20036596298217774,0.05309675693511963
2000,110.42514109611511,0.2819654517409799,0.36017584323883056,0.20384200572967529,0.047460322380065915
2100,115.48283100128174,0.28854907684999487,0.3598812508583069,0.20905606985092162,0.04620265007019043
2200,120.44773197174072,0.2409218749094913,0.3594884610176086,0.21600815534591675,0.04498744487762451
2300,126.25642108917236,0.2253240956557056,0.36017584323883056,0.20384200572967529,0.05286154747009277
2400,131.78913617134094,0.2347938374797741,0.3592920660972595,0.2194841980934143,0.05052083730697632
2500,136.91805219650269,0.27801642583179276,0.3603722381591797,0.20036596298217774,0.04655186653137207
2600,141.77429914474487,0.25509182358360705,0.36017584323883056,0.20384200572967529,0.04439967393875122
2700,146.73865509033203,0.24500587196414927,0.3598812508583069,0.20905606985092162,0.04571347951889038
2800,151.52072715759277,0.20003514673687278,0.3594884610176086,0.21600815534591675,0.04374775171279907
2900,156.23897695541382,0.16117012301506292,0.36017584323883056,0.20384200572967529,0.04280881404876709
3000,160.87846493721008,0.19371857440615714,0.3592920660972595,0.2194841980934143,0.04282779455184937