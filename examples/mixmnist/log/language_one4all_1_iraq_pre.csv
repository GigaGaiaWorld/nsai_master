#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- arabic_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Inlet), number(Digit2,Outlet), Inlet<Outlet.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.8333333333333334
i,time,loss,ground_time,compile_time,eval_time
100,6.30717396736145,0.3081778957186197,0.4349355411529541,0.17995138883590697,0.047322597503662106
200,11.040280103683472,0.4190751299003739,0.44078559398651124,0.18122735977172852,0.04397985219955444
300,16.090317010879517,0.346566775274041,0.44359506845474245,0.18018261432647706,0.046602256298065185
400,21.434258937835693,0.3088332443770082,0.44734103441238404,0.1787896203994751,0.0489642596244812
500,26.78628706932068,0.32930346494300466,0.44078559398651124,0.18122735977172852,0.04901988744735718
600,32.1768798828125,0.27617557946181476,0.4492140173912048,0.1780931234359741,0.04944471836090088
700,37.22127413749695,0.2235647112082097,0.4389126110076904,0.18192385673522948,0.04669836521148682
800,42.230567932128906,0.28205827068376266,0.44078559398651124,0.18122735977172852,0.04665486097335816
900,47.146531105041504,0.2765071773281306,0.44359506845474245,0.18018261432647706,0.04570087671279907
1000,51.87926197052002,0.21402420473024678,0.44734103441238404,0.1787896203994751,0.044211292266845705
1100,56.886038064956665,0.24299533733448697,0.44078559398651124,0.18122735977172852,0.046822280883789064
1200,61.67582702636719,0.24890484226722037,0.4492140173912048,0.1780931234359741,0.04457251071929932
1300,66.58067107200623,0.16518742064637082,0.4389126110076904,0.18192385673522948,0.04576438903808594
1400,71.23864722251892,0.1898924013375836,0.44078559398651124,0.18122735977172852,0.04364546537399292
1500,75.9993212223053,0.28722420829246403,0.44359506845474245,0.18018261432647706,0.04440199613571167
1600,80.63601112365723,0.17173489301921108,0.44734103441238404,0.1787896203994751,0.04335662603378296
1700,86.22370624542236,0.1976942796287858,0.44078559398651124,0.18122735977172852,0.05151451349258423
1800,90.84688115119934,0.20998202583309422,0.4492140173912048,0.1780931234359741,0.042900569438934326
1900,95.5038640499115,0.14610293155867396,0.4389126110076904,0.18192385673522948,0.043483994007110595
2000,100.15029001235962,0.1554549576571344,0.44078559398651124,0.18122735977172852,0.04296217441558838
2100,104.85123991966248,0.24968692320368974,0.44359506845474245,0.18018261432647706,0.043806679248809814
2200,109.23456406593323,0.12887538708509452,0.44734103441238404,0.1787896203994751,0.04109130382537842
2300,113.90259790420532,0.15135225148592782,0.44078559398651124,0.18122735977172852,0.04331082105636597
2400,118.82919907569885,0.18722559694650046,0.4492140173912048,0.1780931234359741,0.04515282154083252
2500,123.80161809921265,0.14388404870659544,0.4389126110076904,0.18192385673522948,0.04632545709609985
2600,128.13392519950867,0.12202958855317775,0.44078559398651124,0.18122735977172852,0.04020803689956665
2700,132.33133697509766,0.2016414914124607,0.44359506845474245,0.18018261432647706,0.03905858278274536
2800,136.29987502098083,0.11292871233235488,0.44734103441238404,0.1787896203994751,0.03720195531845093
2900,140.5458619594574,0.11366796203340385,0.44078559398651124,0.18122735977172852,0.039853355884552
3000,144.87274193763733,0.15385067840396005,0.4492140173912048,0.1780931234359741,0.03969888925552368