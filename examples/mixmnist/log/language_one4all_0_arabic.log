#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- arabic_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Temp), number(Digit2,Flow), (Temp>=60; Flow=<20).\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.92
i,time,loss,ground_time,compile_time,eval_time
100,5.323101997375488,0.6078974373452365,0.6947182893753052,0.4830366230010986,0.026836063861846924
200,8.516954183578491,0.5644325518270489,0.6999823188781739,0.4527468299865723,0.028358986377716066
300,11.655278205871582,0.4754826202278491,0.6999823188781739,0.4527468299865723,0.027698707580566407
400,14.799309253692627,0.45952971343504034,0.6993556785583496,0.4401774215698242,0.02750797986984253
500,17.836676120758057,0.48049251022184764,0.6987290382385254,0.42760801315307617,0.02664827585220337
600,20.97499704360962,0.4946572748962717,0.6990423583984375,0.4338927173614502,0.02765634536743164
700,23.933824062347412,0.3175426429759682,0.7018622398376465,0.49045505523681643,0.02639763116836548
800,27.420209169387817,0.4291145995623083,0.6999823188781739,0.4527468299865723,0.0309551739692688
900,30.532685041427612,0.2510147022277897,0.6999823188781739,0.4527468299865723,0.027505712509155275
1000,33.39343810081482,0.28508738136023565,0.6993556785583496,0.4401774215698242,0.025934813022613527
1100,36.40611815452576,0.23295950980059388,0.6987290382385254,0.42760801315307617,0.026366589069366456
1200,39.360156297683716,0.1637912120979172,0.6990423583984375,0.4338927173614502,0.02665738105773926
1300,42.05257606506348,0.20326792985428263,0.7018622398376465,0.49045505523681643,0.024325060844421386
1400,44.86190629005432,0.2360079170813583,0.6999823188781739,0.4527468299865723,0.025380170345306395
1500,47.626471281051636,0.14541726414687445,0.6999823188781739,0.4527468299865723,0.02504509687423706
1600,50.548617124557495,0.19111376458144158,0.6993556785583496,0.4401774215698242,0.02622013807296753
1700,53.31080412864685,0.14940730292812077,0.6987290382385254,0.42760801315307617,0.02499232292175293
1800,56.0202853679657,0.10297336747420559,0.6990423583984375,0.4338927173614502,0.0245526647567749
1900,58.789987087249756,0.13288527598082908,0.7018622398376465,0.49045505523681643,0.02526764154434204
2000,61.455029010772705,0.1747844934826307,0.6999823188781739,0.4527468299865723,0.02425945281982422
2100,64.11223411560059,0.08046576022628045,0.6999823188781739,0.4527468299865723,0.02412064552307129
2200,66.71661424636841,0.09651889917634947,0.6993556785583496,0.4401774215698242,0.023559181690216063
2300,69.32429432868958,0.11706329609259768,0.6987290382385254,0.42760801315307617,0.02382657051086426
2400,72.33737015724182,0.08059290607148796,0.6990423583984375,0.4338927173614502,0.026298060417175292
2500,74.82859802246094,0.08275956213267541,0.7018622398376465,0.49045505523681643,0.022676477432250975
2600,77.78497529029846,0.16670361906163522,0.6999823188781739,0.4527468299865723,0.026481482982635498
2700,80.80829524993896,0.06442422937605215,0.6999823188781739,0.4527468299865723,0.02633014678955078
2800,83.53149223327637,0.08555833875152075,0.6993556785583496,0.4401774215698242,0.024352800846099854
2900,86.27722024917603,0.05160126072436711,0.6987290382385254,0.42760801315307617,0.02435913324356079
3000,88.63140726089478,0.011478421906935522,0.6990423583984375,0.4338927173614502,0.021378834247589112