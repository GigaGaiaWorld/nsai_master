#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- kannada_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Current1), number(Digit2,Current2), Sum is Current1+Current2, Sum>120.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.8266666666666667
i,time,loss,ground_time,compile_time,eval_time
100,7.576392889022827,0.5577459603175521,1.3537426376342774,0.0978165602684021,0.04562261343002319
200,12.620955228805542,0.5671276545524597,1.3475084900856018,0.09875869750976562,0.046221532821655274
300,17.410057067871094,0.6122425943613052,1.3116735219955444,0.09867606163024903,0.04411278247833252
400,22.46226716041565,0.678849164545536,1.2543375730514525,0.09854384422302247,0.046606390476226806
500,27.239134073257446,0.6207219570875168,1.304506528377533,0.09865953445434571,0.04366352319717407
600,32.54279804229736,0.6101658818125725,1.3116735219955444,0.09867606163024903,0.046571698188781735
700,37.40715289115906,0.5590717353671789,1.3618424773216247,0.09879175186157227,0.04476168155670166
800,42.26589107513428,0.5574728158116341,1.3475084900856018,0.09875869750976562,0.044643023014068604
900,47.263631105422974,0.5840947431325912,1.3116735219955444,0.09867606163024903,0.04621180295944214
1000,51.923059940338135,0.5083592800423503,1.2543375730514525,0.09854384422302247,0.04277588844299316
1100,56.703041076660156,0.3836887271166779,1.304506528377533,0.09865953445434571,0.04371216535568237
1200,61.49771022796631,0.3410111250878981,1.3116735219955444,0.09867606163024903,0.04347487449645996
1300,66.42163419723511,0.36176125522335495,1.3618424773216247,0.09879175186157227,0.0447081446647644
1400,71.43788313865662,0.2666386702102045,1.3475084900856018,0.09875869750976562,0.045819809436798094
1500,76.19087100028992,0.2761711280697,1.3116735219955444,0.09867606163024903,0.043273425102233885
1600,80.77478194236755,0.2508647281009894,1.2543375730514525,0.09854384422302247,0.0418739128112793
1700,85.54479789733887,0.2470098216667702,1.304506528377533,0.09865953445434571,0.043367161750793456
1800,91.19325017929077,0.21450608217892295,1.3116735219955444,0.09867606163024903,0.050365583896636965
1900,96.67096304893494,0.2371079638127611,1.3618424773216247,0.09879175186157227,0.050382165908813475
2000,101.3338029384613,0.14581793051920613,1.3475084900856018,0.09875869750976562,0.042223305702209474
2100,105.7191390991211,0.17706782445405686,1.3116735219955444,0.09867606163024903,0.04020073890686035
2200,110.11275506019592,0.16225993383412862,1.2543375730514525,0.09854384422302247,0.039665966033935546
2300,114.76594805717468,0.21516400833009214,1.304506528377533,0.09865953445434571,0.042141900062561036
2400,119.4888060092926,0.16357740023069084,1.3116735219955444,0.09867606163024903,0.04278860330581665
2500,124.41753697395325,0.15663404651707488,1.3618424773216247,0.09879175186157227,0.04438410043716431
2600,128.8288609981537,0.06523923404547688,1.3475084900856018,0.09875869750976562,0.03995431661605835
2700,133.05007410049438,0.10065206513780196,1.3116735219955444,0.09867606163024903,0.03850025415420532
2800,137.2981960773468,0.14461587403454018,1.2543375730514525,0.09854384422302247,0.0375697660446167
2900,141.56514310836792,0.16512192948463686,1.304506528377533,0.09865953445434571,0.039115581512451175
3000,146.3612780570984,0.1229290932547503,1.3116735219955444,0.09867606163024903,0.043976936340332035