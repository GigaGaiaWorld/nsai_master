#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- arabic_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Inlet), number(Digit2,Outlet), Inlet<Outlet.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.8866666666666667
i,time,loss,ground_time,compile_time,eval_time
100,7.5095109939575195,0.6008717005327344,0.511166021823883,0.15413321256637574,0.05526879072189331
200,12.946971893310547,0.5639470633817837,0.5124662017822266,0.1555817222595215,0.049324326515197754
300,18.568195819854736,0.45371035430696793,0.5050159120559692,0.15537268161773682,0.050886096954345705
400,23.99155306816101,0.4931747323673335,0.49508219242095947,0.15509396076202392,0.04941186666488648
500,29.328588008880615,0.39927169363741993,0.5124662017822266,0.1555817222595215,0.04868348360061645
600,34.73686408996582,0.4483021050214302,0.4901153326034546,0.15495460033416747,0.04878108263015747
700,40.02739191055298,0.3405978189083044,0.5174330615997315,0.15572108268737794,0.04854753971099854
800,45.23039197921753,0.355636506506562,0.5124662017822266,0.1555817222595215,0.04772017240524292
900,50.36640214920044,0.36031618845503544,0.5050159120559692,0.15537268161773682,0.04719306945800781
1000,55.56921100616455,0.4048951704364845,0.49508219242095947,0.15509396076202392,0.04754613399505615
1100,61.55991792678833,0.320530433085587,0.5124662017822266,0.1555817222595215,0.05339578628540039
1200,66.74730491638184,0.378319546317507,0.4901153326034546,0.15495460033416747,0.04720886468887329
1300,72.07741117477417,0.3030940803580097,0.5174330615997315,0.15572108268737794,0.048441121578216555
1400,77.64889907836914,0.3213949285218405,0.5124662017822266,0.1555817222595215,0.05089279413223267
1500,83.11163020133972,0.3299682711491914,0.5050159120559692,0.15537268161773682,0.05005719423294067
1600,88.18019676208496,0.35953134993215374,0.49508219242095947,0.15509396076202392,0.0464954686164856
1700,93.64926290512085,0.2653762158527752,0.5124662017822266,0.1555817222595215,0.05008713722229004
1800,98.68203496932983,0.3198274799064075,0.4901153326034546,0.15495460033416747,0.04618490695953369
1900,104.15591096878052,0.2839691976062022,0.5174330615997315,0.15572108268737794,0.049790947437286376
2000,109.22686386108398,0.26300908359815367,0.5124662017822266,0.1555817222595215,0.04659878969192505
2100,114.15894794464111,0.29909996852567927,0.5050159120559692,0.15537268161773682,0.04542455434799195
2200,119.06837105751038,0.31720201429653117,0.49508219242095947,0.15509396076202392,0.04551376104354858
2300,124.28906083106995,0.24420602647138367,0.5124662017822266,0.1555817222595215,0.04750470399856568
2400,129.33462190628052,0.2764376249838824,0.4901153326034546,0.15495460033416747,0.04611416339874268
2500,134.75842475891113,0.2161091508193931,0.5174330615997315,0.15572108268737794,0.048984758853912354
2600,139.93884587287903,0.21419975939274083,0.5124662017822266,0.1555817222595215,0.04776330232620239
2700,144.92074918746948,0.2678722741954516,0.5050159120559692,0.15537268161773682,0.04554171562194824
2800,149.56915307044983,0.24784397836084282,0.49508219242095947,0.15509396076202392,0.042712225914001464
2900,154.51843309402466,0.1925131146642525,0.5124662017822266,0.1555817222595215,0.04524842977523804
3000,159.14189386367798,0.23263267505610202,0.4901153326034546,0.15495460033416747,0.04269421100616455