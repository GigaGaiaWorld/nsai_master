#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- kannada_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Current1), number(Digit2,Current2), Sum is Current1+Current2, Sum>120.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.84
i,time,loss,ground_time,compile_time,eval_time
100,6.919290065765381,0.5638890308886766,0.8215177845954895,0.08665981769561767,0.046102969646453856
200,11.774410963058472,0.565435603260994,0.8300369381904602,0.08833694458007812,0.04422083616256714
300,17.14647126197815,0.6098526990413666,0.8304347276687623,0.0897801399230957,0.04863755464553833
400,21.82811999320984,0.6712923794984818,0.8310711908340455,0.09208925247192383,0.042983944416046145
500,26.692031383514404,0.6101161077618599,0.8305142855644226,0.09006877899169922,0.04431760549545288
600,31.863516092300415,0.5229435741901398,0.8304347276687623,0.0897801399230957,0.04677190065383911
700,36.77480220794678,0.44161807739175857,0.8298778223991394,0.08775966644287109,0.044616599082946774
800,42.365846157073975,0.36809760915581136,0.8300369381904602,0.08833694458007812,0.050832266807556155
900,47.3419771194458,0.41232467582223764,0.8304347276687623,0.0897801399230957,0.044986045360565184
1000,52.14651012420654,0.3987484984775074,0.8310711908340455,0.09208925247192383,0.043346076011657714
1100,57.04816913604736,0.3332375853066333,0.8305142855644226,0.09006877899169922,0.04434997797012329
1200,62.00016403198242,0.2852668745831761,0.8304347276687623,0.0897801399230957,0.04495161294937134
1300,67.20484519004822,0.2823803463272634,0.8298778223991394,0.08775966644287109,0.047590057849884036
1400,72.25616097450256,0.28366357788801905,0.8300369381904602,0.08833694458007812,0.04559645175933838
1500,77.12295913696289,0.2782891929087964,0.8304347276687623,0.0897801399230957,0.04402652025222778
1600,81.9458212852478,0.2969871583882923,0.8310711908340455,0.09208925247192383,0.04386220455169678
1700,86.77604413032532,0.25864660367582476,0.8305142855644226,0.09006877899169922,0.043800628185272215
1800,92.29784321784973,0.22387420398227278,0.8304347276687623,0.0897801399230957,0.05054728507995605
1900,97.10774397850037,0.22815841304169454,0.8298778223991394,0.08775966644287109,0.043660821914672854
2000,101.98752617835999,0.2306667075652763,0.8300369381904602,0.08833694458007812,0.04449518918991089
2100,106.58769917488098,0.19348650143767998,0.8304347276687623,0.0897801399230957,0.041974635124206544
2200,111.10341501235962,0.2426079050356225,0.8310711908340455,0.09208925247192383,0.041249566078186035
2300,116.09770011901855,0.2271003472161661,0.8305142855644226,0.09006877899169922,0.0457107162475586
2400,120.73343920707703,0.13939373455978965,0.8304347276687623,0.0897801399230957,0.0426187014579773
2500,125.2523729801178,0.1678710930849857,0.8298778223991394,0.08775966644287109,0.041242563724517824
2600,129.87335109710693,0.1589479456890831,0.8300369381904602,0.08833694458007812,0.042118427753448484
2700,134.39730405807495,0.16391922594906191,0.8304347276687623,0.0897801399230957,0.040886499881744386
2800,138.80302619934082,0.1682474338803752,0.8310711908340455,0.09208925247192383,0.0401360034942627
2900,143.4936351776123,0.1974624942540084,0.8305142855644226,0.09006877899169922,0.04296877384185791
3000,148.2496621608734,0.11067681329910811,0.8304347276687623,0.0897801399230957,0.04313729286193848