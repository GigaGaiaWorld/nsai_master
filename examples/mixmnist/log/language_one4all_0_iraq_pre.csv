#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- arabic_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Inlet), number(Digit2,Outlet), Inlet<Outlet.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.8933333333333333
i,time,loss,ground_time,compile_time,eval_time
100,5.638146638870239,0.29711700349916687,0.48313977003097536,0.140093834400177,0.040278828144073485
200,10.136181831359863,0.4331315231975549,0.4919611072540283,0.14191758155822753,0.04170447587966919
300,15.225104808807373,0.3290975036751297,0.49956187248229983,0.14270570755004883,0.04730525255203247
400,20.41735076904297,0.2608583571925473,0.5096962261199951,0.14375654220581055,0.04774733781814575
500,25.148772716522217,0.3354312305445728,0.4919611072540283,0.14191758155822753,0.0441809344291687
600,29.983381986618042,0.2583417046329123,0.5147634029388428,0.1442819595336914,0.04482817888259888
700,35.166316747665405,0.2643547386259169,0.48689393043518064,0.14139216423034667,0.048067874908447265
800,40.124536752700806,0.33152655690908434,0.4919611072540283,0.14191758155822753,0.04547222375869751
900,45.15936779975891,0.2647926604951499,0.49956187248229983,0.14270570755004883,0.04615455627441406
1000,50.17137670516968,0.20178993340824458,0.5096962261199951,0.14375654220581055,0.04598740100860596
1100,55.43400692939758,0.2585367433948431,0.4919611072540283,0.14191758155822753,0.04887831926345825
1200,60.36717677116394,0.2283014866274243,0.5147634029388428,0.1442819595336914,0.045582139492034913
1300,65.17638397216797,0.17022173076655173,0.48689393043518064,0.14139216423034667,0.0445817494392395
1400,69.74805283546448,0.2552950597603321,0.4919611072540283,0.14191758155822753,0.042654170989990234
1500,75.30601477622986,0.24886136320623337,0.49956187248229983,0.14270570755004883,0.0513709568977356
1600,79.82682180404663,0.16578529276849532,0.5096962261199951,0.14375654220581055,0.04200608253479004
1700,84.73274493217468,0.21022144835123086,0.4919611072540283,0.14191758155822753,0.04459196329116821
1800,89.29805994033813,0.2132957008644098,0.5147634029388428,0.1442819595336914,0.042011747360229494
1900,93.98481678962708,0.1448241043270697,0.48689393043518064,0.14139216423034667,0.043566722869873044
2000,98.64359974861145,0.23292680259353676,0.4919611072540283,0.14191758155822753,0.04313401699066162
2100,103.17769598960876,0.2750543293645387,0.49956187248229983,0.14270570755004883,0.0417795991897583
2200,107.35936570167542,0.1372745047373046,0.5096962261199951,0.14375654220581055,0.03939409255981445
2300,111.81408095359802,0.20475653429288293,0.4919611072540283,0.14191758155822753,0.0417776608467102
2400,116.30648589134216,0.20687310893587893,0.5147634029388428,0.1442819595336914,0.041786274909973144
2500,120.80775284767151,0.1454597011845044,0.48689393043518064,0.14139216423034667,0.04139452695846558
2600,125.49168586730957,0.17771979889184614,0.4919611072540283,0.14191758155822753,0.043166913986206056
2700,130.82485389709473,0.19408093469879986,0.49956187248229983,0.14270570755004883,0.048415112495422366
2800,135.00236678123474,0.12379140028988606,0.5096962261199951,0.14375654220581055,0.03874889373779297
2900,139.08346891403198,0.13241730000733695,0.4919611072540283,0.14191758155822753,0.03822999715805054
3000,143.07310366630554,0.16852505470342294,0.5147634029388428,0.1442819595336914,0.03744027137756348