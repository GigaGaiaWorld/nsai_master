#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- arabic_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Inlet), number(Digit2,Outlet), Inlet<Outlet.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.9
i,time,loss,ground_time,compile_time,eval_time
100,6.063185930252075,0.3131869542277772,0.4920329165458679,0.14377822637557983,0.04355926752090454
200,10.906423091888428,0.405274056279095,0.5014992475509643,0.14589159488677977,0.042286763191223146
300,16.104557037353516,0.37363660983878616,0.5101706862449646,0.14716650247573854,0.04692190647125244
400,21.18831205368042,0.30807732186712117,0.5217326045036316,0.14886637926101684,0.04618806600570679
500,26.678005933761597,0.34781092204393643,0.5014992475509643,0.14589159488677977,0.048653013706207275
600,31.616774082183838,0.30974590782300765,0.5275135636329651,0.149716317653656,0.045646851062774656
700,36.39825892448425,0.28388089082694024,0.49571828842163085,0.14504165649414064,0.04440242052078247
800,41.01300597190857,0.32521570440082087,0.5014992475509643,0.14589159488677977,0.042836892604827884
900,45.691540002822876,0.32976351651883307,0.5101706862449646,0.14716650247573854,0.04338849544525147
1000,50.33383011817932,0.26746056260233925,0.5217326045036316,0.14886637926101684,0.042966971397399904
1100,55.92261505126953,0.2793387501106554,0.5014992475509643,0.14589159488677977,0.051185276508331295
1200,60.688639879226685,0.26502156783661573,0.5275135636329651,0.149716317653656,0.04388999462127686
1300,65.30490016937256,0.22953026185992031,0.49571828842163085,0.14504165649414064,0.0425496768951416
1400,69.99052691459656,0.3076250283038644,0.5014992475509643,0.14589159488677977,0.043403420448303226
1500,74.71240186691284,0.300389528032556,0.5101706862449646,0.14716650247573854,0.04361746311187744
1600,79.07544898986816,0.24334773647330848,0.5217326045036316,0.14886637926101684,0.04059549331665039
1700,83.54108691215515,0.23777681509255216,0.5014992475509643,0.14589159488677977,0.04156540393829346
1800,88.4583580493927,0.2432396415625999,0.5275135636329651,0.149716317653656,0.04513373374938965
1900,93.11878705024719,0.1950653987872124,0.49571828842163085,0.14504165649414064,0.04297510862350464
2000,97.68113303184509,0.2500059194997493,0.5014992475509643,0.14589159488677977,0.04165666818618775
2100,103.55497002601624,0.2637033923990839,0.5101706862449646,0.14716650247573854,0.05253045082092285
2200,108.66494297981262,0.21877333299602297,0.5217326045036316,0.14886637926101684,0.04717604637145996
2300,113.33925199508667,0.19266472201368287,0.5014992475509643,0.14589159488677977,0.04294314622879028
2400,117.83786606788635,0.21414342660666535,0.5275135636329651,0.149716317653656,0.04104873895645142
2500,122.18517923355103,0.15949007103239182,0.49571828842163085,0.14504165649414064,0.0401694917678833
2600,127.68269300460815,0.20558353749115668,0.5014992475509643,0.14589159488677977,0.047660608291625974
2700,132.3455731868744,0.2399702264282064,0.5101706862449646,0.14716650247573854,0.04197187900543213
2800,136.55892515182495,0.185080763595092,0.5217326045036316,0.14886637926101684,0.03858093738555908
2900,140.7811472415924,0.12781119244688172,0.5014992475509643,0.14589159488677977,0.03886963367462158
3000,145.0041332244873,0.18685160781696142,0.5275135636329651,0.149716317653656,0.03916447162628174