#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- arabic_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Inlet), number(Digit2,Outlet), Inlet<Outlet.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.8933333333333333
i,time,loss,ground_time,compile_time,eval_time
100,5.8254969120025635,0.2896977318848623,0.373624951839447,0.21469368457794188,0.042860934734344484
200,10.663721084594727,0.37862265753617974,0.3772725772857666,0.21983223915100097,0.04479647397994995
300,16.02898406982422,0.34834668304625666,0.37702887535095214,0.2255599641799927,0.04909820079803467
400,20.85478186607361,0.2729441829802886,0.37670393943786623,0.23319693088531493,0.04459926843643189
500,25.79085397720337,0.32256996442472885,0.3772725772857666,0.21983223915100097,0.04566575050354004
600,30.702905893325806,0.28899211759904575,0.3765414714813232,0.23701541423797606,0.04540106773376465
700,36.38558101654053,0.34541469275010966,0.3774350452423096,0.21601375579833984,0.052143793106079105
800,41.37877106666565,0.30407906690371506,0.3772725772857666,0.21983223915100097,0.04575165033340454
900,46.07741904258728,0.30992994999251094,0.37702887535095214,0.2255599641799927,0.04362569808959961
1000,50.981146812438965,0.21864536367624177,0.37670393943786623,0.23319693088531493,0.0457287073135376
1100,55.72869300842285,0.25051528442245397,0.3772725772857666,0.21983223915100097,0.04428503274917603
1200,60.342792987823486,0.2437716807256902,0.3765414714813232,0.23701541423797606,0.04309487104415893
1300,64.93945980072021,0.17994872669885134,0.3774350452423096,0.21601375579833984,0.043132007122039795
1400,70.3015489578247,0.27101249187664506,0.3772725772857666,0.21983223915100097,0.04944104433059692
1500,74.88747382164001,0.2431325802928336,0.37702887535095214,0.2255599641799927,0.042789504528045655
1600,79.65004396438599,0.17694052788231968,0.37670393943786623,0.23319693088531493,0.04424025535583496
1700,84.66385579109192,0.1781959514961818,0.3772725772857666,0.21983223915100097,0.0464674186706543
1800,90.44251489639282,0.220182036302906,0.3765414714813232,0.23701541423797606,0.05303920745849609
1900,95.03617691993713,0.12237802787903912,0.3774350452423096,0.21601375579833984,0.04283512353897095
2000,99.24624109268188,0.2387923643831876,0.3772725772857666,0.21983223915100097,0.03924601316452026
2100,103.89481091499329,0.22371033213396005,0.37702887535095214,0.2255599641799927,0.043383653163909915
2200,108.62241196632385,0.12753144161237562,0.37670393943786623,0.23319693088531493,0.044337949752807616
2300,113.31969690322876,0.13165858580147868,0.3772725772857666,0.21983223915100097,0.043593015670776364
2400,117.5525209903717,0.1843348948611483,0.3765414714813232,0.23701541423797606,0.03972688436508179
2500,121.95690989494324,0.11100970027668235,0.3774350452423096,0.21601375579833984,0.04144814968109131
2600,125.91393303871155,0.14010623000487887,0.3772725772857666,0.21983223915100097,0.03732110261917114
2700,130.29238295555115,0.20874773874791117,0.37702887535095214,0.2255599641799927,0.04072303295135498
2800,134.90311098098755,0.142454852574263,0.37670393943786623,0.23319693088531493,0.04284841775894165
2900,139.74595093727112,0.11965986018352857,0.3772725772857666,0.21983223915100097,0.04478532075881958
3000,144.30322313308716,0.15812937763215154,0.3765414714813232,0.23701541423797606,0.04234560489654541