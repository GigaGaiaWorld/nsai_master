#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- arabic_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Temp), number(Digit2,Flow), (Temp>=60; Flow=<20).\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.9266666666666666
i,time,loss,ground_time,compile_time,eval_time
100,4.621135711669922,0.602930207028985,0.729570701122284,0.09705424308776855,0.027148642539978028
200,7.502730846405029,0.5719423695129808,0.7291227769851685,0.10025118350982666,0.0264219069480896
300,10.742255926132202,0.4996870790317189,0.7291227769851685,0.10025118350982666,0.029039623737335204
400,13.85445785522461,0.495125974190014,0.7263288593292236,0.10104339599609374,0.028225722312927245
500,16.671916007995605,0.49840923488399314,0.7235349416732788,0.10183560848236084,0.025745973587036133
600,19.635685920715332,0.49516704251756893,0.7249319005012512,0.10143950223922729,0.02702369451522827
700,22.56502604484558,0.36446029023936377,0.737504529953003,0.09787454605102539,0.026493163108825685
800,25.36886501312256,0.38444460318483836,0.7291227769851685,0.10025118350982666,0.025588693618774413
900,28.492202043533325,0.2945044912947196,0.7291227769851685,0.10025118350982666,0.028256967067718505
1000,31.206230878829956,0.27056322360965734,0.7263288593292236,0.10104339599609374,0.0248150372505188
1100,33.855629682540894,0.22221167924448934,0.7235349416732788,0.10183560848236084,0.024171924591064452
1200,36.46500587463379,0.22805636034347124,0.7249319005012512,0.10143950223922729,0.023755199909210205
1300,39.13628005981445,0.1983833512600995,0.737504529953003,0.09787454605102539,0.024231927394866945
1400,41.76342988014221,0.233654225087636,0.7291227769851685,0.10025118350982666,0.02384188175201416
1500,44.534400939941406,0.18363711301459718,0.7291227769851685,0.10025118350982666,0.025270469188690185
1600,47.284645795822144,0.31151860142096216,0.7263288593292236,0.10104339599609374,0.025015442371368407
1700,49.987167835235596,0.14433344183266938,0.7235349416732788,0.10183560848236084,0.024720172882080078
1800,52.60254168510437,0.13606827168784605,0.7249319005012512,0.10143950223922729,0.023944633007049562
1900,55.25497484207153,0.175009093727027,0.737504529953003,0.09787454605102539,0.02430314779281616
2000,57.76742386817932,0.17111661185466204,0.7291227769851685,0.10025118350982666,0.022970006465911866
2100,60.33322596549988,0.1426433820014455,0.7291227769851685,0.10025118350982666,0.023506171703338623
2200,63.144495725631714,0.19362510799195662,0.7263288593292236,0.10104339599609374,0.025721063613891603
2300,65.89901900291443,0.10604136402128461,0.7235349416732788,0.10183560848236084,0.02522803544998169
2400,68.87110090255737,0.05951247385102775,0.7249319005012512,0.10143950223922729,0.025637049674987793
2500,71.41394400596619,0.1183783043497715,0.737504529953003,0.09787454605102539,0.023232166767120362
2600,73.90970802307129,0.12139314834720089,0.7291227769851685,0.10025118350982666,0.022783148288726806
2700,76.52501392364502,0.13033086179500863,0.7291227769851685,0.10025118350982666,0.023743088245391845
2800,79.42572593688965,0.09791688783220592,0.7263288593292236,0.10104339599609374,0.026456010341644288
2900,82.32625675201416,0.06810395759320613,0.7235349416732788,0.10183560848236084,0.025704154968261717
3000,85.02915501594543,0.026235501714567136,0.7249319005012512,0.10143950223922729,0.023912460803985597