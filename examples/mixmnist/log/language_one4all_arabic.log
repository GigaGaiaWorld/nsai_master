#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- arabic_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Temp), number(Digit2,Flow), (Temp>=60; Flow=<20).\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.9
i,time,loss,ground_time,compile_time,eval_time
100,4.823684930801392,0.6606994837522506,0.6729643034934998,0.10608247756958007,0.028988299369812013
200,7.826230049133301,0.6064377985056489,0.6799559259414673,0.10872887134552002,0.02706617593765259
300,10.802479982376099,0.502068485787604,0.6799559259414673,0.10872887134552002,0.026888320446014403
400,13.897655963897705,0.4976195593356533,0.6800252628326416,0.1092917251586914,0.02769759178161621
500,16.882603883743286,0.5212970736653734,0.6800945997238159,0.10985457897186279,0.026871702671051025
600,20.105666875839233,0.44961232712696075,0.6800599312782287,0.1095731520652771,0.028758745193481445
700,23.004723072052002,0.4248530388329527,0.6797479152679443,0.10704030990600585,0.026125984191894533
800,25.903367042541504,0.43500479556159916,0.6799559259414673,0.10872887134552002,0.026099205017089844
900,28.829773902893066,0.3475184761567607,0.6799559259414673,0.10872887134552002,0.026056711673736573
1000,31.54035210609436,0.24035650264676178,0.6800252628326416,0.1092917251586914,0.024424557685852052
1100,34.25457286834717,0.3526747440351619,0.6800945997238159,0.10985457897186279,0.024607064723968505
1200,36.91232395172119,0.22638857529812184,0.6800599312782287,0.1095731520652771,0.02404259443283081
1300,39.60912013053894,0.26854144778760314,0.6797479152679443,0.10704030990600585,0.024290146827697753
1400,42.39121699333191,0.34721495671889907,0.6799559259414673,0.10872887134552002,0.025177791118621826
1500,45.34301805496216,0.2192376693123797,0.6799559259414673,0.10872887134552002,0.026356396675109865
1600,48.203238010406494,0.17047644470913753,0.6800252628326416,0.1092917251586914,0.026043784618377686
1700,50.83772802352905,0.24075387677786636,0.6800945997238159,0.10985457897186279,0.02394829273223877
1800,53.370121002197266,0.10823625646647259,0.6800599312782287,0.1095731520652771,0.022937846183776856
1900,55.89110779762268,0.1936532374420198,0.6797479152679443,0.10704030990600585,0.022842297554016112
2000,58.5937979221344,0.26495735548806926,0.6799559259414673,0.10872887134552002,0.024433813095092773
2100,61.22117781639099,0.16532148029361224,0.6799559259414673,0.10872887134552002,0.023828370571136473
2200,63.78763699531555,0.12125183757778984,0.6800252628326416,0.1092917251586914,0.023281619548797608
2300,66.40051484107971,0.22070009716723915,0.6800945997238159,0.10985457897186279,0.02372234106063843
2400,68.97447776794434,0.057984228024806725,0.6800599312782287,0.1095731520652771,0.02305657148361206
2500,71.41957306861877,0.14731365465455723,0.6797479152679443,0.10704030990600585,0.022103652954101563
2600,74.09624981880188,0.19362577292427063,0.6799559259414673,0.10872887134552002,0.024146249294281007
2700,76.6231050491333,0.10540302206953492,0.6799559259414673,0.10872887134552002,0.022915258407592773
2800,79.16164994239807,0.11972540022087486,0.6800252628326416,0.1092917251586914,0.022975811958312987
2900,81.89359903335571,0.14343212695645605,0.6800945997238159,0.10985457897186279,0.02493620157241821
3000,84.31717491149902,0.023699258674552227,0.6800599312782287,0.1095731520652771,0.021915464401245116