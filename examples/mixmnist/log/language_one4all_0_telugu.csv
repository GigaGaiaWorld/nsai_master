#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- arabic_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Inlet), number(Digit2,Outlet), Inlet<Outlet.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.9
i,time,loss,ground_time,compile_time,eval_time
100,6.616326808929443,0.5979277641139924,0.39107494831085204,0.21044461965560912,0.048443610668182376
200,12.03820276260376,0.46942077607032845,0.395557804107666,0.2154650115966797,0.048940837383270264
300,17.428732872009277,0.41176193824998336,0.3965849685668945,0.221047625541687,0.048549644947052
400,23.077914714813232,0.45609156964441355,0.3979545211791992,0.2284911108016968,0.05032278299331665
500,28.603752851486206,0.3380329941612581,0.395557804107666,0.2154650115966797,0.05018187522888184
600,34.50680184364319,0.3902332479828328,0.39863929748535154,0.23221285343170167,0.052278881072998044
700,40.00531196594238,0.3312355843608748,0.3948730278015137,0.2117432689666748,0.0497985053062439
800,45.51972699165344,0.3224732852937086,0.395557804107666,0.2154650115966797,0.05045781850814819
900,51.055087089538574,0.36597346784130425,0.3965849685668945,0.221047625541687,0.050138866901397704
1000,56.00164484977722,0.33226391235491065,0.3979545211791992,0.2284911108016968,0.045502877235412596
1100,60.85659170150757,0.2623762830286068,0.395557804107666,0.2154650115966797,0.044922409057617185
1200,65.98434400558472,0.36580442234926525,0.39863929748535154,0.23221285343170167,0.04708842515945435
1300,71.04299092292786,0.2982981624405875,0.3948730278015137,0.2117432689666748,0.04632607460021973
1400,76.16032981872559,0.28415450826401867,0.395557804107666,0.2154650115966797,0.047128894329071046
1500,80.94564485549927,0.33399601940618595,0.3965849685668945,0.221047625541687,0.04394164562225342
1600,85.88772702217102,0.29763605644981,0.3979545211791992,0.2284911108016968,0.045322628021240235
1700,90.86318278312683,0.21736292900564877,0.395557804107666,0.2154650115966797,0.0456790018081665
1800,96.35522508621216,0.27528975533343497,0.39863929748535154,0.23221285343170167,0.04994021415710449
1900,101.31791090965271,0.23408692119193347,0.3948730278015137,0.2117432689666748,0.045022497177124025
2000,106.00935983657837,0.2836354889617178,0.395557804107666,0.2154650115966797,0.043453018665313724
2100,110.6305079460144,0.29713286218619034,0.3965849685668945,0.221047625541687,0.04284972667694092
2200,115.39493489265442,0.2328393907836653,0.3979545211791992,0.2284911108016968,0.04425968885421753
2300,120.94466400146484,0.16650204611181835,0.395557804107666,0.2154650115966797,0.050232467651367185
2400,125.6128478050232,0.20882001402470907,0.39863929748535154,0.23221285343170167,0.04288944721221924
2500,130.3317039012909,0.169535658328125,0.3948730278015137,0.2117432689666748,0.04393658638000488
2600,134.91941595077515,0.19611845555195948,0.395557804107666,0.2154650115966797,0.042488653659820554
2700,139.34463572502136,0.2536567541804334,0.3965849685668945,0.221047625541687,0.040771651268005374
2800,143.7892599105835,0.19894424269648994,0.3979545211791992,0.2284911108016968,0.04106588840484619
2900,148.32641577720642,0.12254633656082206,0.395557804107666,0.2154650115966797,0.04239617347717285
3000,152.827645778656,0.18249457906642705,0.39863929748535154,0.23221285343170167,0.04182376384735107