#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- kannada_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Current1), number(Digit2,Current2), Sum is Current1+Current2, Sum>120.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.8133333333333334
i,time,loss,ground_time,compile_time,eval_time
100,6.946216106414795,0.5555237443372607,0.8332862234115601,0.08989952087402343,0.045919926166534425
200,12.235080003738403,0.5637123674154282,0.8417593240737915,0.09202468395233154,0.048564701080322265
300,17.214936017990112,0.6111936062574387,0.8418602466583252,0.09421544075012207,0.04564387798309326
400,22.24105405807495,0.6699542084336281,0.8420217227935791,0.09772065162658691,0.046234211921691894
500,27.344577074050903,0.570894012004137,0.8418804311752319,0.09465359210968018,0.04665461301803589
600,32.45962405204773,0.4374238424899522,0.8418602466583252,0.09421544075012207,0.046343607902526854
700,37.80614900588989,0.38227887005312366,0.8417189550399781,0.09114838123321534,0.04877819061279297
800,42.868656873703,0.32625891685980607,0.8417593240737915,0.09202468395233154,0.04552473306655884
900,45.83329200744629,0.3277209227095318,0.8418602466583252,0.09421544075012207,0.023761348724365236
1000,51.267739057540894,0.3286032504806644,0.8420217227935791,0.09772065162658691,0.04477874994277954
1100,56.27647805213928,0.286792828729549,0.8418804311752319,0.09465359210968018,0.044330196380615236
1200,61.582139015197754,0.20352824049108675,0.8418602466583252,0.09421544075012207,0.04841737985610962
1300,66.38555407524109,0.2773320256973284,0.8417189550399781,0.09114838123321534,0.043902060985565185
1400,71.33923006057739,0.2363981916022749,0.8417593240737915,0.09202468395233154,0.04487147569656372
1500,76.26097798347473,0.1888561853120018,0.8418602466583252,0.09421544075012207,0.04475962638854981
1600,81.07999897003174,0.22436603745085448,0.8420217227935791,0.09772065162658691,0.04361508131027222
1700,86.19170594215393,0.26382407563341076,0.8418804311752319,0.09465359210968018,0.04552610874176025
1800,91.05609393119812,0.15268051421868223,0.8418602466583252,0.09421544075012207,0.04434591293334961
1900,95.8894898891449,0.18449804120543375,0.8417189550399781,0.09114838123321534,0.04410597562789917
2000,100.55554580688477,0.11930219634763177,0.8417593240737915,0.09202468395233154,0.042512331008911136
2100,105.06832313537598,0.09814840242324756,0.8418602466583252,0.09421544075012207,0.04074562072753906
2200,109.54064583778381,0.1167971492745653,0.8420217227935791,0.09772065162658691,0.040770859718322755
2300,114.43524098396301,0.2232632438220966,0.8418804311752319,0.09465359210968018,0.04505903959274292
2400,119.36738896369934,0.11549015720369539,0.8418602466583252,0.09421544075012207,0.04519007444381714
2500,123.91386294364929,0.15970522116344285,0.8417189550399781,0.09114838123321534,0.04165414333343506
2600,128.36123704910278,0.07614460883050711,0.8417593240737915,0.09202468395233154,0.04069100379943848
2700,132.52463603019714,0.05380519730655102,0.8418602466583252,0.09421544075012207,0.038094553947448734
2800,136.99920105934143,0.08363802099888304,0.8420217227935791,0.09772065162658691,0.04111567974090576
2900,141.39862418174744,0.20288836267867802,0.8418804311752319,0.09465359210968018,0.040215175151824954
3000,145.5553171634674,0.0652478247978695,0.8418602466583252,0.09421544075012207,0.038369166851043704