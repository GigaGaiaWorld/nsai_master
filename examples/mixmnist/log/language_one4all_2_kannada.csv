#{"solver": {"engine": {"type": "ExactEngine"}, "semiring": "GraphSemiring"}, "networks": [{"name": "arabic_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "telugu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "kannada_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}, {"name": "urdu_net", "module": "MNIST_Net(\n  (softmax): Softmax(dim=1)\n  (encoder): Sequential(\n    (0): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))\n    (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (2): ReLU(inplace=True)\n    (3): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): ReLU(inplace=True)\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=256, out_features=120, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=120, out_features=84, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=84, out_features=10, bias=True)\n  )\n)", "optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.0005\n    maximize: False\n    weight_decay: 0\n)", "k": null}], "program": "nn(arabic_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::arabic_digit(X,Y).\nnn(telugu_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::telugu_digit(X,Y).\nnn(kannada_net,[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])::kannada_digit(X,Y).\nnumber([],Result,Result).\nnumber([H | T],Acc,Result) :- kannada_digit(H,Nr), Acc2 is Nr+10*Acc, number(T,Acc2,Result).\nnumber(X,Y) :- number(X,0,Y).\nanomaly_detection(Digit1,Digit2,1) :- number(Digit1,Current1), number(Digit2,Current2), Sum is Current1+Current2, Sum>120.\nanomaly_detection(Digit1,Digit2,0) :- \\+anomaly_detection(Digit1,Digit2,1).\n"}
#Accuracy 0.8133333333333334
i,time,loss,ground_time,compile_time,eval_time
100,6.5836522579193115,0.5539855986833573,0.8107036852836609,0.08523647785186768,0.04402777910232544
200,11.438813209533691,0.5659204912185669,0.8184630870819092,0.08682739734649658,0.044684693813323975
300,17.022595167160034,0.6117181673645973,0.8176899433135987,0.08814129829406739,0.05037380456924438
400,22.072509288787842,0.6738835382461548,0.8164529132843018,0.09024353981018067,0.04633198976516724
500,26.77370524406433,0.5873203986138106,0.8175353145599366,0.08840407848358155,0.04323044776916504
600,31.529040336608887,0.4551193787821103,0.8176899433135987,0.08814129829406739,0.043526394367218016
700,36.40356922149658,0.40818077893927696,0.8187723445892334,0.08630183696746827,0.044579741954803465
800,41.195075273513794,0.3227494670171291,0.8184630870819092,0.08682739734649658,0.043787975311279294
900,46.30345034599304,0.3597236537711433,0.8176899433135987,0.08814129829406739,0.04662813663482666
1000,50.97888731956482,0.3215145304071484,0.8164529132843018,0.09024353981018067,0.04254961490631103
1100,55.73465323448181,0.28907135949557416,0.8175353145599366,0.08840407848358155,0.0432963490486145
1200,60.53367614746094,0.25393448391336276,0.8176899433135987,0.08814129829406739,0.04374215841293335
1300,65.36063838005066,0.289273911558887,0.8187723445892334,0.08630183696746827,0.04401489973068237
1400,70.34281611442566,0.22365806740723201,0.8184630870819092,0.08682739734649658,0.04569052696228027
1500,75.02956438064575,0.2666044289968892,0.8176899433135987,0.08814129829406739,0.04287331104278565
1600,80.00086832046509,0.2384261883824365,0.8164529132843018,0.09024353981018067,0.04535838842391968
1700,84.7585391998291,0.2423357325737743,0.8175353145599366,0.08840407848358155,0.043195598125457764
1800,89.52119517326355,0.2009490960177061,0.8176899433135987,0.08814129829406739,0.04333577632904053
1900,94.53057408332825,0.2203194827101652,0.8187723445892334,0.08630183696746827,0.045745108127594
2000,99.3200352191925,0.1747004081876446,0.8184630870819092,0.08682739734649658,0.04371204853057861
2100,103.80862331390381,0.21600431497208092,0.8176899433135987,0.08814129829406739,0.04089794397354126
2200,108.40743398666382,0.1566197213070609,0.8164529132843018,0.09024353981018067,0.041978418827056885
2300,113.07053637504578,0.20221300641296922,0.8175353145599366,0.08840407848358155,0.04263696432113648
2400,117.72036218643188,0.13150336914857746,0.8176899433135987,0.08814129829406739,0.04269230842590332
2500,122.36406517028809,0.1461694799830866,0.8187723445892334,0.08630183696746827,0.042659482955932616
2600,127.02068829536438,0.10151382698797881,0.8184630870819092,0.08682739734649658,0.04231804370880127
2700,131.57226705551147,0.1632072419005054,0.8176899433135987,0.08814129829406739,0.04154043674468994
2800,136.12098121643066,0.10635173460483266,0.8164529132843018,0.09024353981018067,0.0413006854057312
2900,140.96812438964844,0.17022114976868238,0.8175353145599366,0.08840407848358155,0.04429443120956421
3000,145.38144731521606,0.09054948087035881,0.8176899433135987,0.08814129829406739,0.040235137939453124