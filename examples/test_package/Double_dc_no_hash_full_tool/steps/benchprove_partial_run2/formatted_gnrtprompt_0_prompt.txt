System: You are an expert programmer proficient in Problog and DeepProbLog. You could use the available tools to complete the task.
Human: Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>

% member/2 for ProbLog
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).
% --------- Basic meta-interpreter ---------
% Prove "true" always succeeds
prove(true).
prove(Goal) :-
	% For all other goals, use the clause/2 facts/rules defined in the program
	clause(Goal, Body),
	prove(Body).
% Prove compound goal A,B: prove A first, then prove B
prove((A,B)) :-
	prove(A),
	prove(B).
% --------- Extended logic processing ---------
prove(implies(P,Q)) :-
	
<Langda> Information:
<HASH> Hash tag of code: 230CB29D </HASH>
<Requirements>P is unprovable or Q is provable </Requirements></Langda>
.
prove(opposite(P)) :-
	
<Langda> Information:
<HASH> Hash tag of code: B2BAF677 </HASH>
<Requirements>P is unprovable </Requirements></Langda>
.
prove(expand(A,B)) :-
	expand(A,B).
prove(includes(Set,X)) :-
	member(X,Set).
prove(extend(List,Elem,Extended)) :-
	
<Langda> Information:
<HASH> Hash tag of code: 62B0CEA4 </HASH>
<Requirements>add Elem to the head of List to get Extended </Requirements></Langda>
.
prove(refute(P)) :-
	\+ prove(P).
% --------- Examples ---------- %
% Define some expand rules:
<Langda> Information:
<HASH> Hash tag of code: 0F69CE0F </HASH>
<Requirements>define expand/2: Y is X*2 </Requirements></Langda>
.
parent(alice, bob).
parent(bob, carol).
ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).
% --------- Queries ---------- %
query(prove(implies(parent(alice,bob), ancestor(alice,bob)))).
query(prove(opposite(parent(carol,alice)))).
query(prove(expand(double(3),6))).
query(prove(includes([a,b,c],b))).
query(prove(extend([1,2],3,[3,1,2]))).

</Code>

<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 

**split**


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

% member/2 for ProbLog
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).
% --------- Basic meta-interpreter ---------
% Prove "true" always succeeds
prove(true).
prove(Goal) :-
	% For all other goals, use the clause/2 facts/rules defined in the program
	clause(Goal, Body),
	prove(Body).
% Prove compound goal A,B: prove A first, then prove B
prove((A,B)) :-
	prove(A),
	prove(B).
% --------- Extended logic processing ---------
prove(implies(P,Q)) :-
	
<Langda> Information:
<HASH> Hash tag of code: 230CB29D </HASH>
<Requirements>P is unprovable or Q is provable </Requirements></Langda>
.
prove(opposite(P)) :-
	
<Langda> Information:
<HASH> Hash tag of code: B2BAF677 </HASH>
<Requirements>P is unprovable </Requirements></Langda>
.
prove(expand(A,B)) :-
	expand(A,B).
prove(includes(Set,X)) :-
	member(X,Set).
prove(extend(List,Elem,Extended)) :-
	
<Langda> Information:
<HASH> Hash tag of code: 62B0CEA4 </HASH>
<Requirements>add Elem to the head of List to get Extended </Requirements></Langda>
.
prove(refute(P)) :-
	\+ prove(P).
% --------- Examples ---------- %
% Define some expand rules:
<Langda> Information:
<HASH> Hash tag of code: 0F69CE0F </HASH>
<Requirements>define expand/2: Y is X*2 </Requirements></Langda>
.
parent(alice, bob).
parent(bob, carol).
ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).
% --------- Queries ---------- %
query(prove(implies(parent(alice,bob), ancestor(alice,bob)))).
query(prove(opposite(parent(carol,alice)))).
query(prove(expand(double(3),6))).
query(prove(includes([a,b,c],b))).
query(prove(extend([1,2],3,[3,1,2]))).

</origin_code>
<generated_code>

% member/2 for ProbLog
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).
% --------- Basic meta-interpreter ---------
% Prove "true" always succeeds
prove(true).
prove(Goal) :-
    % For all other goals, use the clause/2 facts/rules defined in the program
    clause(Goal, Body),
    prove(Body).
% Prove compound goal A,B: prove A first, then prove B
prove((A,B)) :-
    prove(A),
    prove(B).
% --------- Extended logic processing ---------
prove(implies(P,Q)) :-
    \+ prove(P); prove(Q).
prove(opposite(P)) :-
    \+ prove(P).
prove(expand(A,B)) :-
    expand(A,B).
prove(includes(Set,X)) :-
    member(X,Set).
prove(extend(List,Elem,Extended)) :-
    Extended = [Elem|List].
prove(refute(P)) :-
    \+ prove(P).
% --------- Examples ---------- %
% Define some expand rules:
expand(double(X), Y) :- Y is X * 2.
parent(alice, bob).
parent(bob, carol).
ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).
% --------- Queries ---------- %
query(prove(implies(parent(alice,bob), ancestor(alice,bob)))).
query(prove(opposite(parent(carol,alice)))).
query(prove(expand(double(3),6))).
query(prove(includes([a,b,c],b))).
query(prove(extend([1,2],3,[3,1,2]))).

<generated_code>
<Final_Answer>
For each code block, extract it and format it in the following JSON format, please remove all code comments:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```

If there's no corresponding code exist:
```problog
{"HASH": "XXXX7890","Code": ""}
```
</Final_Answer>