System: You are an expert programmer proficient in Problog and DeepProbLog. You could use the available tools to complete the task.
Human: Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>

% -------------------------
% Basic rules of rock-paper-scissors
% -------------------------
% Three gestures
move(rock).
move(paper).
move(scissor).
% Win-lose relationship: X beats Y
beats(rock, scissor).
beats(scissor, paper).
beats(paper, rock).
% -------------------------
% Calculate the result of the game
% -------------------------
% Same gestures are considered a draw
result(X, X, draw) :-
 move(X).
 
% If X beats Y, then X wins
result(X, Y, win) :-
beats(X, Y).
% If Y beats X, then X loses
result(X, Y, lose) :-
beats(Y, X).
 
% End of recursion: empty list corresponds to empty result
play([], [], []).
% Recursive advancement: take out each round of gestures, calculate the results, and continue
play([P1|P1T], [P2|P2T], [R|Rs]) :-
% The correct call is result(P1,P2,R), not semicolon
result(P1, P2, R),
% (Optional) Update the score according to R
play(P1T, P2T, Rs).
 
compute_score([], 0).
compute_score([win | Rs], S) :- compute_score(Rs, S1), S is S1 + 1.
<Langda> Information:
<HASH> Hash tag of code: FB0E8901 </HASH>
<Requirements>If the result of the current round is lose:
Recursively calculate the remaining result score S1
The current total score S is S1 - 1, which means adding one point to player2 </Requirements></Langda>
.
<Langda> Information:
<HASH> Hash tag of code: 133D6BEE </HASH>
<Requirements>If the current round is draw:
A draw does not affect the score, and the previous round score S1 is directly passed. </Requirements></Langda>
.
compute_score([draw | Rs], S) :- compute_score(Rs, S1), S is S1.
determine_winner(P1Moves,P2Moves,Winner) :- 
 
<Langda> Information:
<HASH> Hash tag of code: 4E6CE90A </HASH>
<Requirements>Main predicate: Given two player action lists P1Moves and P2Moves, calculate the winner Winner.
 Firstly, call the play/3 rule to compare the two players' actions.
 Then, generate a Results list containing whether each round is win, lose, or draw </Requirements></Langda>
.
query(determine_winner([rock,rock,rock],[paper,paper,scissor],W)).

</Code>

<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 

**split**


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

% -------------------------
% Basic rules of rock-paper-scissors
% -------------------------
% Three gestures
move(rock).
move(paper).
move(scissor).
% Win-lose relationship: X beats Y
beats(rock, scissor).
beats(scissor, paper).
beats(paper, rock).
% -------------------------
% Calculate the result of the game
% -------------------------
% Same gestures are considered a draw
result(X, X, draw) :-
 move(X).
 
% If X beats Y, then X wins
result(X, Y, win) :-
beats(X, Y).
% If Y beats X, then X loses
result(X, Y, lose) :-
beats(Y, X).
 
% End of recursion: empty list corresponds to empty result
play([], [], []).
% Recursive advancement: take out each round of gestures, calculate the results, and continue
play([P1|P1T], [P2|P2T], [R|Rs]) :-
% The correct call is result(P1,P2,R), not semicolon
result(P1, P2, R),
% (Optional) Update the score according to R
play(P1T, P2T, Rs).
 
compute_score([], 0).
compute_score([win | Rs], S) :- compute_score(Rs, S1), S is S1 + 1.
<Langda> Information:
<HASH> Hash tag of code: FB0E8901 </HASH>
<Requirements>If the result of the current round is lose:
Recursively calculate the remaining result score S1
The current total score S is S1 - 1, which means adding one point to player2 </Requirements></Langda>
.
<Langda> Information:
<HASH> Hash tag of code: 133D6BEE </HASH>
<Requirements>If the current round is draw:
A draw does not affect the score, and the previous round score S1 is directly passed. </Requirements></Langda>
.
compute_score([draw | Rs], S) :- compute_score(Rs, S1), S is S1.
determine_winner(P1Moves,P2Moves,Winner) :- 
 
<Langda> Information:
<HASH> Hash tag of code: 4E6CE90A </HASH>
<Requirements>Main predicate: Given two player action lists P1Moves and P2Moves, calculate the winner Winner.
 Firstly, call the play/3 rule to compare the two players' actions.
 Then, generate a Results list containing whether each round is win, lose, or draw </Requirements></Langda>
.
query(determine_winner([rock,rock,rock],[paper,paper,scissor],W)).

</origin_code>
<generated_code>

% -------------------------
% Basic rules of rock-paper-scissors
% -------------------------
% Three gestures
move(rock).
move(paper).
move(scissor).
% Win-lose relationship: X beats Y
beats(rock, scissor).
beats(scissor, paper).
beats(paper, rock).

% -------------------------
% Calculate the result of the game
% -------------------------
% Same gestures are considered a draw
result(X, X, draw) :-
    move(X).
    
% If X beats Y, then X wins
result(X, Y, win) :-
    beats(X, Y).
% If Y beats X, then X loses
result(X, Y, lose) :-
    beats(Y, X).
    
% End of recursion: empty list corresponds to empty result
play([], [], []).
% Recursive advancement: take out each round of gestures, calculate the results, and continue
play([P1|P1T], [P2|P2T], [R|Rs]) :-
    result(P1, P2, R),
    play(P1T, P2T, Rs).

% Score calculation rules
compute_score([], 0).
compute_score([win | Rs], S) :- 
    compute_score(Rs, S1), 
    S is S1 + 1.
compute_score([lose | Rs], S) :- 
    compute_score(Rs, S1), 
    S is S1 - 1.
compute_score([draw | Rs], S) :- 
    compute_score(Rs, S1), 
    S is S1.

% Main predicate to determine winner
determine_winner(P1Moves, P2Moves, Winner) :-
    play(P1Moves, P2Moves, Results),
    compute_score(Results, Score),
    (Score > 0 -> Winner = player1;
     Score < 0 -> Winner = player2;
     Winner = draw).

% Example query
query(determine_winner([rock,rock,rock],[paper,paper,scissor],W)).

<generated_code>
<Final_Answer>
For each code block, extract it and format it in the following JSON format, please remove all code comments:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```

If there's no corresponding code exist:
```problog
{"HASH": "XXXX7890","Code": ""}
```
</Final_Answer>