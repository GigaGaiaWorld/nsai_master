System: You are a coding assistant. You should complete the task.
Human: You are an expert code evaluator specialized in ProbLog and DeepProbLog. Your task is to analyze the provided code and its test results, strictly following the instructions below.

<Code>
<Langda>
<Code_Block>bubblesort([], Acc, Acc).
bubblesort(List, Acc, Sorted) :-
    bubble_pass(List, NewList, Changed),
    (Changed == 1 ->
        bubblesort(NewList, Acc, Sorted)
    ;
        append(Acc, NewList, Sorted)
    ).
bubble_pass([X,Y|T], [Y|Rest], 1) :- 
    X > Y,
    bubble_pass([X|T], Rest, _).
bubble_pass([X,Y|T], [X|Rest], Changed) :- 
    X =< Y,
    bubble_pass([Y|T], Rest, Changed).
bubble_pass([X], [X], 0).
bubble_pass([], [], 0).
forth_sort(L, L2) :- bubblesort(L, [], L2).
query(forth_sort([3,1,2,5,7,12],X)).</Code_Block>
<HASH> Hash tag of code: 47D659C8 </HASH>
<Requirements>This Prolog program should implement an interpretable bubblesort/3 algorithm. </Requirements></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
query(forth_sort([3,1,2,5,7,12],X)).
<Result>
 Here are the testing result of code:
 Error evaluating Problog model:
    return exec_func(node_id=node_id, node=node, **kwdargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/zhenzhili/miniforge3/envs/langda/lib/python3.11/site-packages/problog/engine_stack.py", line 839, in eval_call
    raise UnknownClause(origin, location=loc)
problog.engine.UnknownClause: No clauses found for ''->'/2' at 4:19.
</Result>
</Code>

<Evaluation_Instructions>
 
1. **Test Results Verification**
- List all queries and their return values ​​(including probability results).
- If all tests pass, please clearly output "All tests passed (no failures)" and briefly explain why there are no failures.
- If there are failures, point out the failed queries one by one and give the corresponding actual vs. expected results.

2. **Failure Localization**
- For each failed test, point out the specific predicate or rule with the error and the corresponding code line number interval.
- If there is no failure, also verify that all expansion predicates (e.g., `implies/2`, `opposite/1`, `expand/2`, `includes/2`, `extend/3`, `refute/1`) are correctly defined in both classical and probabilistic contexts.

3. **Root Cause Analysis**
- In classical Problog scenarios, analyze logical correctness and recursive termination.
- In ProbLog probabilistic scenarios, check whether the computation of probabilistic facts and negations/implications complies with probabilistic rules such as `P(¬A)=1−P(A)`, `P(A⇒B)=P(¬A)+P(A∧B)`.
- If there are DeepProbLog related calls (e.g., `nn/3`, `tensor/…`), verify whether the fusion of neural network output and probabilistic reasoning is correct; if it is not used at all, report "DeepProbLog feature not used".

4. **Overall Analysis**
- For the functional requirements (classical reasoning, probabilistic reasoning, neural network integration), indicate whether they are met and briefly explain.
- Comment on the easily overlooked edge cases (undefined `expand/2`, non-list input, deep recursive performance, etc.).

5. **Report Format**
- Use Markdown and include the following parts:
1. **Document Title**
2. **Background and Purpose**
3. **Test Results Summary**
4. **Failure Localization**
5. **Root Cause Analysis**
6. **Overall Analysis**
7. **Error Summary** (tabular form: number | problem | impact | suggestion)
- Must include code blocks and tables, and the word count should be between 300–500 words.
- The tone should be formal and the logic should be clear.
</Evaluation_Instructions>

<Final_Answer>
Please output the complete report according to the above structure.
</Final_Answer>



**split**


In this phase, you'll receive the output from the first chain along with the original code blocks. Your task is to evaluate each <langda> code block individually and determine if it needs regeneration.
<original_code>

<Langda>
<Code_Block>bubblesort([], Acc, Acc).
bubblesort(List, Acc, Sorted) :-
    bubble_pass(List, NewList, Changed),
    (Changed == 1 ->
        bubblesort(NewList, Acc, Sorted)
    ;
        append(Acc, NewList, Sorted)
    ).
bubble_pass([X,Y|T], [Y|Rest], 1) :- 
    X > Y,
    bubble_pass([X|T], Rest, _).
bubble_pass([X,Y|T], [X|Rest], Changed) :- 
    X =< Y,
    bubble_pass([Y|T], Rest, Changed).
bubble_pass([X], [X], 0).
bubble_pass([], [], 0).
forth_sort(L, L2) :- bubblesort(L, [], L2).
query(forth_sort([3,1,2,5,7,12],X)).</Code_Block>
<HASH> Hash tag of code: 47D659C8 </HASH>
<Requirements>This Prolog program should implement an interpretable bubblesort/3 algorithm. </Requirements></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
query(forth_sort([3,1,2,5,7,12],X)).
<Result>
 Here are the testing result of code:
 Error evaluating Problog model:
    return exec_func(node_id=node_id, node=node, **kwdargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/zhenzhili/miniforge3/envs/langda/lib/python3.11/site-packages/problog/engine_stack.py", line 839, in eval_call
    raise UnknownClause(origin, location=loc)
problog.engine.UnknownClause: No clauses found for ''->'/2' at 4:19.
</Result>

</original_code>

# Problog Bubblesort Implementation Evaluation Report

## Background and Purpose
This report evaluates a Problog implementation of the bubblesort algorithm. The code should correctly sort lists using the classic bubblesort approach while being compatible with Problog's probabilistic reasoning framework. The evaluation focuses on functional correctness, error handling, and Problog compatibility.

## Test Results Summary
The test failed with the following error:
```
problog.engine.UnknownClause: No clauses found for ''->'/2' at 4:19
```
The query `forth_sort([3,1,2,5,7,12],X)` could not be executed due to this syntax error in the implementation.

## Failure Localization
The error occurs in the `bubblesort/3` predicate, specifically at line 4 (character 19) where the if-then-else construct `(Changed == 1 -> ... ; ...)` is not properly recognized by Problog. 

Key problematic components:
1. The if-then-else syntax (`->/2`) is not supported in standard Problog (lines 4-7)
2. The entire sorting logic depends on this conditional branching

## Root Cause Analysis
1. **Syntax Compatibility**: Problog uses a different syntax for conditional statements than standard Prolog. The `->/2` operator is not recognized.
2. **Logical Structure**: While the bubblesort algorithm is logically correct for standard Prolog, it needs adaptation for Problog's syntax rules.
3. **Probabilistic Compliance**: The implementation doesn't include any probabilistic facts or rules, making it purely deterministic.
4. **DeepProbLog Integration**: No neural network components (`nn/3`, `tensor`) are used in this implementation.

## Overall Analysis
1. **Functional Requirements**:
   - Classical reasoning: Partially met (algorithm is correct but syntax incompatible)
   - Probabilistic reasoning: Not implemented
   - Neural network integration: Not used ("DeepProbLog feature not used")

2. **Edge Cases**:
   - Non-list inputs are not handled
   - Empty list case is correctly handled
   - Performance with large lists not tested
   - No probabilistic facts or rules included

## Error Summary

| # | Problem | Impact | Suggestion |
|---|---------|--------|------------|
| 1 | Unsupported if-then-else syntax | Complete failure | Replace with Problog-compatible conditionals |
| 2 | No probabilistic components | Limited to deterministic sorting | Add probabilistic facts or rules |
| 3 | No input validation | Potential runtime errors | Add type checking for list inputs |
| 4 | No DeepProbLog integration | Missed opportunity for hybrid reasoning | Consider adding neural network components |

## Recommended Fixes
```prolog
% Problog-compatible bubblesort implementation
bubblesort([], Acc, Acc).
bubblesort(List, Acc, Sorted) :-
    bubble_pass(List, NewList, Changed),
    (Changed =:= 1,
     bubblesort(NewList, Acc, Sorted)
    ;
    (Changed =\= 1,
     append(Acc, NewList, Sorted)).
```

The implementation requires complete restructuring to use only Problog-supported syntax elements. The sorting logic itself is correct, but needs to be expressed in a way compatible with Problog's execution model.

Word count: 423

<Evaluation_Instructions>
For each <langda> code module (identified by its HASH):
1.Summarize the errors in that module in a brief *ErrorSummary*. If no errors, state "No issues found."
2.Propose a *SuggestedFix* that specifically addresses the error(s) (e.g. add a missing predicate, correct a probability rule). Include line numbers or module names if helpful.
3.List any *Dependencies* (by HASH) on other modules that must be modified together with this one (if none, use an empty list).
4.Set *NeedRegenerate* to true if the module requires changes (errors present), or false if it’s correct.
</Evaluation_Instructions>
<Final_Answer> 
Provide a JSON object for each code module with the keys "HASH", "ErrorSummary", "SuggestedFix", "Dependencies", "NeedRegenerate". Format the output as a JSON array or separate JSON blocks. For example:
// Inside the ```report ... ``` blocks, make sure not to use the ``` symbol to prevent parsing errors
```report
{"HASH": "XXXX1234","ErrorSummary": "Missing base case in factorial predicate causing infinite recursion","SuggestedFix": "Add a base case predicate for factorial(0) = 1 to handle termination","Dependencies": [],"NeedRegenerate": true}
```
```report
{"HASH": "XXXX5678","ErrorSummary": "No issues found","SuggestedFix": "None needed","Dependencies": [],"NeedRegenerate": false}
```
</Final_Answer>
