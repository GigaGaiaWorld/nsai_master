System: You are a coding assistant. You could use the available tools to complete the task, you should always use 'get_report_tool' first to gain more information.
Human: You are an expert programmer proficient in Problog and DeepProbLog.  Your task is to regenerate the code in each <langda> block inside <Regenerate_format>

<Regenerate_format>
<Langda> Information:
<HASH> Hash tag of code: 5E40E418 </HASH>
<Requirements>Implemented a series of stack operations </Requirements></Langda>
.
stack_op(sort, Stack, SortedStack) :-
 get_top_n(Stack, 3, Elements, RestStack),
 insertion_sort(Elements, SortedElements),
 append(SortedElements, RestStack, SortedStack).
get_top_n(Stack, N, Elements, Rest) :-
 length(Elements, N),
 append(Elements, Rest, Stack).
query(stack_op(push(1),[2,3,4],Y)).
query(stack_op(pop,[1,2,3,4],Y)).
query(stack_op(dup,[1,2,3,4],Y)).
query(stack_op(swap,[1,2,3,4],Y)).
query(stack_op(over,[1,2,3,4],Y)).
query(stack_op(rot,[1,2,3,4],Y)).
<Regenerate_format>

<Regenerate_Instructions>
1. In <Regenerate_format> you will see the code template format to be followed, and the <langda> block in the template marks the part that needs to be completed.
2. Your task is to generate and output the complete Problog/DeepProbLog code according to the user's specific requirements for each <langda> block. The new code should fix the error in previous code.
3. Your could take the advise in <Analysis>
</Regenerate_Instructions>

<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed code here
```
</Final_Answer>


AI: 

**split**


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

<Langda> Information:
<HASH> Hash tag of code: 5E40E418 </HASH>
<Requirements>Implemented a series of stack operations </Requirements></Langda>
.
stack_op(sort, Stack, SortedStack) :-
 get_top_n(Stack, 3, Elements, RestStack),
 insertion_sort(Elements, SortedElements),
 append(SortedElements, RestStack, SortedStack).
get_top_n(Stack, N, Elements, Rest) :-
 length(Elements, N),
 append(Elements, Rest, Stack).
query(stack_op(push(1),[2,3,4],Y)).
query(stack_op(pop,[1,2,3,4],Y)).
query(stack_op(dup,[1,2,3,4],Y)).
query(stack_op(swap,[1,2,3,4],Y)).
query(stack_op(over,[1,2,3,4],Y)).
query(stack_op(rot,[1,2,3,4],Y)).

</origin_code>
<generated_code>

% Stack operations in ProbLog

% Push an element onto the stack
stack_op(push(X), Stack, [X|Stack]) :-
    is_list(Stack).

% Pop the top element from the stack
stack_op(pop, [X|Rest], Rest) :-
    is_list([X|Rest]).

% Duplicate the top element of the stack
stack_op(dup, [X|Rest], [X,X|Rest]) :-
    is_list([X|Rest]).

% Swap the top two elements of the stack
stack_op(swap, [X,Y|Rest], [Y,X|Rest]) :-
    is_list([X,Y|Rest]).

% Copy the second element to the top of the stack
stack_op(over, [X,Y|Rest], [Y,X,Y|Rest]) :-
    is_list([X,Y|Rest]).

% Rotate the top three elements of the stack
stack_op(rot, [X,Y,Z|Rest], [Z,X,Y|Rest]) :-
    is_list([X,Y,Z|Rest]).

% Sort the top N elements of the stack
stack_op(sort, Stack, SortedStack) :-
    is_list(Stack),
    (   length(Stack, L), L >= 3 ->
        get_top_n(Stack, 3, Elements, RestStack),
        quicksort(Elements, SortedElements),
        append(SortedElements, RestStack, SortedStack)
    ;   SortedStack = Stack % Handle small stacks
    ).

% Get the top N elements of the stack
get_top_n(Stack, N, Elements, Rest) :-
    length(Elements, N),
    append(Elements, Rest, Stack).

% Quicksort implementation for efficiency
quicksort([], []).
quicksort([Pivot|Rest], Sorted) :-
    partition(Rest, Pivot, Left, Right),
    quicksort(Left, SortedLeft),
    quicksort(Right, SortedRight),
    append(SortedLeft, [Pivot|SortedRight], Sorted).

% Partition helper for quicksort
partition([], _, [], []).
partition([X|Rest], Pivot, [X|Left], Right) :-
    X =< Pivot,
    partition(Rest, Pivot, Left, Right).
partition([X|Rest], Pivot, Left, [X|Right]) :-
    X > Pivot,
    partition(Rest, Pivot, Left, Right).

% Example queries
query(stack_op(push(1), [2,3,4], Y)).
query(stack_op(pop, [1,2,3,4], Y)).
query(stack_op(dup, [1,2,3,4], Y)).
query(stack_op(swap, [1,2,3,4], Y)).
query(stack_op(over, [1,2,3,4], Y)).
query(stack_op(rot, [1,2,3,4], Y)).
query(stack_op(sort, [1,2,3,4], Y)).
query(stack_op(sort, [1,2], Y)). % Test small stack

<generated_code>
<Final_Answer> 
For each code block, extract it and format it in the following JSON format, please remove all code comments:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```

If there's no corresponding code exist:
```problog
{"HASH": "XXXX7890","Code": ""}
```
</Final_Answer>