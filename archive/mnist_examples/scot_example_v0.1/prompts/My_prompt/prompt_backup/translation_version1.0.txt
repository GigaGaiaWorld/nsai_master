Problem Context: A data center monitors various environmental and power-related metrics using sensor data, including temperature, humidity, dew point, air quality. The goal is to detect anomalous events that may indicate failures, inefficiencies, or unexpected conditions in the facility.
Task Description: You are given a serie of facts that description. Your task is to leverage a pre-trained Large Language Model (LLM) combined with symbolic reasoning to analyze natural language event descriptions and map them to formalized logic-based anomaly detection rules.

### Facts are always given in following forms, you should not create this part, they include the sensor's measurements in the time window between "Start_timestamp" and "End_timestamp". Each "Sensor_id" can monitor multiple items, whenever you use facts inside a rule, you should follow the following form: 
Item: [[ITEM_FORM]]
Form:
sensor_data(Sensor, Item, Start_timestamp, End_timestamp, Std_value, Mean_value, Median_value, Max_value, Min_value, Slope)
Example:
sensor_data(sensor_KMS1, temperature, '2023-08-01T12:00:00', '2023-08-01T12:05:00', 0.8, 25.4, 25.3, 26.1, 24.5, 0.1).
sensor_data(sensor_weather, humidity, '2023-08-05T13:00:00', '2023-08-05T13:05:00', 0.82, 0.80, 0.83, 0.85, 0.78, 0.02).
sensor_data(sensor_cpu, cpuload, '2024-02-01T12:30:00', '2024-02-01T12:35:00', 0.45, 0.42, 0.46, 0.50, 0.40, 0.03).

-----
Below are some examples of how you should construct the predicate according to the input of the user:

### Basic rules thats the objects in datacenter should follow, the name could be directly defined according to it's meaning: 
event_<Event_name1>(Sensor1,Sensor2)

Example:
Discribtion: if both Sensor1 and Sensor2 exceed the threshold of the temperature(in this case 26), the Event_name is set to "temperature_exceed", and the predicate structure is setted as follow:
event_temperature_exceed(Sensor1, Sensor2):-
    sensor_data(Sensor1, temperature, _,_, _, Mean1, _, _, _, Slope1),
    sensor_data(Sensor2, temperature, _, _, _, Mean2, _, _, _, Slope2),
    Slope1 > 0, Slope2 > 0, Mean1 > 26, Mean2 > 26.

Discribtion: if the cpu load is higher as 0.45, the Event_name is set to "cpu_high_load", and the predicate structure is setted as follow:
event_cpu_high_load(Sensor) :- 
  sensor_data(Sensor, cpuload, _, _, _, MeanCPU, _, _, _, _), MeanCPU > 0.45.

Discribtion: if the temperature difference between Sensor1 and Sensor2 is higher that 2.0, the Event_name is set to "temperature_difference_large", and the predicate structure is setted as follow:
event_temperature_difference_large(Sensor1, Sensor2) :- 
  sensor_data(Sensor1, temperature, _, _, _, Mean1, _, _, _, _),
  sensor_data(Sensor2, temperature, _, _, _, Mean2, _, _, _, _), 
  Diff is abs(Mean1 - Mean2), Diff > 2.0.


### Eventually, based on the events that we defined, we should define the anormaly predicate for the anormaly detection:
anormaly(<Anormaly_name>) :-

Example:
Description: When the CPU is highly loaded and the temperature rises, the Anormaly_name is set to high_load_phenomenon, and the predicate structure is setted as follow:
anomaly(high_load_phenomenon) :-
    event_cpu_high_load(sensor_cpu),
    event_temperature_rise(sensor_KMS1).

Description: When the CPU is highly loaded and the temperature drops, the Anormaly_name is set to temperature_sensor_failure, and the predicate structure is setted as follow:
anomaly(temperature_sensor_failure) :-
    event_cpu_high_load(sensor_cpu),
    event_temperature_fall(sensor_KMS1).

Description: When the temperature difference between sensor_KMS1 and sensor_KMS2 is too large, the Anormaly_name is set to cooling_system_failure, and the predicate structure is setted as follow:
anomaly(cooling_system_failure) :-
    event_temperature_difference_large(sensor_KMS1, sensor_KMS2).

-----
Below is the one you need to translate:

[[QUESTION]]

###
Make sure you capture all the information from the context in the translation.
Make sure you follow the instruction and example to translate the information.
Please ensure your answer is directly executable.
Do not generate any descriptive content.