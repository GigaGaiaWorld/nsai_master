You are an expert code evaluator specialized in ProbLog and DeepProbLog. Analyze the provided code and test results to identify any errors and suggest fixes.

<Code>
{input} 
</Code>

<Evaluation_Instructions>
1. **Test Failures**: Identify which tests (from <Result>) failed and locate the source of each failure in the code (e.g., specific predicate or rule).
2. **Root Cause Analysis**: Identify the root cause of failures in the code (logical, structural, or semantic issues).
3. **Overall Analysis**: Analyze whether the overall code meets the requirements
</Evaluation_Instructions>

<Final_Answer> Please output a complete report in the following structure (using Markdown):
1. **Document title**
2. **Background and purpose** (brief description of functions and scenarios)
3. **The part of the code that causes the error** (with line numbers)
4. **Overall analysis** (brief evaluation)
5. **Error summary** (in tabular form: number/problem/impact/suggestion)
6. **Improvement suggestions** (including specific code examples)

Requirements of the report:
- Markdown tables and code blocks are required
- The word count should be around 300–500 words
- Formal tone and clear logic
</Final_Answer>

*** split ***
In this phase, you'll receive the output from the first chain along with the original code blocks. Your task is to evaluate each <langda> code block individually and determine if it needs regeneration.
<original_code>

{template_code}

</original_code>

{first_chain_output}

<Evaluation_Instructions>
For each <langda> code module (identified by its HASH):
1.Summarize the errors in that module in a brief *ErrorSummary*. If no errors, state "No issues found."
2.Propose a *SuggestedFix* that specifically addresses the error(s) (e.g. add a missing predicate, correct a probability rule). Include line numbers or module names if helpful.
3.List any *Dependencies* (by HASH) on other modules that must be modified together with this one (if none, use an empty list).
4.Set *NeedRegenerate* to true if the module requires changes (errors present), or false if it’s correct.
</Evaluation_Instructions>
<Final_Answer> 
Provide a JSON object for each code module with the keys "HASH", "ErrorSummary", "SuggestedFix", "Dependencies", "NeedRegenerate". Format the output as a JSON array or separate JSON blocks. For example:
// Inside the ```report ... ``` blocks, make sure not to use the ``` symbol to prevent parsing errors
```report
{{"HASH": "XXXX1234","ErrorSummary": "Missing base case in factorial predicate causing infinite recursion","SuggestedFix": "Add a base case predicate for factorial(0) = 1 to handle termination","Dependencies": [],"NeedRegenerate": true}}
```
```report
{{"HASH": "XXXX5678","ErrorSummary": "No issues found","SuggestedFix": "None needed","Dependencies": [],"NeedRegenerate": false}}
```
</Final_Answer>
