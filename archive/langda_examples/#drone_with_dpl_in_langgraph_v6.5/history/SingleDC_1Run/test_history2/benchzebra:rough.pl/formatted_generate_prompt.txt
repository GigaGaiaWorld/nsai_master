System: You are a coding assistant. You should use the available tools to complete the task.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>

zebra(Houses) :-
	houses(Houses),
	my_member(house(red, english, _, _, _), Houses),
	my_member(house(_, spanish, dog, _, _), Houses),
	my_member(house(green, _, _, coffee, _), Houses),
	my_member(house(_, ukrainian, _, tea, _), Houses),
	right_of(house(green,_,_,_,_), house(ivory,_,_,_,_), Houses),
	my_member(house(_, _, snails, _, winstons), Houses),
	my_member(house(yellow, _, _, _, kools), Houses),
	Houses = [_, _, house(_, _, _, milk, _), _,_],
	Houses = [house(_, norwegian, _, _, _)|_],
	next_to(house(_,_,_,_,chesterfields), house(_,_,fox,_,_), Houses),
	next_to(house(_,_,_,_,kools), house(_,_,horse,_,_), Houses),
	my_member(house(_, _, _, orange_juice, lucky_strikes), Houses),
	my_member(house(_, japanese, _, _, parliaments), Houses),
	next_to(house(_,norwegian,_,_,_), house(blue,_,_,_,_), Houses),
	my_member(house(_, _, zebra, _, _), Houses),
	my_member(house(_, _, _, water, _), Houses).
houses([
	house(_, _, _, _, _),
	house(_, _, _, _, _),
	house(_, _, _, _, _),
	house(_, _, _, _, _),
	house(_, _, _, _, _)
]).
<Langda> Information:
<HASH> Hash tag of code: AA4D04D8 </HASH>
<Requirements>define the my_member/2 predicate. </Requirements></Langda>
.
<Langda> Information:
<HASH> Hash tag of code: 3C24DB80 </HASH>
<Requirements>define the next_to/3 predicate. </Requirements></Langda>
.
<Langda> Information:
<HASH> Hash tag of code: 8660991C </HASH>
<Requirements>define the right_of/3 predicate. </Requirements></Langda>
.
query(zebra(Houses)).

</Code>
<Syntax_Notes>
ProbLog supports a subset of Prolog's control constructs (logical connectives and meta-predicates) that do not break the logical (declarative) semantics. 
It excludes features like cuts and imperative control that have no meaning in a probabilistic setting.

Supported control predicates:
- Conjunction: P, Q (both P and Q must succeed).
- Disjunction: P; Q (either P or Q succeeds).
- true/0 (always succeeds).
- fail/0 (always fails) and synonym false/0.
- Negation-as-failure: \+/1 (or its alias not/1).
- Meta-call: call/1 (invoke a goal at runtime) and call/N for N up to 9 (for calling predicates with N-1 additional arguments).
- You can also write a goal directly as a term (which is equivalent to call/1).

Supported arithmetic evaluation and comparison: 
- X is Y (evaluate expression Y and unify with X).
- Comparison Operators X < Y, X =< Y (or <=), X > Y, X >= Y, as well as numeric equality X =:= Y and inequality X =\\= Y (which compare numerical values after evaluation).

Not supported control constructs:
- The cut !/0 is not supported (no hard cut in ProbLog; see the Cut library for an alternative soft cut mechanism).
- The if-then (->) and if-then-else (*->) constructs are not supported. (You can achieve a similar effect using (Condition, Action) ; (\+ Condition, Alternative).)

** Other situations can be obtained by calling the tool
</Syntax_Notes>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 

**split**


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

zebra(Houses) :-
	houses(Houses),
	my_member(house(red, english, _, _, _), Houses),
	my_member(house(_, spanish, dog, _, _), Houses),
	my_member(house(green, _, _, coffee, _), Houses),
	my_member(house(_, ukrainian, _, tea, _), Houses),
	right_of(house(green,_,_,_,_), house(ivory,_,_,_,_), Houses),
	my_member(house(_, _, snails, _, winstons), Houses),
	my_member(house(yellow, _, _, _, kools), Houses),
	Houses = [_, _, house(_, _, _, milk, _), _,_],
	Houses = [house(_, norwegian, _, _, _)|_],
	next_to(house(_,_,_,_,chesterfields), house(_,_,fox,_,_), Houses),
	next_to(house(_,_,_,_,kools), house(_,_,horse,_,_), Houses),
	my_member(house(_, _, _, orange_juice, lucky_strikes), Houses),
	my_member(house(_, japanese, _, _, parliaments), Houses),
	next_to(house(_,norwegian,_,_,_), house(blue,_,_,_,_), Houses),
	my_member(house(_, _, zebra, _, _), Houses),
	my_member(house(_, _, _, water, _), Houses).
houses([
	house(_, _, _, _, _),
	house(_, _, _, _, _),
	house(_, _, _, _, _),
	house(_, _, _, _, _),
	house(_, _, _, _, _)
]).
<Langda> Information:
<HASH> Hash tag of code: AA4D04D8 </HASH>
<Requirements>define the my_member/2 predicate. </Requirements></Langda>
.
<Langda> Information:
<HASH> Hash tag of code: 3C24DB80 </HASH>
<Requirements>define the next_to/3 predicate. </Requirements></Langda>
.
<Langda> Information:
<HASH> Hash tag of code: 8660991C </HASH>
<Requirements>define the right_of/3 predicate. </Requirements></Langda>
.
query(zebra(Houses)).

</origin_code>
<generated_code>

% Define the my_member/2 predicate
my_member(X, [X|_]).
my_member(X, [_|T]) :- my_member(X, T).

% Define the next_to/3 predicate
next_to(X, Y, List) :- right_of(X, Y, List).
next_to(X, Y, List) :- right_of(Y, X, List).

% Define the right_of/3 predicate
right_of(X, Y, [Y, X|_]).
right_of(X, Y, [_|T]) :- right_of(X, Y, T).

% Original zebra puzzle code
zebra(Houses) :-
    houses(Houses),
    my_member(house(red, english, _, _, _), Houses),
    my_member(house(_, spanish, dog, _, _), Houses),
    my_member(house(green, _, _, coffee, _), Houses),
    my_member(house(_, ukrainian, _, tea, _), Houses),
    right_of(house(green,_,_,_,_), house(ivory,_,_,_,_), Houses),
    my_member(house(_, _, snails, _, winstons), Houses),
    my_member(house(yellow, _, _, _, kools), Houses),
    Houses = [_, _, house(_, _, _, milk, _), _,_],
    Houses = [house(_, norwegian, _, _, _)|_],
    next_to(house(_,_,_,_,chesterfields), house(_,_,fox,_,_), Houses),
    next_to(house(_,_,_,_,kools), house(_,_,horse,_,_), Houses),
    my_member(house(_, _, _, orange_juice, lucky_strikes), Houses),
    my_member(house(_, japanese, _, _, parliaments), Houses),
    next_to(house(_,norwegian,_,_,_), house(blue,_,_,_,_), Houses),
    my_member(house(_, _, zebra, _, _), Houses),
    my_member(house(_, _, _, water, _), Houses).

houses([
    house(_, _, _, _, _),
    house(_, _, _, _, _),
    house(_, _, _, _, _),
    house(_, _, _, _, _),
    house(_, _, _, _, _)
]).

% Query to solve the puzzle
query(zebra(Houses)).

<generated_code>
<Final_Answer>
For each code block, extract it and format it in the following JSON format, please remove all code comments:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```

If there's no corresponding code exist:
```problog
{"HASH": "XXXX7890","Code": ""}
```
</Final_Answer>