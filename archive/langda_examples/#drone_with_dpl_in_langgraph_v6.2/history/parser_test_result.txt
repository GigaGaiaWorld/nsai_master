[{'_arity': 2,
  '_content': 'lann(mnist_net:"mnist network",[X],Y,[0, 1, 2, 3, 4, 5, 6, 7, '
              '8, 9]:"pick the output from one of there value")::digit(X,Y)',
  '_functor': 'digit',
  '_probability': {'_arity': 4,
                   '_content': 'lann(mnist_net:"mnist network",[X],Y,[0, 1, 2, '
                               '3, 4, 5, 6, 7, 8, 9]:"pick the output from one '
                               'of there value")',
                   '_functor': 'lann',
                   '_type': 'term',
                   'args': [{'_arity': 2,
                             '_content': 'mnist_net:"mnist network"',
                             '_functor': "':'",
                             '_type': 'term',
                             'args': [{'_arity': 0,
                                       '_content': 'mnist_net',
                                       '_functor': 'mnist_net',
                                       '_type': 'term',
                                       'args': []},
                                      {'_content': '"mnist network"',
                                       '_type': 'constant',
                                       'value': '"mnist network"'}]},
                            {'_content': '[X]',
                             '_functor': '.',
                             '_type': 'list',
                             'args': [{'_content': 'X',
                                       '_type': 'variable',
                                       'name': 'X'}]},
                            {'_content': 'Y', '_type': 'variable', 'name': 'Y'},
                            {'_arity': 2,
                             '_content': '[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:"pick '
                                         'the output from one of there value"',
                             '_functor': "':'",
                             '_type': 'term',
                             'args': [{'_content': '[0, 1, 2, 3, 4, 5, 6, 7, '
                                                   '8, 9]',
                                       '_functor': '.',
                                       '_type': 'list',
                                       'args': [{'_content': '0',
                                                 '_type': 'constant',
                                                 'value': 0},
                                                {'_content': '1',
                                                 '_type': 'constant',
                                                 'value': 1},
                                                {'_content': '2',
                                                 '_type': 'constant',
                                                 'value': 2},
                                                {'_content': '3',
                                                 '_type': 'constant',
                                                 'value': 3},
                                                {'_content': '4',
                                                 '_type': 'constant',
                                                 'value': 4},
                                                {'_content': '5',
                                                 '_type': 'constant',
                                                 'value': 5},
                                                {'_content': '6',
                                                 '_type': 'constant',
                                                 'value': 6},
                                                {'_content': '7',
                                                 '_type': 'constant',
                                                 'value': 7},
                                                {'_content': '8',
                                                 '_type': 'constant',
                                                 'value': 8},
                                                {'_content': '9',
                                                 '_type': 'constant',
                                                 'value': 9}]},
                                      {'_content': '"pick the output from one '
                                                   'of there value"',
                                       '_type': 'constant',
                                       'value': '"pick the output from one of '
                                                'there value"'}]}]},
  '_type': 'term',
  'args': [{'_content': 'X', '_type': 'variable', 'name': 'X'},
           {'_content': 'Y', '_type': 'variable', 'name': 'Y'}]},
 {'_arity': 3,
  '_content': 'number([],Result,Result)',
  '_functor': 'number',
  '_type': 'term',
  'args': [{'_arity': 0,
            '_content': '[]',
            '_functor': '[]',
            '_type': 'term',
            'args': []},
           {'_content': 'Result', '_type': 'variable', 'name': 'Result'},
           {'_content': 'Result', '_type': 'variable', 'name': 'Result'}]},
 {'_arity': 2,
  '_content': 'number([H | T],Acc,Result) :- langda(NET:"use mnist '
              'network",LLM:"Recursively process the image list: identify the '
              'digits one by one and construct the corresponding multi-bit '
              'integers in low-bit first order.")',
  '_functor': ':-',
  '_head': {'_arity': 3,
            '_content': 'number([H | T],Acc,Result)',
            '_functor': 'number',
            '_type': 'term',
            'args': [{'_content': '[H | T]',
                      '_functor': '.',
                      '_tail': {'_content': 'T',
                                '_type': 'variable',
                                'name': 'T'},
                      '_type': 'list',
                      'args': [{'_content': 'H',
                                '_type': 'variable',
                                'name': 'H'}]},
                     {'_content': 'Acc', '_type': 'variable', 'name': 'Acc'},
                     {'_content': 'Result',
                      '_type': 'variable',
                      'name': 'Result'}]},
  '_type': 'clause',
  'args': [{'_arity': 3,
            '_content': 'number([H | T],Acc,Result)',
            '_functor': 'number',
            '_type': 'term',
            'args': [{'_content': '[H | T]',
                      '_functor': '.',
                      '_tail': {'_content': 'T',
                                '_type': 'variable',
                                'name': 'T'},
                      '_type': 'list',
                      'args': [{'_content': 'H',
                                '_type': 'variable',
                                'name': 'H'}]},
                     {'_content': 'Acc', '_type': 'variable', 'name': 'Acc'},
                     {'_content': 'Result',
                      '_type': 'variable',
                      'name': 'Result'}]},
           {'_arity': 2,
            '_content': 'langda(NET:"use mnist network",LLM:"Recursively '
                        'process the image list: identify the digits one by '
                        'one and construct the corresponding multi-bit '
                        'integers in low-bit first order.")',
            '_functor': 'langda',
            '_type': 'term',
            'args': [{'_arity': 2,
                      '_content': 'NET:"use mnist network"',
                      '_functor': "':'",
                      '_type': 'term',
                      'args': [{'_content': 'NET',
                                '_type': 'variable',
                                'name': 'NET'},
                               {'_content': '"use mnist network"',
                                '_type': 'constant',
                                'value': '"use mnist network"'}]},
                     {'_arity': 2,
                      '_content': 'LLM:"Recursively process the image list: '
                                  'identify the digits one by one and '
                                  'construct the corresponding multi-bit '
                                  'integers in low-bit first order."',
                      '_functor': "':'",
                      '_type': 'term',
                      'args': [{'_content': 'LLM',
                                '_type': 'variable',
                                'name': 'LLM'},
                               {'_content': '"Recursively process the image '
                                            'list: identify the digits one by '
                                            'one and construct the '
                                            'corresponding multi-bit integers '
                                            'in low-bit first order."',
                                '_type': 'constant',
                                'value': '"Recursively process the image list: '
                                         'identify the digits one by one and '
                                         'construct the corresponding '
                                         'multi-bit integers in low-bit first '
                                         'order."'}]}]}],
  'body': {'_arity': 2,
           '_content': 'langda(NET:"use mnist network",LLM:"Recursively '
                       'process the image list: identify the digits one by one '
                       'and construct the corresponding multi-bit integers in '
                       'low-bit first order.")',
           '_functor': 'langda',
           '_type': 'term',
           'args': [{'_arity': 2,
                     '_content': 'NET:"use mnist network"',
                     '_functor': "':'",
                     '_type': 'term',
                     'args': [{'_content': 'NET',
                               '_type': 'variable',
                               'name': 'NET'},
                              {'_content': '"use mnist network"',
                               '_type': 'constant',
                               'value': '"use mnist network"'}]}, 
                    {'_arity': 2,
                     '_content': 'LLM:"Recursively process the image list: '
                                 'identify the digits one by one and construct '
                                 'the corresponding multi-bit integers in '
                                 'low-bit first order."',
                     '_functor': "':'",
                     '_type': 'term',
                     'args': [{'_content': 'LLM',
                               '_type': 'variable',
                               'name': 'LLM'},
                              {'_content': '"Recursively process the image '
                                           'list: identify the digits one by '
                                           'one and construct the '
                                           'corresponding multi-bit integers '
                                           'in low-bit first order."',
                               '_type': 'constant',
                               'value': '"Recursively process the image list: '
                                        'identify the digits one by one and '
                                        'construct the corresponding multi-bit '
                                        'integers in low-bit first '
                                        'order."'}]}]}},
 {'_arity': 2,
  '_content': 'number(X,Y) :- number(X,0,Y)',
  '_functor': ':-',
  '_head': {'_arity': 2,
            '_content': 'number(X,Y)',
            '_functor': 'number',
            '_type': 'term',
            'args': [{'_content': 'X', '_type': 'variable', 'name': 'X'},
                     {'_content': 'Y', '_type': 'variable', 'name': 'Y'}]},
  '_type': 'clause',
  'args': [{'_arity': 2,
            '_content': 'number(X,Y)',
            '_functor': 'number',
            '_type': 'term',
            'args': [{'_content': 'X', '_type': 'variable', 'name': 'X'},
                     {'_content': 'Y', '_type': 'variable', 'name': 'Y'}]},
           {'_arity': 3,
            '_content': 'number(X,0,Y)',
            '_functor': 'number',
            '_type': 'term',
            'args': [{'_content': 'X', '_type': 'variable', 'name': 'X'},
                     {'_content': '0', '_type': 'constant', 'value': 0},
                     {'_content': 'Y', '_type': 'variable', 'name': 'Y'}]}],
  'body': {'_arity': 3,
           '_content': 'number(X,0,Y)',
           '_functor': 'number',
           '_type': 'term',
           'args': [{'_content': 'X', '_type': 'variable', 'name': 'X'},
                    {'_content': '0', '_type': 'constant', 'value': 0},
                    {'_content': 'Y', '_type': 'variable', 'name': 'Y'}]}},
 {'_arity': 2,
  '_content': 'multi_addition(X,Y,Z) :- langda(NET:"use mnist '
              'network",LLM:"Convert two sets of sequences consisting of '
              'digital pictures into integers and add them together to get the '
              'numerical result.",FUP:"False")',
  '_functor': ':-',
  '_head': {'_arity': 3,
            '_content': 'multi_addition(X,Y,Z)',
            '_functor': 'multi_addition',
            '_type': 'term',
            'args': [{'_content': 'X', '_type': 'variable', 'name': 'X'},
                     {'_content': 'Y', '_type': 'variable', 'name': 'Y'},
                     {'_content': 'Z', '_type': 'variable', 'name': 'Z'}]},
  '_type': 'clause',
  'args': [{'_arity': 3,
            '_content': 'multi_addition(X,Y,Z)',
            '_functor': 'multi_addition',
            '_type': 'term',
            'args': [{'_content': 'X', '_type': 'variable', 'name': 'X'},
                     {'_content': 'Y', '_type': 'variable', 'name': 'Y'},
                     {'_content': 'Z', '_type': 'variable', 'name': 'Z'}]},
           {'_arity': 3,
            '_content': 'langda(NET:"use mnist network",LLM:"Convert two sets '
                        'of sequences consisting of digital pictures into '
                        'integers and add them together to get the numerical '
                        'result.",FUP:"False")',
            '_functor': 'langda',
            '_type': 'term',
            'args': [{'_arity': 2,
                      '_content': 'NET:"use mnist network"',
                      '_functor': "':'",
                      '_type': 'term',
                      'args': [{'_content': 'NET',
                                '_type': 'variable',
                                'name': 'NET'},
                               {'_content': '"use mnist network"',
                                '_type': 'constant',
                                'value': '"use mnist network"'}]},
                     {'_arity': 2,
                      '_content': 'LLM:"Convert two sets of sequences '
                                  'consisting of digital pictures into '
                                  'integers and add them together to get the '
                                  'numerical result."',
                      '_functor': "':'",
                      '_type': 'term',
                      'args': [{'_content': 'LLM',
                                '_type': 'variable',
                                'name': 'LLM'},
                               {'_content': '"Convert two sets of sequences '
                                            'consisting of digital pictures '
                                            'into integers and add them '
                                            'together to get the numerical '
                                            'result."',
                                '_type': 'constant',
                                'value': '"Convert two sets of sequences '
                                         'consisting of digital pictures into '
                                         'integers and add them together to '
                                         'get the numerical result."'}]},
                     {'_arity': 2,
                      '_content': 'FUP:"False"',
                      '_functor': "':'",
                      '_type': 'term',
                      'args': [{'_content': 'FUP',
                                '_type': 'variable',
                                'name': 'FUP'},
                               {'_content': '"False"',
                                '_type': 'constant',
                                'value': '"False"'}]}]}],
  'body': {'_arity': 3,
           '_content': 'langda(NET:"use mnist network",LLM:"Convert two sets '
                       'of sequences consisting of digital pictures into '
                       'integers and add them together to get the numerical '
                       'result.",FUP:"False")',
           '_functor': 'langda',
           '_type': 'term',
           'args': [{'_arity': 2,
                     '_content': 'NET:"use mnist network"',
                     '_functor': "':'",
                     '_type': 'term',
                     'args': [{'_content': 'NET',
                               '_type': 'variable',
                               'name': 'NET'},
                              {'_content': '"use mnist network"',
                               '_type': 'constant',
                               'value': '"use mnist network"'}]},
                    {'_arity': 2,
                     '_content': 'LLM:"Convert two sets of sequences '
                                 'consisting of digital pictures into integers '
                                 'and add them together to get the numerical '
                                 'result."',
                     '_functor': "':'",
                     '_type': 'term',
                     'args': [{'_content': 'LLM',
                               '_type': 'variable',
                               'name': 'LLM'},
                              {'_content': '"Convert two sets of sequences '
                                           'consisting of digital pictures '
                                           'into integers and add them '
                                           'together to get the numerical '
                                           'result."',
                               '_type': 'constant',
                               'value': '"Convert two sets of sequences '
                                        'consisting of digital pictures into '
                                        'integers and add them together to get '
                                        'the numerical result."'}]},
                    {'_arity': 2,
                     '_content': 'FUP:"False"',
                     '_functor': "':'",
                     '_type': 'term',
                     'args': [{'_content': 'FUP',
                               '_type': 'variable',
                               'name': 'FUP'},
                              {'_content': '"False"',
                               '_type': 'constant',
                               'value': '"False"'}]}]}},
 {'_arity': 2,
  '_content': 'addition(X,Y,Z) :- langda(NET:"use mnist network",LLM:"Use a '
              'neural network to identify the numbers in two pictures and then '
              'calculate their sum.")',
  '_functor': ':-',
  '_head': {'_arity': 3,
            '_content': 'addition(X,Y,Z)',
            '_functor': 'addition',
            '_type': 'term',
            'args': [{'_content': 'X', '_type': 'variable', 'name': 'X'},
                     {'_content': 'Y', '_type': 'variable', 'name': 'Y'},
                     {'_content': 'Z', '_type': 'variable', 'name': 'Z'}]},
  '_type': 'clause',
  'args': [{'_arity': 3,
            '_content': 'addition(X,Y,Z)',
            '_functor': 'addition',
            '_type': 'term',
            'args': [{'_content': 'X', '_type': 'variable', 'name': 'X'},
                     {'_content': 'Y', '_type': 'variable', 'name': 'Y'},
                     {'_content': 'Z', '_type': 'variable', 'name': 'Z'}]},
           {'_arity': 2,
            '_content': 'langda(NET:"use mnist network",LLM:"Use a neural '
                        'network to identify the numbers in two pictures and '
                        'then calculate their sum.")',
            '_functor': 'langda',
            '_type': 'term',
            'args': [{'_arity': 2,
                      '_content': 'NET:"use mnist network"',
                      '_functor': "':'",
                      '_type': 'term',
                      'args': [{'_content': 'NET',
                                '_type': 'variable',
                                'name': 'NET'},
                               {'_content': '"use mnist network"',
                                '_type': 'constant',
                                'value': '"use mnist network"'}]},
                     {'_arity': 2,
                      '_content': 'LLM:"Use a neural network to identify the '
                                  'numbers in two pictures and then calculate '
                                  'their sum."',
                      '_functor': "':'",
                      '_type': 'term',
                      'args': [{'_content': 'LLM',
                                '_type': 'variable',
                                'name': 'LLM'},
                               {'_content': '"Use a neural network to identify '
                                            'the numbers in two pictures and '
                                            'then calculate their sum."',
                                '_type': 'constant',
                                'value': '"Use a neural network to identify '
                                         'the numbers in two pictures and then '
                                         'calculate their sum."'}]}]}],
  'body': {'_arity': 2,
           '_content': 'langda(NET:"use mnist network",LLM:"Use a neural '
                       'network to identify the numbers in two pictures and '
                       'then calculate their sum.")',
           '_functor': 'langda',
           '_type': 'term',
           'args': [{'_arity': 2,
                     '_content': 'NET:"use mnist network"',
                     '_functor': "':'",
                     '_type': 'term',
                     'args': [{'_content': 'NET',
                               '_type': 'variable',
                               'name': 'NET'},
                              {'_content': '"use mnist network"',
                               '_type': 'constant',
                               'value': '"use mnist network"'}]},
                    {'_arity': 2,
                     '_content': 'LLM:"Use a neural network to identify the '
                                 'numbers in two pictures and then calculate '
                                 'their sum."',
                     '_functor': "':'",
                     '_type': 'term',
                     'args': [{'_content': 'LLM',
                               '_type': 'variable',
                               'name': 'LLM'},
                              {'_content': '"Use a neural network to identify '
                                           'the numbers in two pictures and '
                                           'then calculate their sum."',
                               '_type': 'constant',
                               'value': '"Use a neural network to identify the '
                                        'numbers in two pictures and then '
                                        'calculate their sum."'}]}]}}]