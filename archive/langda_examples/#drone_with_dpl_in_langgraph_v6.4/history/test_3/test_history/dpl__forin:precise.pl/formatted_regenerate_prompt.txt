System: You are a helpful assistant that helps the user to generate deepproblog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to regenerate the code in each <langda> block inside <Code>
in each <langda> block, <Report> shows why the <Current_Code> need to be regenerated, please regenerate the code according based on these information.
<Code>
insertion_sort([], []).
insertion_sort([H|T], Sorted) :-
 
<Langda> Information of 1st Placeholder:
<Current_Code>insertion_sort([], []).
insertion_sort([H|T], Sorted) :-
    insertion_sort(T, SortedTail),
    insert_element(H, SortedTail, Sorted).

insert_element(X, [], [X]).
insert_element(X, [H|T], [X,H|T]) :-
    nonvar(X), nonvar(H),
    X =< H.
insert_element(X, [H|T], [H|RT]) :-
    nonvar(X), nonvar(H),
    X > H,
    insert_element(X, T, RT).

query(insertion_sort([3,1,2,5,7,12],X)).</Current_Code>
<Report>{'DA97FB01': {'HASH': 'DA97FB01', 'Report': "The code implements an insertion sort algorithm in Prolog. The main issues are:\n1. The error occurs because the comparison operators (=< and >) require both arguments to be ground terms, but the code doesn't properly ensure this.\n2. The nonvar/1 checks are present but don't prevent the comparison error because the variables might still be uninstantiated when the comparison is made.\n3. The logic for insertion sort is otherwise correct, recursively sorting the tail and inserting the head element.\n4. The query is properly formed to test the sorting of a specific list.", 'Need_regenerate': 'true'}}</Report>
<HASH> Hash tag of code: DA97FB01 </HASH>
<LLM> Requirements of Rules: 1.recursively sort the tail list, 2.insert the head element H into the sorted list </LLM></Langda>
.
insert_element(X, [], [X]).
insert_element(X, [H|T], [X,H|T]) :-
 X =< H.
insert_element(X, [H|T], [H|RT]) :-
 X > H,
 insert_element(X, T, RT).
 
query(insertion_sort([3,1,2,5,7,12],X)).
</Code>
<Final_Answer>
Please regenerate the block content that needs to be regenerated according to the analysis report in JSON form, for each code block using a single problog block of the following form:

For the first Code:
```problog 
{
    "HASH": "[Use the exact HASH provided in the requirements for first code]",
    "Code": "// Your fixed code here"
}
```

For the second Code:
```problog 
{
    "HASH": "[Use the exact HASH provided in the requirements for second code]",
    "Code": "// Your fixed code here"
}
``` 
</Final_Answer>