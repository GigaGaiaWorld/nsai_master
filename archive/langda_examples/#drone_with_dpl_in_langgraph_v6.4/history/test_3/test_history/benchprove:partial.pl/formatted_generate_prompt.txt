System: You are a helpful assistant that helps the user to generate deepproblog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>
% member/2 for ProbLog
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).
% --------- Basic meta-interpreter ---------
% Prove "true" always succeeds
prove(true).
prove(Goal) :-
	% For all other goals, use the clause/2 facts/rules defined in the program
	clause(Goal, Body),
	prove(Body).
% Prove compound goal A,B: prove A first, then prove B
prove((A,B)) :-
	prove(A),
	prove(B).
% --------- Extended logic processing ---------
prove(implies(P,Q)) :-
	
<Langda> Information of 1st Placeholder:
<HASH> Hash tag of code: 99C92279 </HASH>
<LLM> Requirements of Rules: P â‡’ Q, when P is unprovable or Q is provable </LLM></Langda>
.
prove(opposite(P)) :-
	
<Langda> Information of 2nd Placeholder:
<HASH> Hash tag of code: 1405B337 </HASH>
<LLM> Requirements of Rules: opposite(P): opposite/negation of P; that is, P is unprovable </LLM></Langda>
.
prove(expand(A,B)) :-
	expand(A,B).
prove(includes(Set,X)) :-
	member(X,Set).
prove(extend(List,Elem,Extended)) :-
	
<Langda> Information of 3rd Placeholder:
<HASH> Hash tag of code: C68F7B35 </HASH>
<LLM> Requirements of Rules: extend(List,Elem,Extended): add Elem to the head of List to get Extended </LLM></Langda>
.
prove(refute(P)) :-
	\+ prove(P).
% --------- Examples ---------- %
% Define some expand rules:
<Langda> Information of 4th Placeholder:
<HASH> Hash tag of code: 0F69CE0F </HASH>
<LLM> Requirements of Rules: define expand/2: Y is X*2 </LLM></Langda>
.
parent(alice, bob).
parent(bob, carol).
ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).
% --------- Queries ---------- %
query(prove(implies(parent(alice,bob), ancestor(alice,bob)))).
query(prove(opposite(parent(carol,alice)))).
query(prove(expand(double(3),6))).
query(prove(includes([a,b,c],b))).
query(prove(extend([1,2],3,[3,1,2]))).
</Code>
<Final_Answer>
Please generate each code in JSON form for each code block using a single problog block of the following form:

For the first Code:
```problog 
{
    "HASH": "[Use the exact HASH provided in the requirements for first code]",
    "Code": "// Your fixed code here"
}
```

For the second Code:
```problog 
{
    "HASH": "[Use the exact HASH provided in the requirements for second code]",
    "Code": "// Your fixed code here"
}
``` 
