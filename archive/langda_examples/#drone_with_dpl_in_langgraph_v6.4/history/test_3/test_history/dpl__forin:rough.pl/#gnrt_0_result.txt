Here's the DeepProbLog code for the interpretable insertion sort algorithm in JSON form:

```problog
{
    "HASH": "501F546D",
    "Code": "% Insertion sort in ProbLog\n\n% Base case: empty list is already sorted\ninsertion_sort([], []).\n\n% Recursive case: insert head into sorted tail\ninsertion_sort([H|T], Sorted) :-\n    insertion_sort(T, SortedTail),\n    insert(H, SortedTail, Sorted).\n\n% Inserting into empty list\ninsert(X, [], [X]).\n\n% Inserting into non-empty list\ninsert(X, [Y|Ys], [X,Y|Ys]) :-\n    X =< Y.\ninsert(X, [Y|Ys], [Y|Zs]) :-\n    X > Y,\n    insert(X, Ys, Zs).\n\n% Query example\nquery(insertion_sort([3,1,2,5,7,12],X))."
}
```

This code implements a standard insertion sort algorithm in ProbLog with:
1. A base case for the empty list
2. A recursive case that sorts the tail and inserts the head
3. Helper predicates for inserting an element into a sorted list
4. The example query provided in the requirements

The algorithm is interpretable as it clearly shows each step of the sorting process through recursion and pattern matching.