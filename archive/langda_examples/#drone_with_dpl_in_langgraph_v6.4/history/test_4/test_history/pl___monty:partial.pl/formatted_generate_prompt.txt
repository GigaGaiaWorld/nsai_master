System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>
% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).
member(X,[X|T]).
member(X,[H|T]) :- member(X,T).
0.5::open_door(A) ; 0.5::open_door(B) :-
 
<Langda> Information of 1st Placeholder:
<HASH> Hash tag of code: C5B4A895 </HASH>
<LLM> Requirements of Rules: When both unselected doors are empty (no prize), open one of them randomly. </LLM></Langda>
.
open_door(A) :-
 
<Langda> Information of 2nd Placeholder:
<HASH> Hash tag of code: 338175EC </HASH>
<LLM> Requirements of Rules: When one unselected door has no prize and the other unselected door has a prize, the host will definitely open the door without a prize. </LLM></Langda>
.
win_keep :-
 
<Langda> Information of 3rd Placeholder:
<HASH> Hash tag of code: B73E5085 </HASH>
<LLM> Requirements of Rules: The winning condition of keeping the original gate strategy: the original gate has a prize </LLM></Langda>
.
win_switch :-
 member(A, [1,2,3]),
 \+ select_door(A),
 prize(A),
 \+ open_door(A).
query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).
</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>
% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).
member(X,[X|T]).
member(X,[H|T]) :- member(X,T).
0.5::open_door(A) ; 0.5::open_door(B) :-
 
<Langda> Information of 1st Placeholder:
<HASH> Hash tag of code: C5B4A895 </HASH>
<LLM> Requirements of Rules: When both unselected doors are empty (no prize), open one of them randomly. </LLM></Langda>
.
open_door(A) :-
 
<Langda> Information of 2nd Placeholder:
<HASH> Hash tag of code: 338175EC </HASH>
<LLM> Requirements of Rules: When one unselected door has no prize and the other unselected door has a prize, the host will definitely open the door without a prize. </LLM></Langda>
.
win_keep :-
 
<Langda> Information of 3rd Placeholder:
<HASH> Hash tag of code: B73E5085 </HASH>
<LLM> Requirements of Rules: The winning condition of keeping the original gate strategy: the original gate has a prize </LLM></Langda>
.
win_switch :-
 member(A, [1,2,3]),
 \+ select_door(A),
 prize(A),
 \+ open_door(A).
query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).
</origin_code>
<generated_code>
% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).
member(X,[X|T]).
member(X,[H|T]) :- member(X,T).
0.5::open_door(A) ; 0.5::open_door(B) :-
    member(A, [1,2,3]),
    member(B, [1,2,3]),
    A \= B,
    \+ select_door(A),
    \+ select_door(B),
    \+ prize(A),
    \+ prize(B).
open_door(A) :-
    member(A, [1,2,3]),
    \+ select_door(A),
    \+ prize(A),
    member(B, [1,2,3]),
    B \= A,
    \+ select_door(B),
    prize(B).
win_keep :-
    select_door(A),
    prize(A).
win_switch :-
    member(A, [1,2,3]),
    \+ select_door(A),
    prize(A),
    \+ open_door(A).
query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).
<generated_code>
<Final_Answer> Each code block SHOULD ONLY CONTAINS THE EXACT CONTENT of <langda> blocks, for example:
for the following original code:
<Code>
head(X) :-
<Langda> Information of 1st Placeholder:
<HASH> Hash tag of code: XXXXABCD </HASH>
<LLM> Requirements of Rules:...  </LLM></Langda>
//other contents...
</Code>
if you extracted code contains "head(X) :-", it's wrong, because it's OUTSIDE the <langda> block

For each code block , extract it and format it as follows:
```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```
</Final_Answer>