System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to regenerate the code in each <langda> block inside <Code>
in each <langda> block, <Report> shows why the <Current_Code> need to be regenerated, please regenerate the code according based on these information.
<Code>
hole(X,Y,X,Y):-
 swap(X,Y,no_swap).
hole(X,Y,Y,X):-
 swap(X,Y,swap).
bubble([X],[],X).
bubble([H1,H2|T],[X1|T1],X):-
 hole(H1,H2,X1,X2),
 bubble([X2|T],T1,X).
bubblesort([],L,L).
bubblesort(L,L3,Sorted) :-
 
<Langda> Information of 1st Placeholder:
<Current_Code>bubble(L,L2,X),
  bubblesort(L2,[X|L3],Sorted).</Current_Code>
<Report>{'2971FD2F': {'HASH': '2971FD2F', 'Report': "The code block appears to be part of a recursive bubble sort implementation, but it's incomplete and lacks context. The predicate 'bubble(L,L2,X)' is not defined here, and the recursive call to bubblesort seems to be missing the base case. The code partially meets the requirement of recursively calling bubblesort and building the sorted list, but it needs the full implementation to be valid.", 'Need_regenerate': True}}</Report>
<HASH> Hash tag of code: 2971FD2F </HASH>
<LLM> Requirements of Rules: Recursively call bubblesort on L2 and put the current maximum value X into the sorted part [X|L3]. </LLM></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
{{LANGDA}}
.
 
query(forth_sort([3,1,2,5,7,12],X)).
</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>
hole(X,Y,X,Y):-
 swap(X,Y,no_swap).
hole(X,Y,Y,X):-
 swap(X,Y,swap).
bubble([X],[],X).
bubble([H1,H2|T],[X1|T1],X):-
 hole(H1,H2,X1,X2),
 bubble([X2|T],T1,X).
bubblesort([],L,L).
bubblesort(L,L3,Sorted) :-
 
<Langda> Information of 1st Placeholder:
<Current_Code>bubble(L,L2,X),
  bubblesort(L2,[X|L3],Sorted).</Current_Code>
<Report>{'2971FD2F': {'HASH': '2971FD2F', 'Report': "The code block appears to be part of a recursive bubble sort implementation, but it's incomplete and lacks context. The predicate 'bubble(L,L2,X)' is not defined here, and the recursive call to bubblesort seems to be missing the base case. The code partially meets the requirement of recursively calling bubblesort and building the sorted list, but it needs the full implementation to be valid.", 'Need_regenerate': True}}</Report>
<HASH> Hash tag of code: 2971FD2F </HASH>
<LLM> Requirements of Rules: Recursively call bubblesort on L2 and put the current maximum value X into the sorted part [X|L3]. </LLM></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
{{LANGDA}}
.
 
query(forth_sort([3,1,2,5,7,12],X)).
</origin_code>
<generated_code>
hole(X,Y,X,Y):-
  swap(X,Y,no_swap).
hole(X,Y,Y,X):-
  swap(X,Y,swap).
bubble([X],[],X).
bubble([H1,H2|T],[X1|T1],X):-
  hole(H1,H2,X1,X2),
  bubble([X2|T],T1,X).
bubblesort([],L,L).
bubblesort(L,L3,Sorted) :-
  bubble(L,L2,X),
  bubblesort(L2,[X|L3],Sorted).

forth_sort(L,L2) :- bubblesort(L,[],L2).

query(forth_sort([3,1,2,5,7,12],X)).
<generated_code>
<Final_Answer> Each code block SHOULD ONLY CONTAINS THE EXACT CONTENT of <langda> blocks, for example:
for the following original code:
<Code>
head(X) :-
<Langda> Information of 1st Placeholder:
<HASH> Hash tag of code: XXXXABCD </HASH>
<LLM> Requirements of Rules:...  </LLM></Langda>
//other contents...
</Code>
if you extracted code contains "head(X) :-", it's wrong, because it's OUTSIDE the <langda> block

For each code block , extract it and format it as follows:
```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```
</Final_Answer>