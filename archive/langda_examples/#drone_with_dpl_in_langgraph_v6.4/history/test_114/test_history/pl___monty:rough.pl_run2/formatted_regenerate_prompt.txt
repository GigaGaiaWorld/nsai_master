System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to regenerate the code in each <langda> block inside <Code>
in each <langda> block, <Report> shows why the <Code_Block> need to be regenerated, please regenerate the code according based on these information.
<Code>

% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).
member(X,[X|T]).
member(X,[H|T]) :- member(X,T).
<Langda>
<Code_Block>open_door(Door) :-
    select_door(Selected),
    prize(Prize),
    % Random Door Opening Rules
    (   Prize \= Selected,
        member(Door, [1,2,3]),
        Door \= Selected,
        Door \= Prize,
        % Host randomly opens one of the two empty doors with 50% probability
        (   Door = 1, 0.5::open_door(1)
        ;   Door = 2, 0.5::open_door(2)
        ;   Door = 3, 0.5::open_door(3)
        )
    ) ;
    % Deterministic Door Opening Rules
    (   Prize \= Selected,
        member(Door, [1,2,3]),
        Door \= Selected,
        Door \= Prize,
        % Host must open the empty door
        once(open_door(Door))
    ).</Code_Block>
<Report>The `open_door/1` predicate is overly complex and contains redundant logic. The probabilistic rules for opening doors are not correctly implemented, as they do not account for the host's behavior in all scenarios. The deterministic rules are also not clearly separated from the probabilistic ones, leading to potential confusion. Additionally, the use of `member/2` is unnecessary for door selection. The predicate should be simplified to clearly separate probabilistic and deterministic rules, and the host's behavior should be correctly modeled for both scenarios.</Report>
<HASH> Hash tag of code: 592D75CA </HASH>
<Requirements>Define open_door/1 Predicate: Random Door Opening Rules Scenario: The remaining two doors are neither selected by the player nor have any prizes. Behavior: The host randomly opens one of the two "empty doors" with a 50% probability. Deterministic Door Opening Rules Scenario: The remaining two doors are neither selected by the player, one of which has a prize and the other does not. Behavior: The host must open the "empty door". </Requirements></Langda>
.
win_keep :-
 select_door(A),
 prize(A).
win_switch :-
 member(A, [1,2,3]),
 \+ select_door(A),
 prize(A),
 \+ open_door(A).
query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).
member(X,[X|T]).
member(X,[H|T]) :- member(X,T).
<Langda>
<Code_Block>open_door(Door) :-
    select_door(Selected),
    prize(Prize),
    % Random Door Opening Rules
    (   Prize \= Selected,
        member(Door, [1,2,3]),
        Door \= Selected,
        Door \= Prize,
        % Host randomly opens one of the two empty doors with 50% probability
        (   Door = 1, 0.5::open_door(1)
        ;   Door = 2, 0.5::open_door(2)
        ;   Door = 3, 0.5::open_door(3)
        )
    ) ;
    % Deterministic Door Opening Rules
    (   Prize \= Selected,
        member(Door, [1,2,3]),
        Door \= Selected,
        Door \= Prize,
        % Host must open the empty door
        once(open_door(Door))
    ).</Code_Block>
<Report>The `open_door/1` predicate is overly complex and contains redundant logic. The probabilistic rules for opening doors are not correctly implemented, as they do not account for the host's behavior in all scenarios. The deterministic rules are also not clearly separated from the probabilistic ones, leading to potential confusion. Additionally, the use of `member/2` is unnecessary for door selection. The predicate should be simplified to clearly separate probabilistic and deterministic rules, and the host's behavior should be correctly modeled for both scenarios.</Report>
<HASH> Hash tag of code: 592D75CA </HASH>
<Requirements>Define open_door/1 Predicate: Random Door Opening Rules Scenario: The remaining two doors are neither selected by the player nor have any prizes. Behavior: The host randomly opens one of the two "empty doors" with a 50% probability. Deterministic Door Opening Rules Scenario: The remaining two doors are neither selected by the player, one of which has a prize and the other does not. Behavior: The host must open the "empty door". </Requirements></Langda>
.
win_keep :-
 select_door(A),
 prize(A).
win_switch :-
 member(A, [1,2,3]),
 \+ select_door(A),
 prize(A),
 \+ open_door(A).
query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).

</origin_code>
<generated_code>

% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).

% Simplified and corrected open_door/1 predicate
open_door(Door) :-
    select_door(Selected),
    prize(Prize),
    % Random Door Opening Rules
    (   Prize \= Selected,
        findall(D, (member(D, [1,2,3]), D \= Selected, D \= Prize), Doors),
        length(Doors, 2),
        member(Door, Doors),
        0.5::open_door(Door)
    ) ;
    % Deterministic Door Opening Rules
    (   Prize \= Selected,
        findall(D, (member(D, [1,2,3]), D \= Selected, D \= Prize), Doors),
        length(Doors, 1),
        member(Door, Doors),
        open_door(Door)
    ).

win_keep :-
    select_door(A),
    prize(A).
win_switch :-
    member(A, [1,2,3]),
    \+ select_door(A),
    prize(A),
    \+ open_door(A).
query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).

<generated_code>
<Final_Answer> 
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```
</Final_Answer>