Here are the extracted and formatted code blocks from the `<generated_code>` that correspond to the `<langda>` blocks in the `<origin_code>`:

```problog
{"HASH": "5E40E418", "Code": "stack_op(sort, Stack, SortedStack) :-\n    get_top_n(Stack, 3, Elements, RestStack),\n    insertion_sort(Elements, SortedElements),\n    append(SortedElements, RestStack, SortedStack).\n\nget_top_n(Stack, N, Elements, Rest) :-\n    length(Elements, N),\n    append(Elements, Rest, Stack)."}
```

```problog
{"HASH": "5E40E418", "Code": "insertion_sort(List, Sorted) :-\n    insertion_sort(List, [], Sorted).\n\ninsertion_sort([], Acc, Acc).\ninsertion_sort([H|T], Acc, Sorted) :-\n    insert(H, Acc, NewAcc),\n    insertion_sort(T, NewAcc, Sorted).\n\ninsert(X, [], [X]).\ninsert(X, [Y|T], [X,Y|T]) :-\n    X =< Y.\ninsert(X, [Y|T], [Y|NT]) :-\n    X > Y,\n    insert(X, T, NT)."}
```

Note: The `HASH` value remains the same (`5E40E418`) for both code blocks since they both belong to the same original `<langda>` block. The first JSON contains the original code block with the `sort` operation and `get_top_n` helper, while the second JSON contains the newly implemented `insertion_sort` predicate that was missing in the original code.