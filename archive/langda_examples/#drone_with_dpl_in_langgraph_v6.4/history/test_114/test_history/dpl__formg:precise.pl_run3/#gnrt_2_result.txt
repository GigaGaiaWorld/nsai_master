Based on the given origin_code and generated_code, I'll extract and format the code block that corresponds to the <Langda> section in the origin_code. Here's the JSON formatted result:

```problog
{
  "HASH": "95E704F2",
  "Code": "length(List, Len),\n    (Len > 1 ->\n        Half is Len // 2,\n        length(Left, Half),\n        append(Left, Right, List),\n        merge_sort(Left, SortedLeft),\n        merge_sort(Right, SortedRight),\n        merge(SortedLeft, SortedRight, Sorted)\n    ;\n        Sorted = List\n    )"
}
```

This extracted code block:
1. Matches the hash from the original <Langda> section
2. Contains the completed implementation that addresses all requirements:
   - Gets the length of the current list
   - Includes recursive boundary judgment (Len > 1)
   - Splits the list into Left and Right parts
   - Uses proper Prolog syntax with the if-then-else structure
   - Integrates the sorting logic directly without the redundant split_list predicate