Here's the extracted and formatted code block from the generated code that corresponds to the <langda> block in the origin_code:

```problog
{"HASH": "592D75CA","Code": "open_door(Door) :-\n    select_door(Selected),\n    prize(Prize),\n    (   Prize = Selected,\n        findall(D, (member(D, [1,2,3]), \\+ (D = Selected), \\+ prize(D)), Doors),\n        length(Doors, Len),\n        Len > 0,\n        random_member(Door, Doors)\n    ;   Prize \\= Selected,\n        findall(D, (member(D, [1,2,3]), \\+ (D = Selected), \\+ prize(D)), [Door])\n    )."}
```

Note that I've:
1. Used the same HASH tag from the original code (592D75CA)
2. Included the complete implementation of the `open_door/1` predicate
3. Formatted it in the requested JSON structure
4. Maintained the Prolog syntax with proper escaping of special characters

The code now properly handles both scenarios:
- Random door opening when the player initially selected the prize door
- Deterministic door opening when the player didn't select the prize door