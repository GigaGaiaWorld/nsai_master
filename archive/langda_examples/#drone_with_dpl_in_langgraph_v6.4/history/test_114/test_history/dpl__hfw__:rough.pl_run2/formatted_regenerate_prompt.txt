System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to regenerate the code in each <langda> block inside <Code>
in each <langda> block, <Report> shows why the <Code_Block> need to be regenerated, please regenerate the code according based on these information.
<Code>

detect_number(image_0, 0).
detect_number(image_1, 1).
detect_number(image_2, 2).
detect_number(image_3, 3).
detect_number(image_4, 4).
detect_number(image_5, 5).
detect_number(image_6, 6).
detect_number(image_7, 7).
detect_number(image_8, 8).
detect_number(image_9, 9).
detect_operator(image_plus, +).
detect_operator(image_minus, -).
detect_operator(image_multiply, *).
detect_operator(image_divide, /).
detect_all([N], [N2]) :- 
 detect_number(N, N2).
detect_all([N,O|T], [N2,O2|T2]) :- 
 detect_number(N, N2), 
 detect_operator(O, O2), 
 detect_all(T, T2).
almost_equal(X, Y) :- 
 ground(Y), 
 abs(X - Y) < 0.0001.
almost_equal(X, Y) :- 
 var(Y), 
 Y is float(X).
expression(Images, Result) :- 
 detect_all(Images, Symbols), 
 parse(Symbols, Result).
<Langda>
<Code_Block>parse([N], N).
parse(Expr, Result) :-
    split_lowest_precedence(Expr, Left, Op, Right),
    parse(Left, LeftResult),
    parse(Right, RightResult),
    apply_operator(Op, LeftResult, RightResult, Result).</Code_Block>
<Report>The `parse/2` predicate is logically structured but incomplete. It requires two supporting predicates (`split_lowest_precedence/4` and `apply_operator/4`) that are missing, causing runtime errors. The current implementation fails to handle operator precedence or basic arithmetic operations. To meet requirements, it needs regeneration with: 1) Operator precedence handling via `split_lowest_precedence/4`, 2) Arithmetic logic via `apply_operator/4`, and 3) Proper recursion termination for single-number expressions.</Report>
<HASH> Hash tag of code: 190031BC </HASH>
<Requirements>Recursive expression evaluator: parse/2, which can perform the following operations:  Addition processing  Subtraction processing  Multiplication processing  Division processing. </Requirements></Langda>
query(expression([image_2, image_divide, image_3, image_plus, image_3, image_minus, image_2, image_multiply, image_7], X)).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

detect_number(image_0, 0).
detect_number(image_1, 1).
detect_number(image_2, 2).
detect_number(image_3, 3).
detect_number(image_4, 4).
detect_number(image_5, 5).
detect_number(image_6, 6).
detect_number(image_7, 7).
detect_number(image_8, 8).
detect_number(image_9, 9).
detect_operator(image_plus, +).
detect_operator(image_minus, -).
detect_operator(image_multiply, *).
detect_operator(image_divide, /).
detect_all([N], [N2]) :- 
 detect_number(N, N2).
detect_all([N,O|T], [N2,O2|T2]) :- 
 detect_number(N, N2), 
 detect_operator(O, O2), 
 detect_all(T, T2).
almost_equal(X, Y) :- 
 ground(Y), 
 abs(X - Y) < 0.0001.
almost_equal(X, Y) :- 
 var(Y), 
 Y is float(X).
expression(Images, Result) :- 
 detect_all(Images, Symbols), 
 parse(Symbols, Result).
<Langda>
<Code_Block>parse([N], N).
parse(Expr, Result) :-
    split_lowest_precedence(Expr, Left, Op, Right),
    parse(Left, LeftResult),
    parse(Right, RightResult),
    apply_operator(Op, LeftResult, RightResult, Result).</Code_Block>
<Report>The `parse/2` predicate is logically structured but incomplete. It requires two supporting predicates (`split_lowest_precedence/4` and `apply_operator/4`) that are missing, causing runtime errors. The current implementation fails to handle operator precedence or basic arithmetic operations. To meet requirements, it needs regeneration with: 1) Operator precedence handling via `split_lowest_precedence/4`, 2) Arithmetic logic via `apply_operator/4`, and 3) Proper recursion termination for single-number expressions.</Report>
<HASH> Hash tag of code: 190031BC </HASH>
<Requirements>Recursive expression evaluator: parse/2, which can perform the following operations:  Addition processing  Subtraction processing  Multiplication processing  Division processing. </Requirements></Langda>
query(expression([image_2, image_divide, image_3, image_plus, image_3, image_minus, image_2, image_multiply, image_7], X)).

</origin_code>
<generated_code>

detect_number(image_0, 0).
detect_number(image_1, 1).
detect_number(image_2, 2).
detect_number(image_3, 3).
detect_number(image_4, 4).
detect_number(image_5, 5).
detect_number(image_6, 6).
detect_number(image_7, 7).
detect_number(image_8, 8).
detect_number(image_9, 9).
detect_operator(image_plus, +).
detect_operator(image_minus, -).
detect_operator(image_multiply, *).
detect_operator(image_divide, /).
detect_all([N], [N2]) :- 
 detect_number(N, N2).
detect_all([N,O|T], [N2,O2|T2]) :- 
 detect_number(N, N2), 
 detect_operator(O, O2), 
 detect_all(T, T2).
almost_equal(X, Y) :- 
 ground(Y), 
 abs(X - Y) < 0.0001.
almost_equal(X, Y) :- 
 var(Y), 
 Y is float(X).
expression(Images, Result) :- 
 detect_all(Images, Symbols), 
 parse(Symbols, Result).

% Regenerated parse/2 predicate with operator precedence and arithmetic logic
parse([N], N).
parse(Expr, Result) :-
    split_lowest_precedence(Expr, Left, Op, Right),
    parse(Left, LeftResult),
    parse(Right, RightResult),
    apply_operator(Op, LeftResult, RightResult, Result).

% Supporting predicate to split the expression at the lowest precedence operator
split_lowest_precedence(Expr, Left, Op, Right) :-
    find_operator(Expr, Op, Index),
    split_at(Expr, Index, Left, Right).

% Find the operator with the lowest precedence in the expression
find_operator([H|T], Op, Index) :-
    find_operator(T, Op, 1, Index).

find_operator([Op|_], Op, Index, Index) :-
    operator_precedence(Op, _).
find_operator([_|T], Op, CurrentIndex, Index) :-
    NextIndex is CurrentIndex + 1,
    find_operator(T, Op, NextIndex, Index).

% Define operator precedence (lower value means higher precedence)
operator_precedence(*, 2).
operator_precedence(/, 2).
operator_precedence(+, 3).
operator_precedence(-, 3).

% Split the list at the given index
split_at(List, Index, Left, Right) :-
    length(Left, Index),
    append(Left, Right, List).

% Apply the arithmetic operation
apply_operator(+, A, B, Result) :- Result is A + B.
apply_operator(-, A, B, Result) :- Result is A - B.
apply_operator(*, A, B, Result) :- Result is A * B.
apply_operator(/, A, B, Result) :- Result is A / B.

query(expression([image_2, image_divide, image_3, image_plus, image_3, image_minus, image_2, image_multiply, image_7], X)).

<generated_code>
<Final_Answer> 
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```
</Final_Answer>