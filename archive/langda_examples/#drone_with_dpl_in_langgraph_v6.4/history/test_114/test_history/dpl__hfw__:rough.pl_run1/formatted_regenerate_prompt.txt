System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to regenerate the code in each <langda> block inside <Code>
in each <langda> block, <Report> shows why the <Code_Block> need to be regenerated, please regenerate the code according based on these information.
<Code>

detect_number(image_0, 0).
detect_number(image_1, 1).
detect_number(image_2, 2).
detect_number(image_3, 3).
detect_number(image_4, 4).
detect_number(image_5, 5).
detect_number(image_6, 6).
detect_number(image_7, 7).
detect_number(image_8, 8).
detect_number(image_9, 9).
detect_operator(image_plus, +).
detect_operator(image_minus, -).
detect_operator(image_multiply, *).
detect_operator(image_divide, /).
detect_all([N], [N2]) :- 
 detect_number(N, N2).
detect_all([N,O|T], [N2,O2|T2]) :- 
 detect_number(N, N2), 
 detect_operator(O, O2), 
 detect_all(T, T2).
almost_equal(X, Y) :- 
 ground(Y), 
 abs(X - Y) < 0.0001.
almost_equal(X, Y) :- 
 var(Y), 
 Y is float(X).
expression(Images, Result) :- 
 detect_all(Images, Symbols), 
 parse(Symbols, Result).
<Langda>
<Code_Block>parse([N], N).
parse(List, Result) :-
    (select(N1, '*', N2, Rest, List) ; select(N1, '/', N2, Rest, List)),
    parse([N2 | Rest], Temp),
    (N1 == '*' -> Result is N1 * Temp ; (Temp =:= 0 -> fail ; Result is N1 / Temp)).
parse(List, Result) :-
    (select(N1, '+', N2, Rest, List) ; select(N1, '-', N2, Rest, List)),
    parse([N2 | Rest], Temp),
    (N1 == '+' -> Result is N1 + Temp ; Result is N1 - Temp)).
select(N1, Op, N2, Rest, [N1, Op, N2 | Rest]).</Code_Block>
<Report>The 'parse/2' predicate contains critical syntax errors that prevent proper execution, as evidenced by the 'UnmatchedCharacter' error during testing. The implementation attempts to handle operator precedence through nested conditionals and a custom 'select/5' predicate, which appears incompatible with ProbLog's syntax rules. The predicate fails to properly parse arithmetic expressions due to these structural issues. Additionally, the division handling lacks proper error messaging for division-by-zero cases.</Report>
<HASH> Hash tag of code: 190031BC </HASH>
<Requirements>Recursive expression evaluator: parse/2, which can perform the following operations:  Addition processing  Subtraction processing  Multiplication processing  Division processing. </Requirements></Langda>
query(expression([image_2, image_divide, image_3, image_plus, image_3, image_minus, image_2, image_multiply, image_7], X)).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

detect_number(image_0, 0).
detect_number(image_1, 1).
detect_number(image_2, 2).
detect_number(image_3, 3).
detect_number(image_4, 4).
detect_number(image_5, 5).
detect_number(image_6, 6).
detect_number(image_7, 7).
detect_number(image_8, 8).
detect_number(image_9, 9).
detect_operator(image_plus, +).
detect_operator(image_minus, -).
detect_operator(image_multiply, *).
detect_operator(image_divide, /).
detect_all([N], [N2]) :- 
 detect_number(N, N2).
detect_all([N,O|T], [N2,O2|T2]) :- 
 detect_number(N, N2), 
 detect_operator(O, O2), 
 detect_all(T, T2).
almost_equal(X, Y) :- 
 ground(Y), 
 abs(X - Y) < 0.0001.
almost_equal(X, Y) :- 
 var(Y), 
 Y is float(X).
expression(Images, Result) :- 
 detect_all(Images, Symbols), 
 parse(Symbols, Result).
<Langda>
<Code_Block>parse([N], N).
parse(List, Result) :-
    (select(N1, '*', N2, Rest, List) ; select(N1, '/', N2, Rest, List)),
    parse([N2 | Rest], Temp),
    (N1 == '*' -> Result is N1 * Temp ; (Temp =:= 0 -> fail ; Result is N1 / Temp)).
parse(List, Result) :-
    (select(N1, '+', N2, Rest, List) ; select(N1, '-', N2, Rest, List)),
    parse([N2 | Rest], Temp),
    (N1 == '+' -> Result is N1 + Temp ; Result is N1 - Temp)).
select(N1, Op, N2, Rest, [N1, Op, N2 | Rest]).</Code_Block>
<Report>The 'parse/2' predicate contains critical syntax errors that prevent proper execution, as evidenced by the 'UnmatchedCharacter' error during testing. The implementation attempts to handle operator precedence through nested conditionals and a custom 'select/5' predicate, which appears incompatible with ProbLog's syntax rules. The predicate fails to properly parse arithmetic expressions due to these structural issues. Additionally, the division handling lacks proper error messaging for division-by-zero cases.</Report>
<HASH> Hash tag of code: 190031BC </HASH>
<Requirements>Recursive expression evaluator: parse/2, which can perform the following operations:  Addition processing  Subtraction processing  Multiplication processing  Division processing. </Requirements></Langda>
query(expression([image_2, image_divide, image_3, image_plus, image_3, image_minus, image_2, image_multiply, image_7], X)).

</origin_code>
<generated_code>

detect_number(image_0, 0).
detect_number(image_1, 1).
detect_number(image_2, 2).
detect_number(image_3, 3).
detect_number(image_4, 4).
detect_number(image_5, 5).
detect_number(image_6, 6).
detect_number(image_7, 7).
detect_number(image_8, 8).
detect_number(image_9, 9).
detect_operator(image_plus, '+'). 
detect_operator(image_minus, '-'). 
detect_operator(image_multiply, '*'). 
detect_operator(image_divide, '/').

detect_all([N], [N2]) :- 
    detect_number(N, N2).
detect_all([N,O|T], [N2,O2|T2]) :- 
    detect_number(N, N2), 
    detect_operator(O, O2), 
    detect_all(T, T2).

almost_equal(X, Y) :- 
    ground(Y), 
    abs(X - Y) < 0.0001.
almost_equal(X, Y) :- 
    var(Y), 
    Y is float(X).

expression(Images, Result) :- 
    detect_all(Images, Symbols), 
    parse(Symbols, Result).

parse([N], N).
parse([N1, '*', N2 | Rest], Result) :-
    parse([N2 | Rest], Temp),
    Result is N1 * Temp.
parse([N1, '/', N2 | Rest], Result) :-
    parse([N2 | Rest], Temp),
    (Temp =:= 0 -> fail ; Result is N1 / Temp).
parse([N1, '+', N2 | Rest], Result) :-
    parse([N2 | Rest], Temp),
    Result is N1 + Temp.
parse([N1, '-', N2 | Rest], Result) :-
    parse([N2 | Rest], Temp),
    Result is N1 - Temp.

query(expression([image_2, image_divide, image_3, image_plus, image_3, image_minus, image_2, image_multiply, image_7], X)).

<generated_code>
<Final_Answer> 
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```
</Final_Answer>