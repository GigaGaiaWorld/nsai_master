Here are the extracted code blocks from the `<generated_code>` that correspond to the `<langda>` placeholder in the `<origin_code>`, formatted in the requested JSON format:

```problog
{"HASH": "190031BC","Code": "parse([N], N).\nparse([N1, Op, N2 | Rest], Result) :-\n    Op == '+',\n    parse([N2 | Rest], Temp),\n    Result is N1 + Temp.\nparse([N1, Op, N2 | Rest], Result) :-\n    Op == '-',\n    parse([N2 | Rest], Temp),\n    Result is N1 - Temp.\nparse([N1, Op, N2 | Rest], Result) :-\n    Op == '*',\n    parse([N2 | Rest], Temp),\n    Result is N1 * Temp.\nparse([N1, Op, N2 | Rest], Result) :-\n    Op == '/',\n    parse([N2 | Rest], Temp),\n    Result is N1 / Temp."}
```

This is the recursive expression evaluator `parse/2` that handles addition, subtraction, multiplication, and division operations as specified in the requirements. The code matches the hash tag `190031BC` from the placeholder information.