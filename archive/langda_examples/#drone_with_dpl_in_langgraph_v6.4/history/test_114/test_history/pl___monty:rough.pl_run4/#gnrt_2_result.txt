Here are the extracted and formatted code blocks from the generated code that correspond to the <langda> block in the origin code:

```problog
{"HASH": "592D75CA", "Code": "open_door(Door) :-\n    select_door(Selected),\n    prize(PrizeDoor),\n    % Find all doors that are neither selected nor have a prize\n    findall(D, (member(D, [1,2,3]), \\+ select_door(D), \\+ prize(D)), Doors),\n    length(Doors, L),\n    % If there is only one empty door, open it deterministically\n    (L =:= 1 ->\n        member(Door, Doors)\n    ;\n        % If there are two empty doors, choose one with 50% probability\n        0.5::door_choice(Door, Doors)\n    )."}
```

```problog
{"HASH": "592D75CA", "Code": "door_choice(Door, [D1, D2]) :-\n    0.5::Door = D1 ; 0.5::Door = D2."}
```

Note that I've included both the main `open_door` predicate and the auxiliary `door_choice` predicate since they work together to implement the required functionality. Both are part of the solution to the original <langda> block requirements. The hash remains the same for both as they belong to the same logical unit addressing the original requirements.