System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>

zebra(Houses) :-
	houses(Houses),
	
<Langda> Information:
<HASH> Hash tag of code: CD409C7B </HASH>
<Requirements> 	House arrangement: 		There are 5 houses, arranged in order (houses(Houses)). 		 	Rules: 		The owner of the red house is English. 		The Spanish has a dog. 		The owner of the green house drinks coffee. 		The Ukrainian drinks tea. 		The green house is to the right of the ivory house (right next to it). 		The snail owner smokes Winstons. 		The yellow house owner smokes Kools. 		The middle house drinks milk (the 3rd house). 		The first house owner is Norwegian. 		The Chesterfields owner lives next door to the fox owner. 		The Kools owner lives next door to the horse owner. 		The orange juice drinker smokes Lucky Strikes. 		The Japanese smoke Parliaments. 		The Norwegian lives next to the blue house. 		 		Someone has a zebra. 		Someone drink water. </Requirements></Langda>
.
houses([
	house(_, _, _, _, _),
	house(_, _, _, _, _),
	house(_, _, _, _, _),
	house(_, _, _, _, _),
	house(_, _, _, _, _)
]).
right_of(A, B, [B, A | _]).
right_of(A, B, [_ | Y]) :- right_of(A, B, Y).
next_to(A, B, [A, B | _]).
next_to(A, B, [B, A | _]).
next_to(A, B, [_ | Y]) :- next_to(A, B, Y).
my_member(X, [X|_]).
my_member(X, [_|Y]) :- my_member(X, Y).
query(zebra(Houses)).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

zebra(Houses) :-
	houses(Houses),
	
<Langda> Information:
<HASH> Hash tag of code: CD409C7B </HASH>
<Requirements> 	House arrangement: 		There are 5 houses, arranged in order (houses(Houses)). 		 	Rules: 		The owner of the red house is English. 		The Spanish has a dog. 		The owner of the green house drinks coffee. 		The Ukrainian drinks tea. 		The green house is to the right of the ivory house (right next to it). 		The snail owner smokes Winstons. 		The yellow house owner smokes Kools. 		The middle house drinks milk (the 3rd house). 		The first house owner is Norwegian. 		The Chesterfields owner lives next door to the fox owner. 		The Kools owner lives next door to the horse owner. 		The orange juice drinker smokes Lucky Strikes. 		The Japanese smoke Parliaments. 		The Norwegian lives next to the blue house. 		 		Someone has a zebra. 		Someone drink water. </Requirements></Langda>
.
houses([
	house(_, _, _, _, _),
	house(_, _, _, _, _),
	house(_, _, _, _, _),
	house(_, _, _, _, _),
	house(_, _, _, _, _)
]).
right_of(A, B, [B, A | _]).
right_of(A, B, [_ | Y]) :- right_of(A, B, Y).
next_to(A, B, [A, B | _]).
next_to(A, B, [B, A | _]).
next_to(A, B, [_ | Y]) :- next_to(A, B, Y).
my_member(X, [X|_]).
my_member(X, [_|Y]) :- my_member(X, Y).
query(zebra(Houses)).

</origin_code>
<generated_code>

zebra(Houses) :-
    houses(Houses),
    
    % House arrangement: 5 houses
    houses([
        house(_, _, _, _, _),
        house(_, _, _, _, _),
        house(_, _, _, _, _),
        house(_, _, _, _, _),
        house(_, _, _, _, _)
    ]),
    
    % The owner of the red house is English
    my_member(house(red, english, _, _, _), Houses),
    
    % The Spanish has a dog
    my_member(house(_, spanish, _, dog, _), Houses),
    
    % The owner of the green house drinks coffee
    my_member(house(green, _, coffee, _, _), Houses),
    
    % The Ukrainian drinks tea
    my_member(house(_, ukrainian, tea, _, _), Houses),
    
    % The green house is to the right of the ivory house (right next to it)
    right_of(house(green, _, _, _, _), house(ivory, _, _, _, _), Houses),
    
    % The snail owner smokes Winstons
    my_member(house(_, _, _, snail, winstons), Houses),
    
    % The yellow house owner smokes Kools
    my_member(house(yellow, _, _, _, kools), Houses),
    
    % The middle house drinks milk (the 3rd house)
    Houses = [_, _, house(_, _, milk, _, _), _, _],
    
    % The first house owner is Norwegian
    Houses = [house(_, norwegian, _, _, _) | _],
    
    % The Chesterfields owner lives next door to the fox owner
    next_to(house(_, _, _, _, chesterfields), house(_, _, _, fox, _), Houses),
    
    % The Kools owner lives next door to the horse owner
    next_to(house(_, _, _, _, kools), house(_, _, _, horse, _), Houses),
    
    % The orange juice drinker smokes Lucky Strikes
    my_member(house(_, _, orange_juice, _, lucky_strikes), Houses),
    
    % The Japanese smoke Parliaments
    my_member(house(_, japanese, _, _, parliaments), Houses),
    
    % The Norwegian lives next to the blue house
    next_to(house(_, norwegian, _, _, _), house(blue, _, _, _, _), Houses),
    
    % Someone has a zebra
    my_member(house(_, _, _, zebra, _), Houses),
    
    % Someone drinks water
    my_member(house(_, _, water, _, _), Houses).

houses([
    house(_, _, _, _, _),
    house(_, _, _, _, _),
    house(_, _, _, _, _),
    house(_, _, _, _, _),
    house(_, _, _, _, _)
]).

right_of(A, B, [B, A | _]).
right_of(A, B, [_ | Y]) :- right_of(A, B, Y).
next_to(A, B, [A, B | _]).
next_to(A, B, [B, A | _]).
next_to(A, B, [_ | Y]) :- next_to(A, B, Y).
my_member(X, [X|_]).
my_member(X, [_|Y]) :- my_member(X, Y).
query(zebra(Houses)).

<generated_code>
<Final_Answer>
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```
</Final_Answer>