System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>

<Langda> Information:
<HASH> Hash tag of code: 47D659C8 </HASH>
<Requirements>This Prolog program should implement an interpretable bubblesort/3 algorithm. </Requirements></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
query(forth_sort([3,1,2,5,7,12],X)).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

<Langda> Information:
<HASH> Hash tag of code: 47D659C8 </HASH>
<Requirements>This Prolog program should implement an interpretable bubblesort/3 algorithm. </Requirements></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
query(forth_sort([3,1,2,5,7,12],X)).

</origin_code>
<generated_code>

% Interpretable Bubble Sort in ProbLog

% Base case: If the list is empty, return the accumulator as the sorted list.
bubblesort([], Acc, Acc).

% Recursive case: Perform a pass of bubble sort and recurse.
bubblesort(List, Acc, Sorted) :-
    bubble_pass(List, NewList, Swapped),
    (Swapped == true ->
        bubblesort(NewList, Acc, Sorted)
    ;
        append(NewList, Acc, Sorted)
    ).

% Perform a single pass of bubble sort.
% If a swap occurs, set Swapped to true.
bubble_pass([X, Y | Rest], [Y | NewRest], true) :-
    X > Y,
    bubble_pass([X | Rest], NewRest, _).

bubble_pass([X, Y | Rest], [X | NewRest], Swapped) :-
    X =< Y,
    bubble_pass([Y | Rest], NewRest, Swapped).

% Base case for bubble_pass: single element or empty list.
bubble_pass([X], [X], false).

% Query to test the bubblesort algorithm.
query(forth_sort([3,1,2,5,7,12], X)).

% Helper predicate to call bubblesort with an empty accumulator.
forth_sort(L, L2) :- bubblesort(L, [], L2).

<generated_code>
<Final_Answer>
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```
</Final_Answer>