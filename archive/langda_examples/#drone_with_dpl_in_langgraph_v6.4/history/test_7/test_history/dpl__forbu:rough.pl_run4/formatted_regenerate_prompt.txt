System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to regenerate the code in each <langda> block inside <Code>
in each <langda> block, <Report> shows why the <Code_Block> need to be regenerated, please regenerate the code according based on these information.
<Code>

<Langda>
<Code_Block>bubblesort([], Acc, Acc).

bubblesort(List, Acc, Sorted) :-
    bubble_pass(List, [], NewList, Max),
    bubblesort(NewList, [Max|Acc], Sorted).

bubble_pass([X], Acc, Acc, X).

bubble_pass([X, Y|T], Acc, NewList, Max) :-
    (X > Y ->
        bubble_pass([X|T], [Y|Acc], NewList, Max)
    ;
        bubble_pass([Y|T], [X|Acc], NewList, Max)
    ).</Code_Block>
<Report>The `bubblesort/3` and `bubble_pass/4` predicates are logically correct for Prolog but contain syntax incompatible with ProbLog. Specifically, the `->/2` operator in `bubble_pass/4` is not supported in ProbLog, causing a syntax error. The code needs to be regenerated to replace the conditional operator with ProbLog-compatible logic (e.g., separate clauses for `X > Y` and `X =< Y` cases). The sorting algorithm itself is correctly implemented for Prolog but requires adaptation for ProbLog.</Report>
<HASH> Hash tag of code: 47D659C8 </HASH>
<Requirements>This Prolog program should implement an interpretable bubblesort/3 algorithm. </Requirements></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
query(forth_sort([3,1,2,5,7,12],X)).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

<Langda>
<Code_Block>bubblesort([], Acc, Acc).

bubblesort(List, Acc, Sorted) :-
    bubble_pass(List, [], NewList, Max),
    bubblesort(NewList, [Max|Acc], Sorted).

bubble_pass([X], Acc, Acc, X).

bubble_pass([X, Y|T], Acc, NewList, Max) :-
    (X > Y ->
        bubble_pass([X|T], [Y|Acc], NewList, Max)
    ;
        bubble_pass([Y|T], [X|Acc], NewList, Max)
    ).</Code_Block>
<Report>The `bubblesort/3` and `bubble_pass/4` predicates are logically correct for Prolog but contain syntax incompatible with ProbLog. Specifically, the `->/2` operator in `bubble_pass/4` is not supported in ProbLog, causing a syntax error. The code needs to be regenerated to replace the conditional operator with ProbLog-compatible logic (e.g., separate clauses for `X > Y` and `X =< Y` cases). The sorting algorithm itself is correctly implemented for Prolog but requires adaptation for ProbLog.</Report>
<HASH> Hash tag of code: 47D659C8 </HASH>
<Requirements>This Prolog program should implement an interpretable bubblesort/3 algorithm. </Requirements></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
query(forth_sort([3,1,2,5,7,12],X)).

</origin_code>
<generated_code>

bubblesort([], Acc, Acc).

bubblesort(List, Acc, Sorted) :-
    bubble_pass(List, [], NewList, Max),
    bubblesort(NewList, [Max|Acc], Sorted).

bubble_pass([X], Acc, Acc, X).

bubble_pass([X, Y|T], Acc, NewList, Max) :-
    X > Y,
    bubble_pass([X|T], [Y|Acc], NewList, Max).

bubble_pass([X, Y|T], Acc, NewList, Max) :-
    X =< Y,
    bubble_pass([Y|T], [X|Acc], NewList, Max).

forth_sort(L, L2) :- bubblesort(L, [], L2).
query(forth_sort([3,1,2,5,7,12], X)).

<generated_code>
<Final_Answer> 
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```
</Final_Answer>