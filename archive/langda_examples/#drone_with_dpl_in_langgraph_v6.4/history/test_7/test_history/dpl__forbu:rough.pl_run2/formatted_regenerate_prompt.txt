System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to regenerate the code in each <langda> block inside <Code>
in each <langda> block, <Report> shows why the <Code_Block> need to be regenerated, please regenerate the code according based on these information.
<Code>

<Langda>
<Code_Block>bubblesort([], Acc, Acc).

bubblesort(List, Acc, Sorted) :-
    bubble_pass(List, [], Updated, Flag),
    (Flag = 0 ->
        append(Acc, Updated, Sorted)
    ;
        append(Acc, [Updated], NewAcc),
        bubblesort(Updated, NewAcc, Sorted)
    ).

bubble_pass([X, Y | T], Acc, Updated, Flag) :-
    (X > Y ->
        bubble_pass([Y | T], [X | Acc], Updated, 1)
    ;
        bubble_pass([X | T], [Y | Acc], Updated, Flag)
    ).

bubble_pass([X], Acc, [X | Acc], 0).</Code_Block>
<Report>The code block contains several critical issues that prevent it from functioning correctly in ProbLog. The main problems are: 1) Use of unsupported `->` conditional statements which ProbLog cannot interpret, 2) Incorrect structure of `bubblesort/3` and `bubble_pass/4` predicates for ProbLog's syntax, 3) Improper use of `append/3` in a way that's incompatible with ProbLog's semantics. The code needs complete regeneration to implement the bubblesort algorithm using only ProbLog-supported constructs. The sorting logic should be reimplemented using basic recursion and pattern matching without relying on Prolog-specific control structures.</Report>
<HASH> Hash tag of code: 47D659C8 </HASH>
<Requirements>This Prolog program should implement an interpretable bubblesort/3 algorithm. </Requirements></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
query(forth_sort([3,1,2,5,7,12],X)).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

<Langda>
<Code_Block>bubblesort([], Acc, Acc).

bubblesort(List, Acc, Sorted) :-
    bubble_pass(List, [], Updated, Flag),
    (Flag = 0 ->
        append(Acc, Updated, Sorted)
    ;
        append(Acc, [Updated], NewAcc),
        bubblesort(Updated, NewAcc, Sorted)
    ).

bubble_pass([X, Y | T], Acc, Updated, Flag) :-
    (X > Y ->
        bubble_pass([Y | T], [X | Acc], Updated, 1)
    ;
        bubble_pass([X | T], [Y | Acc], Updated, Flag)
    ).

bubble_pass([X], Acc, [X | Acc], 0).</Code_Block>
<Report>The code block contains several critical issues that prevent it from functioning correctly in ProbLog. The main problems are: 1) Use of unsupported `->` conditional statements which ProbLog cannot interpret, 2) Incorrect structure of `bubblesort/3` and `bubble_pass/4` predicates for ProbLog's syntax, 3) Improper use of `append/3` in a way that's incompatible with ProbLog's semantics. The code needs complete regeneration to implement the bubblesort algorithm using only ProbLog-supported constructs. The sorting logic should be reimplemented using basic recursion and pattern matching without relying on Prolog-specific control structures.</Report>
<HASH> Hash tag of code: 47D659C8 </HASH>
<Requirements>This Prolog program should implement an interpretable bubblesort/3 algorithm. </Requirements></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
query(forth_sort([3,1,2,5,7,12],X)).

</origin_code>
<generated_code>

% ProbLog implementation of bubblesort

% Base case: empty list is already sorted
bubblesort([], Acc, Acc).

% Recursive case: perform a bubble pass and continue sorting if needed
bubblesort(List, Acc, Sorted) :-
    bubble_pass(List, [], Updated, Flag),
    (Flag = 0,
     append(Acc, Updated, Sorted)
    ;
     Flag = 1,
     append(Acc, [Updated], NewAcc),
     bubblesort(Updated, NewAcc, Sorted)
    ).

% Bubble pass: compare adjacent elements and swap if necessary
bubble_pass([X, Y | T], Acc, Updated, Flag) :-
    (X > Y,
     bubble_pass([Y | T], [X | Acc], Updated, 1)
    ;
     X =< Y,
     bubble_pass([X | T], [Y | Acc], Updated, Flag)
    ).

% Base case for bubble_pass: single element is already in place
bubble_pass([X], Acc, [X | Acc], 0).

% Helper predicate to call bubblesort with an empty accumulator
forth_sort(L, L2) :- bubblesort(L, [], L2).

% Query example
query(forth_sort([3,1,2,5,7,12], X)).

<generated_code>
<Final_Answer> 
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```
</Final_Answer>