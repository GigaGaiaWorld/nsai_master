System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to regenerate the code in each <langda> block inside <Code>
in each <langda> block, <Report> shows why the <Code_Block> need to be regenerated, please regenerate the code according based on these information.
<Code>

% member/2 for ProbLog
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).
% --------- Basic meta-interpreter ---------
% Prove "true" always succeeds
prove(true).
prove(Goal) :-
	% For all other goals, use the clause/2 facts/rules defined in the program
	clause(Goal, Body),
	prove(Body).
% Prove compound goal A,B: prove A first, then prove B
prove((A,B)) :-
	prove(A),
	prove(B).
% --------- Extended logic processing ---------
<Langda>
<Code_Block>prove(implies(A, B)) :-
    prove(A),
    prove(B).
prove(opposite(A)) :-
    \+ prove(A).
prove(expand(Expr, Result)) :-
    expand(Expr, Result).
prove(includes(List, Element)) :-
    member(Element, List).
prove(extend(List, Element, ExtendedList)) :-
    append([Element], List, ExtendedList).
prove(refute(Goal)) :-
    \+ prove(Goal).</Code_Block>
<Report>The extended logic processing block (`prove/1` extensions) is mostly correct but fails due to the undefined `append/3` predicate. The predicates `implies/2`, `opposite/1`, `expand/2`, `includes/2`, and `refute/1` are correctly implemented and align with the requirements. However, `extend/3` relies on `append/3`, which is not available in the current scope. The block needs regeneration to either include a definition of `append/3` or replace the implementation of `extend/3` with a custom list concatenation logic that doesn't depend on `append/3`.</Report>
<HASH> Hash tag of code: E553CC07 </HASH>
<Requirements>Extended logic processing of prove/1, which should contains: 	1.implies/2 	2.opposite/1 	3.expand/2 	4.includes/2 	5.extend/2 	6.refute/1 </Requirements></Langda>
.
% --------- Examples ---------- %
% Define some expand rules:
expand(double(X), Y) :- Y is X*2.
expand(square(X), Y) :- Y is X*X.
parent(alice, bob).
parent(bob, carol).
ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).
% --------- Queries ---------- %
query(prove(implies(parent(alice,bob), ancestor(alice,bob)))).
query(prove(opposite(parent(carol,alice)))).
query(prove(expand(double(3),6))).
query(prove(includes([a,b,c],b))).
query(prove(extend([1,2],3,[3,1,2]))).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

% member/2 for ProbLog
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).
% --------- Basic meta-interpreter ---------
% Prove "true" always succeeds
prove(true).
prove(Goal) :-
	% For all other goals, use the clause/2 facts/rules defined in the program
	clause(Goal, Body),
	prove(Body).
% Prove compound goal A,B: prove A first, then prove B
prove((A,B)) :-
	prove(A),
	prove(B).
% --------- Extended logic processing ---------
<Langda>
<Code_Block>prove(implies(A, B)) :-
    prove(A),
    prove(B).
prove(opposite(A)) :-
    \+ prove(A).
prove(expand(Expr, Result)) :-
    expand(Expr, Result).
prove(includes(List, Element)) :-
    member(Element, List).
prove(extend(List, Element, ExtendedList)) :-
    append([Element], List, ExtendedList).
prove(refute(Goal)) :-
    \+ prove(Goal).</Code_Block>
<Report>The extended logic processing block (`prove/1` extensions) is mostly correct but fails due to the undefined `append/3` predicate. The predicates `implies/2`, `opposite/1`, `expand/2`, `includes/2`, and `refute/1` are correctly implemented and align with the requirements. However, `extend/3` relies on `append/3`, which is not available in the current scope. The block needs regeneration to either include a definition of `append/3` or replace the implementation of `extend/3` with a custom list concatenation logic that doesn't depend on `append/3`.</Report>
<HASH> Hash tag of code: E553CC07 </HASH>
<Requirements>Extended logic processing of prove/1, which should contains: 	1.implies/2 	2.opposite/1 	3.expand/2 	4.includes/2 	5.extend/2 	6.refute/1 </Requirements></Langda>
.
% --------- Examples ---------- %
% Define some expand rules:
expand(double(X), Y) :- Y is X*2.
expand(square(X), Y) :- Y is X*X.
parent(alice, bob).
parent(bob, carol).
ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).
% --------- Queries ---------- %
query(prove(implies(parent(alice,bob), ancestor(alice,bob)))).
query(prove(opposite(parent(carol,alice)))).
query(prove(expand(double(3),6))).
query(prove(includes([a,b,c],b))).
query(prove(extend([1,2],3,[3,1,2]))).

</origin_code>
<generated_code>

% member/2 for ProbLog
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).
% --------- Basic meta-interpreter ---------
% Prove "true" always succeeds
prove(true).
prove(Goal) :-
	% For all other goals, use the clause/2 facts/rules defined in the program
	clause(Goal, Body),
	prove(Body).
% Prove compound goal A,B: prove A first, then prove B
prove((A,B)) :-
	prove(A),
	prove(B).
% --------- Extended logic processing ---------
prove(implies(A, B)) :-
    prove(A),
    prove(B).
prove(opposite(A)) :-
    \+ prove(A).
prove(expand(Expr, Result)) :-
    expand(Expr, Result).
prove(includes(List, Element)) :-
    member(Element, List).
prove(extend(List, Element, ExtendedList)) :-
    ExtendedList = [Element|List].
prove(refute(Goal)) :-
    \+ prove(Goal).
% --------- Examples ---------- %
% Define some expand rules:
expand(double(X), Y) :- Y is X*2.
expand(square(X), Y) :- Y is X*X.
parent(alice, bob).
parent(bob, carol).
ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).
% --------- Queries ---------- %
query(prove(implies(parent(alice,bob), ancestor(alice,bob)))).
query(prove(opposite(parent(carol,alice)))).
query(prove(expand(double(3),6))).
query(prove(includes([a,b,c],b))).
query(prove(extend([1,2],3,[3,1,2]))).

<generated_code>
<Final_Answer> 
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```
</Final_Answer>