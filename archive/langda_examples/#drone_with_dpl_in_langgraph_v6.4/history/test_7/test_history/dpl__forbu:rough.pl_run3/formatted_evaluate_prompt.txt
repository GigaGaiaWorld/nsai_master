System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert code evaluator specialized in Problog and DeepProbLog. Your task is to thoroughly analyze the code in <Code> block, evaluate test results in <Result> block, and identify issues that need to be fixed.

<Code>
<Langda>
<Code_Block>bubblesort(List, Sorted) :- bubblesort(List, [], Sorted).

bubblesort([], Acc, Acc).

bubblesort(List, Acc, Sorted) :-
    bubble_pass(List, NewList, Swapped),
    (Swapped == true ->
        bubblesort(NewList, Acc, Sorted)
    ;
        reverse(NewList, Temp),
        append(Temp, Acc, Sorted)
    ).

bubble_pass([X, Y | Rest], [Y | NewRest], true) :-
    X > Y,
    bubble_pass([X | Rest], NewRest, _).

bubble_pass([X, Y | Rest], [X | NewRest], Swapped) :-
    X =< Y,
    bubble_pass([Y | Rest], NewRest, Swapped).

bubble_pass([X], [X], false).

reverse(List, Reversed) :- reverse(List, [], Reversed).

reverse([], Acc, Acc).
reverse([H | T], Acc, Reversed) :- reverse(T, [H | Acc], Reversed).

append([], L, L).
append([H | T], L, [H | R]) :- append(T, L, R).</Code_Block>
<HASH> Hash tag of code: 47D659C8 </HASH>
<Requirements>This Prolog program should implement an interpretable bubblesort/3 algorithm. </Requirements></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
query(forth_sort([3,1,2,5,7,12],X)).
<Result> Here are the testing result of code:
 Error evaluating Problog model:
    return exec_func(node_id=node_id, node=node, **kwdargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/zhenzhili/miniforge3/envs/langda/lib/python3.11/site-packages/problog/engine_stack.py", line 839, in eval_call
    raise UnknownClause(origin, location=loc)
problog.engine.UnknownClause: No clauses found for ''->'/2' at 7:22.</Result>
</Code>

<Evaluation_Instructions>
First, analyze the entire codebase and test results to identify errors and potential issues. Consider:
1. Syntax correctness: Is the ProbLog code syntactically valid?
2. Logical correctness: Does the code implement the specified requirements?
3. Error analysis: What specific issues are causing any test failures?
4. Integration: Do the code blocks properly work together?

Create a comprehensive report that identifies all issues and explains their causes.
</Evaluation_Instructions>

<Final_Answer> The evaluation report should be structured as follows:
```report
<Overall_Analysis> "Overall assessment of the code quality and test results" </Overall_Analysis>
<Error_Summary> "Summary of identified errors and their root causes (if any)" </Error_Summary>
<Code_Block_Issues>
    <Code>"HASH": "[Use the exact HASH provided in the requirements for first code]",
        "Report": "// Your analysis of first code here"</Code>
    <Code>"HASH": "[Use the exact HASH provided in the requirements for second code]",
        "Report": "// Your analysis of second code here"</Code>
    // other code blocks...
</Code_Block_Issues>
<Recommendations>"Recommendations for fixing the issues" </Recommendations>
```
</Final_Answer>


AI: 


In this phase, you'll receive the output from the first chain along with the original code blocks. Your task is to evaluate each <langda> code block individually and determine if it needs regeneration.
<original_code>

<Langda>
<Code_Block>bubblesort(List, Sorted) :- bubblesort(List, [], Sorted).

bubblesort([], Acc, Acc).

bubblesort(List, Acc, Sorted) :-
    bubble_pass(List, NewList, Swapped),
    (Swapped == true ->
        bubblesort(NewList, Acc, Sorted)
    ;
        reverse(NewList, Temp),
        append(Temp, Acc, Sorted)
    ).

bubble_pass([X, Y | Rest], [Y | NewRest], true) :-
    X > Y,
    bubble_pass([X | Rest], NewRest, _).

bubble_pass([X, Y | Rest], [X | NewRest], Swapped) :-
    X =< Y,
    bubble_pass([Y | Rest], NewRest, Swapped).

bubble_pass([X], [X], false).

reverse(List, Reversed) :- reverse(List, [], Reversed).

reverse([], Acc, Acc).
reverse([H | T], Acc, Reversed) :- reverse(T, [H | Acc], Reversed).

append([], L, L).
append([H | T], L, [H | R]) :- append(T, L, R).</Code_Block>
<HASH> Hash tag of code: 47D659C8 </HASH>
<Requirements>This Prolog program should implement an interpretable bubblesort/3 algorithm. </Requirements></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
query(forth_sort([3,1,2,5,7,12],X)).
<Result> Here are the testing result of code:
 Error evaluating Problog model:
    return exec_func(node_id=node_id, node=node, **kwdargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/zhenzhili/miniforge3/envs/langda/lib/python3.11/site-packages/problog/engine_stack.py", line 839, in eval_call
    raise UnknownClause(origin, location=loc)
problog.engine.UnknownClause: No clauses found for ''->'/2' at 7:22.</Result>

</original_code>
<Analysis>

<Overall_Analysis> 
The provided code is a Prolog implementation of the bubblesort algorithm, which is intended to be interpretable in ProbLog. However, the test results indicate a syntax error related to the use of the `->` operator, which is not supported in ProbLog. The code also lacks proper integration with ProbLog's syntax and querying mechanisms.
</Overall_Analysis>

<Error_Summary> 
1. **Syntax Error**: The `->` operator is used in the `bubblesort/3` predicate, which is not valid in ProbLog. This causes the "No clauses found for ''->'/2'" error.
2. **Logical Correctness**: The bubblesort logic itself is correct in Prolog, but it does not align with ProbLog's syntax and requirements.
3. **Integration Issue**: The `query` statement is not properly formatted for ProbLog, and the `forth_sort/2` predicate is not correctly integrated into the ProbLog model.
</Error_Summary>

<Code_Block_Issues>
    <Code>"HASH": "47D659C8",
        "Report": "The code block implements a valid Prolog bubblesort algorithm but fails in ProbLog due to the use of the `->` operator, which is unsupported. Additionally, the `reverse/2` and `append/3` predicates are correctly implemented but not necessary for ProbLog's probabilistic context."
    </Code>
    <Code>"HASH": "N/A",
        "Report": "The `forth_sort/2` predicate and `query` statement are not properly formatted for ProbLog. The `query` should be written as `query(forth_sort([3,1,2,5,7,12], X)).` without the `query` wrapper, and the predicate should be defined in a ProbLog-compatible way."
    </Code>
</Code_Block_Issues>

<Recommendations>
1. Replace the `->` operator in the `bubblesort/3` predicate with ProbLog-compatible control structures, such as `if-then-else` or separate clauses.
2. Ensure the `query` statement follows ProbLog's syntax by removing the `query` wrapper and directly using the predicate.
3. Simplify the code by removing unnecessary predicates like `reverse/2` and `append/3` if they are not required for the probabilistic model.
4. Test the revised code in a ProbLog environment to confirm compatibility and correctness.
</Recommendations>

</Analysis>
<Evaluation_Instructions>
For each <langda> code block in the original code:
1. Identify the corresponding HASH value
2. Analyze whether it has issues based on the analysis
3. Determine if it needs regeneration
4. Provide detailed reasoning for your decision
5. If there are dependencies between code blocks, identify them

Consider:
- Syntax and logical correctness
- Integration with other code blocks
- Test failures related to this code block
- Implementation of requirements
</Evaluation_Instructions>

<Final_Answer> 
For each code block, format it's report in the following JSON format:
```report
{"HASH": "XXXX1234","Report": "Detailed analysis of issues and recommendations for this specific code block","Need_regenerate": true|false,"Dependencies": ["HASH5678", "HASH9101"] // Only include if this code block depends on others that also need regeneration}
```
```report
{"HASH": "XXXX5678","Report": "Detailed analysis of issues and recommendations for this specific code block","Need_regenerate": true|false,"Dependencies": [] // Empty if no dependencies need regeneration}
```
</Final_Answer>