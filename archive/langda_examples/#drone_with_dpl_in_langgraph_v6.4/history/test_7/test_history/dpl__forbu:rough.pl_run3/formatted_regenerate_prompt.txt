System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to regenerate the code in each <langda> block inside <Code>
in each <langda> block, <Report> shows why the <Code_Block> need to be regenerated, please regenerate the code according based on these information.
<Code>

<Langda>
<Code_Block>bubblesort([], Acc, Acc).

bubblesort(List, Acc, Sorted) :-
    bubble_pass(List, NewList, Swapped),
    (Swapped = true,
        bubblesort(NewList, Acc, Sorted)
    ;
        append(NewList, Acc, Sorted)
    ).

bubble_pass([X, Y | Rest], [X | NewRest], true) :-
    X > Y,
    bubble_pass([Y | Rest], NewRest, _).

bubble_pass([X, Y | Rest], [Y | NewRest], Swapped) :-
    X =< Y,
    bubble_pass([X | Rest], NewRest, Swapped).

bubble_pass([X], [X], false).

append([], L, L).
append([H|T], L, [H|R]) :- append(T, L, R).</Code_Block>
<Report>The `bubblesort/3` predicate is intended to sort a list in ascending order, but the current implementation does not achieve this. The issue stems from the `bubble_pass/3` predicate, which incorrectly handles the swapping of elements. The `Swapped` flag is not being used to terminate the sorting loop when no more swaps are needed. Additionally, the `append/3` predicate is misused in the `bubblesort/3` clause, leading to incorrect accumulation of sorted elements. The test results confirm these logical flaws, as multiple incorrect sorted lists are produced. The code needs to be regenerated to correctly implement the bubblesort algorithm.</Report>
<HASH> Hash tag of code: 47D659C8 </HASH>
<Requirements>This Prolog program should implement an interpretable bubblesort/3 algorithm. </Requirements></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
query(forth_sort([3,1,2,5,7,12],X)).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

<Langda>
<Code_Block>bubblesort([], Acc, Acc).

bubblesort(List, Acc, Sorted) :-
    bubble_pass(List, NewList, Swapped),
    (Swapped = true,
        bubblesort(NewList, Acc, Sorted)
    ;
        append(NewList, Acc, Sorted)
    ).

bubble_pass([X, Y | Rest], [X | NewRest], true) :-
    X > Y,
    bubble_pass([Y | Rest], NewRest, _).

bubble_pass([X, Y | Rest], [Y | NewRest], Swapped) :-
    X =< Y,
    bubble_pass([X | Rest], NewRest, Swapped).

bubble_pass([X], [X], false).

append([], L, L).
append([H|T], L, [H|R]) :- append(T, L, R).</Code_Block>
<Report>The `bubblesort/3` predicate is intended to sort a list in ascending order, but the current implementation does not achieve this. The issue stems from the `bubble_pass/3` predicate, which incorrectly handles the swapping of elements. The `Swapped` flag is not being used to terminate the sorting loop when no more swaps are needed. Additionally, the `append/3` predicate is misused in the `bubblesort/3` clause, leading to incorrect accumulation of sorted elements. The test results confirm these logical flaws, as multiple incorrect sorted lists are produced. The code needs to be regenerated to correctly implement the bubblesort algorithm.</Report>
<HASH> Hash tag of code: 47D659C8 </HASH>
<Requirements>This Prolog program should implement an interpretable bubblesort/3 algorithm. </Requirements></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
query(forth_sort([3,1,2,5,7,12],X)).

</origin_code>
<generated_code>

% Correct implementation of bubblesort in Prolog
bubblesort(List, Sorted) :- bubblesort(List, [], Sorted).

bubblesort([], Acc, Acc).

bubblesort(List, Acc, Sorted) :-
    bubble_pass(List, NewList, Swapped),
    (Swapped == true ->
        bubblesort(NewList, Acc, Sorted)
    ;
        reverse(NewList, Temp),
        append(Temp, Acc, Sorted)
    ).

bubble_pass([X, Y | Rest], [Y | NewRest], true) :-
    X > Y,
    bubble_pass([X | Rest], NewRest, _).

bubble_pass([X, Y | Rest], [X | NewRest], Swapped) :-
    X =< Y,
    bubble_pass([Y | Rest], NewRest, Swapped).

bubble_pass([X], [X], false).

reverse(List, Reversed) :- reverse(List, [], Reversed).

reverse([], Acc, Acc).
reverse([H | T], Acc, Reversed) :- reverse(T, [H | Acc], Reversed).

append([], L, L).
append([H | T], L, [H | R]) :- append(T, L, R).

% Query example
query(bubblesort([3, 1, 2, 5, 7, 12], X)).

<generated_code>
<Final_Answer> 
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```
</Final_Answer>