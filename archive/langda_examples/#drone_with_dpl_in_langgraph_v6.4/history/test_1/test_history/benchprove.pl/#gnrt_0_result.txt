Here's the complete code in the requested JSON format:

```problog
{
    "HASH": "first_code",
    "Code": "% member/2 for ProbLog\nmember(X, [X|_]).\nmember(X, [_|T]) :- member(X, T).\n% --------- Basic meta-interpreter ---------\n% Prove \"true\" always succeeds\nprove(true).\nprove(Goal) :-\n\t% For all other goals, use the clause/2 facts/rules defined in the program\n\tclause(Goal, Body),\n\tprove(Body).\n% Prove compound goal A,B: prove A first, then prove B\nprove((A,B)) :-\n\tprove(A),\n\tprove(B).\n% --------- Extended logic processing ---------\n% 1. implies(P,Q): P â‡’ Q, when P is unprovable or Q is provable\nprove(implies(P,Q)) :-\n\t( \\+ prove(P) % if P is unprovable\n\t; prove(Q) ).\n % or Q is provable\n% 2. opposite(P): \"opposite\"/negation of P; that is, P is unprovable\nprove(opposite(P)) :-\n\t\\+ prove(P).\n% 3. expand(A,B): first use expand/2 rule to expand A into B, then prove B\n% You need to define several expand/2 facts or rules in the program\nprove(expand(A,B)) :-\n\texpand(A,B).\n% 4. includes(Set,X): set inclusion relation, equivalent to member/2\nprove(includes(Set,X)) :-\n\tmember(X,Set).\n% 5. extend(List,Elem,Extended): add Elem to the head of List to get Extended\nprove(extend(List,Elem,Extended)) :-\n\tExtended = [Elem|List].\n% 6. refute(P): refute, equivalent to \"unprovable\"\nprove(refute(P)) :-\n\t\\+ prove(P).\n% --------- Examples ---------- %\n% Define some expand rules:\nexpand(double(X), Y) :- Y is X*2.\nexpand(square(X), Y) :- Y is X*X.\nparent(alice, bob).\nparent(bob, carol).\nancestor(X,Y) :- parent(X,Y).\nancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).\n% --------- Queries ---------- %\nquery(prove(implies(parent(alice,bob), ancestor(alice,bob)))).\nquery(prove(opposite(parent(carol,alice)))).\nquery(prove(expand(double(3),6))).\nquery(prove(includes([a,b,c],b))).\nquery(prove(extend([1,2],3,[3,1,2])))."
}
```

```problog
{
    "HASH": "second_code",
    "Code": "% This is a placeholder for the second code block if needed\n% You can add additional Problog code here when required"
}
```