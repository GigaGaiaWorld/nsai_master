System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>
<Langda> Information of 1st Placeholder:
<HASH> Hash tag of code: 501F546D </HASH>
<LLM> Requirements of Rules: This Prolog program should implement an interpretable insertion_sort/2 algorithm. </LLM></Langda>
.
 
query(insertion_sort([3,1,2,5,7,12],X)).
</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>
AI: 


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>
<Langda> Information of 1st Placeholder:
<HASH> Hash tag of code: 501F546D </HASH>
<LLM> Requirements of Rules: This Prolog program should implement an interpretable insertion_sort/2 algorithm. </LLM></Langda>
.
 
query(insertion_sort([3,1,2,5,7,12],X)).
</origin_code>
<generated_code>
% Insertion Sort in ProbLog

% Base case: inserting an element into an empty list
insert(X, [], [X]).

% Recursive case: inserting an element into a sorted list
insert(X, [Y|Ys], [X,Y|Ys]) :- X @=< Y.
insert(X, [Y|Ys], [Y|Zs]) :- X @> Y, insert(X, Ys, Zs).

% Base case: sorting an empty list
insertion_sort([], []).

% Recursive case: sorting a non-empty list
insertion_sort([X|Xs], Sorted) :-
    insertion_sort(Xs, SortedXs),
    insert(X, SortedXs, Sorted).

% Query example
query(insertion_sort([3,1,2,5,7,12], X)).
<generated_code>
<Final_Answer> Each code block SHOULD ONLY CONTAINS THE EXACT CONTENT of <langda> blocks, for example:
for the following original code:
<Code>
head(X) :-
<Langda> Information of 1st Placeholder:
<HASH> Hash tag of code: XXXXABCD </HASH>
<LLM> Requirements of Rules:...  </LLM></Langda>
//other contents...
</Code>
if you extracted code contains "head(X) :-", it's wrong, because it's OUTSIDE the <langda> block

For each code block , extract it and format it as follows:
```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```
</Final_Answer>