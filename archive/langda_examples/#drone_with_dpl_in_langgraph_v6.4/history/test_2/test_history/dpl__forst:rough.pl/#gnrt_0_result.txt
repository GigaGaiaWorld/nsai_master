Based on the instructions, I'll extract only the code blocks from <generated_code> that correspond to the <langda> placeholder in <origin_code>. Since there's only one <langda> block in the original code, I'll extract the corresponding implementation of stack operations:

```problog
{"HASH": "5E40E418", "Code": "% Stack operations in ProbLog\n\n% Push operation: Adds an element to the top of the stack\nstack_op(push(X), Stack, [X|Stack]).\n\n% Pop operation: Removes the top element from the stack\nstack_op(pop, [X|Stack], Stack).\n\n% Dup operation: Duplicates the top element of the stack\nstack_op(dup, [X|Stack], [X,X|Stack]).\n\n% Swap operation: Swaps the top two elements of the stack\nstack_op(swap, [X,Y|Stack], [Y,X|Stack]).\n\n% Over operation: Copies the second element to the top of the stack\nstack_op(over, [X,Y|Stack], [Y,X,Y|Stack]).\n\n% Rot operation: Rotates the top three elements of the stack\nstack_op(rot, [X,Y,Z|Stack], [Y,Z,X|Stack]).\n\n% Sort operation: Sorts the top N elements of the stack\nstack_op(sort, Stack, SortedStack) :-\n    get_top_n(Stack, 3, Elements, RestStack),\n    insertion_sort(Elements, SortedElements),\n    append(SortedElements, RestStack, SortedStack).\n\n% Helper predicate to get the top N elements of the stack\nget_top_n(Stack, N, Elements, Rest) :-\n    length(Elements, N),\n    append(Elements, Rest, Stack).\n\n% Helper predicate for insertion sort\ninsertion_sort(List, Sorted) :-\n    insertion_sort(List, [], Sorted).\n\ninsertion_sort([], Acc, Acc).\ninsertion_sort([H|T], Acc, Sorted) :-\n    insert(H, Acc, NewAcc),\n    insertion_sort(T, NewAcc, Sorted).\n\ninsert(X, [], [X]).\ninsert(X, [Y|T], [X,Y|T]) :- X =< Y.\ninsert(X, [Y|T], [Y|NT]) :- X > Y, insert(X, T, NT)."}
```