System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>

<Langda> Information:
<HASH> Hash tag of code: 47D659C8 </HASH>
<Requirements>This Prolog program should implement an interpretable bubblesort/3 algorithm. </Requirements></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
query(forth_sort([3,1,2,5,7,12],X)).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 

**split**


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

<Langda> Information:
<HASH> Hash tag of code: 47D659C8 </HASH>
<Requirements>This Prolog program should implement an interpretable bubblesort/3 algorithm. </Requirements></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
query(forth_sort([3,1,2,5,7,12],X)).

</origin_code>
<generated_code>

% Bubblesort algorithm in Problog
bubblesort([], Acc, Acc).
bubblesort([H], Acc, [H|Acc]).
bubblesort([H1, H2|T], Acc, Sorted) :-
    (H1 > H2 ->
        bubblesort([H2, H1|T], Acc, Sorted)
    ;
        bubblesort([H1|T], [H2|Acc], Sorted)
    ).

forth_sort(L, L2) :- bubblesort(L, [], L2).

query(forth_sort([3,1,2,5,7,12], X)).

<generated_code>
<Final_Answer>
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```

If there's no corresponding code exist:
```problog
{"HASH": "XXXX7890","Code": ""}
```
</Final_Answer>

**FIRST RESULT:
Here is the completed Problog code for the interpretable `bubblesort/3` algorithm based on your requirements:

```problog
% Bubblesort algorithm in Problog
bubblesort([], Acc, Acc).
bubblesort([H], Acc, [H|Acc]).
bubblesort([H1, H2|T], Acc, Sorted) :-
    (H1 > H2 ->
        bubblesort([H2, H1|T], Acc, Sorted)
    ;
        bubblesort([H1|T], [H2|Acc], Sorted)
    ).

forth_sort(L, L2) :- bubblesort(L, [], L2).

query(forth_sort([3,1,2,5,7,12], X)).
```

### Explanation:
1. **`bubblesort/3`**:
   - The base cases handle empty lists and single-element lists.
   - The recursive case compares the first two elements (`H1` and `H2`):
     - If `H1 > H2`, they are swapped, and the process continues.
     - Otherwise, the smaller element is moved to the accumulator (`Acc`), and the process continues with the rest of the list.

2. **`forth_sort/2`**:
   - A wrapper predicate that initializes the accumulator as an empty list and calls `bubblesort/3`.

3. **Query**:
   - The query `forth_sort([3,1,2,5,7,12], X)` will sort the list `[3,1,2,5,7,12]` and bind the sorted result to `X`.

This implementation is interpretable and follows the standard Problog syntax. Let me know if you'd like any modifications or additional features!