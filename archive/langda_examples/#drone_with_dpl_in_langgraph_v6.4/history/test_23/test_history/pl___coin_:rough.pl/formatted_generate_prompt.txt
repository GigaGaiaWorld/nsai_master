System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>

PH::make_coin(C,PH).
coin(C) :- make_coin(C,0.8).
coins_r(SC,SC,0).
coins_r(SC,S,CNT) :-
 CNT > 0,
 
<Langda> Information:
<HASH> Hash tag of code: DF1FDC54 </HASH>
<Requirements>Sample CNT independent coins and accumulate the number of heads facing up SC, and finally get the total number of heads after tossing CNT coins S </Requirements></Langda>
.
total(S) :- coins_r(0,S,4).
query(total(_)).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 

**split**


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

PH::make_coin(C,PH).
coin(C) :- make_coin(C,0.8).
coins_r(SC,SC,0).
coins_r(SC,S,CNT) :-
 CNT > 0,
 
<Langda> Information:
<HASH> Hash tag of code: DF1FDC54 </HASH>
<Requirements>Sample CNT independent coins and accumulate the number of heads facing up SC, and finally get the total number of heads after tossing CNT coins S </Requirements></Langda>
.
total(S) :- coins_r(0,S,4).
query(total(_)).

</origin_code>
<generated_code>

PH::make_coin(C,PH).
coin(C) :- make_coin(C,0.8).

coins_r(SC,SC,0).
coins_r(SC,S,CNT) :-
    CNT > 0,
    coin(C),
    (C -> NSC is SC + 1 ; NSC is SC),
    NCNT is CNT - 1,
    coins_r(NSC,S,NCNT).

total(S) :- coins_r(0,S,4).
query(total(_)).

<generated_code>
<Final_Answer>
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```

If there's no corresponding code exist:
```problog
{"HASH": "XXXX7890","Code": ""}
```
</Final_Answer>

**FIRST RESULT:
Here is the completed ProbLog code based on your requirements:

```problog
PH::make_coin(C,PH).
coin(C) :- make_coin(C,0.8).

coins_r(SC,SC,0).
coins_r(SC,S,CNT) :-
    CNT > 0,
    coin(C),
    (C -> NSC is SC + 1 ; NSC is SC),
    NCNT is CNT - 1,
    coins_r(NSC,S,NCNT).

total(S) :- coins_r(0,S,4).
query(total(_)).
```

### Explanation:
1. **`make_coin/2` and `coin/1`**: These predicates define a biased coin with a probability of 0.8 for heads (`C` is true).
2. **`coins_r/3`**:
   - Base case: When `CNT` is 0, the accumulated count of heads `SC` is returned as `S`.
   - Recursive case: For `CNT > 0`, a coin is tossed (`coin(C)`). If the coin lands heads (`C` is true), the count `SC` is incremented by 1. The count is decremented, and the process repeats.
3. **`total/1`**: This predicate initializes the count of heads to 0 and calls `coins_r/3` with `CNT = 4`.
4. **`query(total(_))`**: This queries the total number of heads after tossing 4 coins.

The code models the process of tossing 4 independent coins and accumulating the number of heads.