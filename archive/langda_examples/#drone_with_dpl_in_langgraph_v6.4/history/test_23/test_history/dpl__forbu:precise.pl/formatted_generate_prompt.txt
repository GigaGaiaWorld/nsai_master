System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>

hole(X,Y,X,Y):-
 swap(X,Y,no_swap).
hole(X,Y,Y,X):-
 swap(X,Y,swap).
bubble([X],[],X).
bubble([H1,H2|T],[X1|T1],X):-
 hole(H1,H2,X1,X2),
 bubble([X2|T],T1,X).
bubblesort([],L,L).
bubblesort(L,L3,Sorted) :-
 
<Langda> Information:
<HASH> Hash tag of code: 2971FD2F </HASH>
<Requirements>Recursively call bubblesort on L2 and put the current maximum value X into the sorted part [X|L3]. </Requirements></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
<Langda> Information:
<HASH> Hash tag of code: 5CBF7C6A </HASH>
<Requirements>The logical predicate that determines whether to exchange </Requirements></Langda>
.
 
query(forth_sort([3,1,2,5,7,12],X)).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 

**split**


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

hole(X,Y,X,Y):-
 swap(X,Y,no_swap).
hole(X,Y,Y,X):-
 swap(X,Y,swap).
bubble([X],[],X).
bubble([H1,H2|T],[X1|T1],X):-
 hole(H1,H2,X1,X2),
 bubble([X2|T],T1,X).
bubblesort([],L,L).
bubblesort(L,L3,Sorted) :-
 
<Langda> Information:
<HASH> Hash tag of code: 2971FD2F </HASH>
<Requirements>Recursively call bubblesort on L2 and put the current maximum value X into the sorted part [X|L3]. </Requirements></Langda>
.
forth_sort(L,L2) :- bubblesort(L,[],L2).
<Langda> Information:
<HASH> Hash tag of code: 5CBF7C6A </HASH>
<Requirements>The logical predicate that determines whether to exchange </Requirements></Langda>
.
 
query(forth_sort([3,1,2,5,7,12],X)).

</origin_code>
<generated_code>

hole(X, Y, X, Y) :-
    swap(X, Y, no_swap).
hole(X, Y, Y, X) :-
    swap(X, Y, swap).

bubble([X], [], X).
bubble([H1, H2 | T], [X1 | T1], X) :-
    hole(H1, H2, X1, X2),
    bubble([X2 | T], T1, X).

bubblesort([], L, L).
bubblesort(L, L3, Sorted) :-
    bubble(L, L2, X),
    bubblesort(L2, [X | L3], Sorted).

swap(X, Y, swap) :-
    X > Y.
swap(X, Y, no_swap) :-
    X =< Y.

forth_sort(L, L2) :-
    bubblesort(L, [], L2).

query(forth_sort([3, 1, 2, 5, 7, 12], X)).

<generated_code>
<Final_Answer>
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```

If there's no corresponding code exist:
```problog
{"HASH": "XXXX7890","Code": ""}
```
</Final_Answer>

**FIRST RESULT:
Here is the completed ProbLog code based on your requirements:

```problog
hole(X, Y, X, Y) :-
    swap(X, Y, no_swap).
hole(X, Y, Y, X) :-
    swap(X, Y, swap).

bubble([X], [], X).
bubble([H1, H2 | T], [X1 | T1], X) :-
    hole(H1, H2, X1, X2),
    bubble([X2 | T], T1, X).

bubblesort([], L, L).
bubblesort(L, L3, Sorted) :-
    bubble(L, L2, X),
    bubblesort(L2, [X | L3], Sorted).

swap(X, Y, swap) :-
    X > Y.
swap(X, Y, no_swap) :-
    X =< Y.

forth_sort(L, L2) :-
    bubblesort(L, [], L2).

query(forth_sort([3, 1, 2, 5, 7, 12], X)).
```

### Explanation:
1. **`hole/4`**: Determines whether to swap two elements based on the `swap/3` predicate.
2. **`bubble/3`**: Implements the bubble step of the sorting algorithm, moving the largest element to the end of the list.
3. **`bubblesort/3`**: Recursively sorts the list by repeatedly calling `bubble/3` and accumulating the sorted elements.
4. **`swap/3`**: Defines the logic for swapping two elements (`X > Y` triggers a swap).
5. **`forth_sort/2`**: Wrapper predicate for `bubblesort/3` to start with an empty accumulator.
6. **`query/1`**: Example query to test the sorting function.