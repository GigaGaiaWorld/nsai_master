System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>

% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).
member(X,[X|T]).
member(X,[H|T]) :- member(X,T).
<Langda> Information:
<HASH> Hash tag of code: 245014E2 </HASH>
<Requirements>Define open_door/1 Predicate to solve the monty Hall problem, you can use multiple open_door/1 predicates </Requirements></Langda>
.
win_keep :-
 select_door(A),
 prize(A).
win_switch :-
 member(A, [1,2,3]),
 \+ select_door(A),
 prize(A),
 \+ open_door(A).
query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 

**split**


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).
member(X,[X|T]).
member(X,[H|T]) :- member(X,T).
<Langda> Information:
<HASH> Hash tag of code: 245014E2 </HASH>
<Requirements>Define open_door/1 Predicate to solve the monty Hall problem, you can use multiple open_door/1 predicates </Requirements></Langda>
.
win_keep :-
 select_door(A),
 prize(A).
win_switch :-
 member(A, [1,2,3]),
 \+ select_door(A),
 prize(A),
 \+ open_door(A).
query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).

</origin_code>
<generated_code>

% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).

member(X,[X|T]).
member(X,[H|T]) :- member(X,T).

% Define open_door/1 predicate
open_door(Door) :-
    select_door(Selected),
    prize(Prize),
    member(Door, [1,2,3]),
    \+ (Door = Selected),
    \+ (Door = Prize).

win_keep :-
    select_door(A),
    prize(A).

win_switch :-
    member(A, [1,2,3]),
    \+ select_door(A),
    prize(A),
    \+ open_door(A).

query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).

<generated_code>
<Final_Answer>
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```

If there's no corresponding code exist:
```problog
{"HASH": "XXXX7890","Code": ""}
```
</Final_Answer>

**FIRST RESULT:
Here is the completed ProbLog code for the Monty Hall problem, including the `open_door/1` predicate as requested:

```problog
% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).

member(X,[X|T]).
member(X,[H|T]) :- member(X,T).

% Define open_door/1 predicate
open_door(Door) :-
    select_door(Selected),
    prize(Prize),
    member(Door, [1,2,3]),
    \+ (Door = Selected),
    \+ (Door = Prize).

win_keep :-
    select_door(A),
    prize(A).

win_switch :-
    member(A, [1,2,3]),
    \+ select_door(A),
    prize(A),
    \+ open_door(A).

query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).
```

### Explanation:
1. **`open_door/1` Predicate**:
   - The `open_door(Door)` predicate selects a door that is neither the contestant's chosen door (`Selected`) nor the door with the prize (`Prize`). This simulates the host's action of opening a door that does not contain the prize.

2. **`win_keep` and `win_switch`**:
   - `win_keep` checks if the contestant wins by sticking with their initial choice.
   - `win_switch` checks if the contestant wins by switching to the remaining unopened door.

3. **Queries**:
   - The `query` predicates allow you to compute the probabilities of the prize location, the initial selection, and the outcomes of keeping or switching the choice.