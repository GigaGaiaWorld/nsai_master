System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>

% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).
member(X,[X|T]).
member(X,[H|T]) :- member(X,T).
0.5::open_door(A) ; 0.5::open_door(B) :-
 
<Langda> Information:
<HASH> Hash tag of code: A4F0EAE2 </HASH>
<Requirements>If there are two doors that are not selected and neither of them hides a prize  Let the two doors be numbered A and B (and A < B ensures that each pair is counted only once).  When faced with two empty doors, the host randomly and fairly chooses one to open. </Requirements></Langda>
.
open_door(A) :-
 
<Langda> Information:
<HASH> Hash tag of code: F0FDE8AB </HASH>
<Requirements>If only one door is not selected and does not contain a prize.   This means that the other unselected door is exactly the one that contains the prize.  Then this rule will match the only empty door A and open it with certainty (probability 1). </Requirements></Langda>
.
win_keep :-
 select_door(A),
 prize(A).
win_switch :-
 member(A, [1,2,3]),
 \+ select_door(A),
 prize(A),
 \+ open_door(A).
query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 

**split**


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).
member(X,[X|T]).
member(X,[H|T]) :- member(X,T).
0.5::open_door(A) ; 0.5::open_door(B) :-
 
<Langda> Information:
<HASH> Hash tag of code: A4F0EAE2 </HASH>
<Requirements>If there are two doors that are not selected and neither of them hides a prize  Let the two doors be numbered A and B (and A < B ensures that each pair is counted only once).  When faced with two empty doors, the host randomly and fairly chooses one to open. </Requirements></Langda>
.
open_door(A) :-
 
<Langda> Information:
<HASH> Hash tag of code: F0FDE8AB </HASH>
<Requirements>If only one door is not selected and does not contain a prize.   This means that the other unselected door is exactly the one that contains the prize.  Then this rule will match the only empty door A and open it with certainty (probability 1). </Requirements></Langda>
.
win_keep :-
 select_door(A),
 prize(A).
win_switch :-
 member(A, [1,2,3]),
 \+ select_door(A),
 prize(A),
 \+ open_door(A).
query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).

</origin_code>
<generated_code>

% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).
member(X,[X|T]).
member(X,[H|T]) :- member(X,T).

% Rule for opening a door when two doors are empty and not selected
0.5::open_door(A) ; 0.5::open_door(B) :-
    select_door(S),
    \+ prize(A),
    \+ prize(B),
    \+ select_door(A),
    \+ select_door(B),
    A < B.

% Rule for opening a door when only one door is empty and not selected
open_door(A) :-
    select_door(S),
    \+ prize(A),
    \+ select_door(A),
    member(B, [1,2,3]),
    B \= A,
    B \= S,
    prize(B).

win_keep :-
    select_door(A),
    prize(A).
win_switch :-
    member(A, [1,2,3]),
    \+ select_door(A),
    prize(A),
    \+ open_door(A).

query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).

<generated_code>
<Final_Answer>
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```

If there's no corresponding code exist:
```problog
{"HASH": "XXXX7890","Code": ""}
```
</Final_Answer>

**FIRST RESULT:
Here is the completed ProbLog code based on the requirements provided in the `<Langda>` blocks:

```problog
% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).
member(X,[X|T]).
member(X,[H|T]) :- member(X,T).

% Rule for opening a door when two doors are empty and not selected
0.5::open_door(A) ; 0.5::open_door(B) :-
    select_door(S),
    \+ prize(A),
    \+ prize(B),
    \+ select_door(A),
    \+ select_door(B),
    A < B.

% Rule for opening a door when only one door is empty and not selected
open_door(A) :-
    select_door(S),
    \+ prize(A),
    \+ select_door(A),
    member(B, [1,2,3]),
    B \= A,
    B \= S,
    prize(B).

win_keep :-
    select_door(A),
    prize(A).
win_switch :-
    member(A, [1,2,3]),
    \+ select_door(A),
    prize(A),
    \+ open_door(A).

query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).
```

### Explanation:
1. **Opening a door when two doors are empty and not selected**:
   - The host randomly chooses between the two empty doors (`A` and `B`) with equal probability (`0.5`).
   - The condition ensures that neither `A` nor `B` is the selected door or contains the prize.

2. **Opening a door when only one door is empty and not selected**:
   - The host opens the only empty door (`A`) with certainty (probability `1`).
   - The condition ensures that the other unselected door (`B`) contains the prize.

3. **Queries**:
   - `query(prize(_))`: Queries the probability distribution of the prize.
   - `query(select_door(_))`: Queries the selected door.
   - `query(win_keep)` and `query(win_switch)`: Query the probabilities of winning by keeping or switching the door.