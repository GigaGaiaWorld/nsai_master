Here are the completed code snippets in JSON form for each query:

```problog
{"HASH": "5E40E418","Code": "stack_op(push(X), Stack, [X|Stack])."}
```

```problog
{"HASH": "5E40E418","Code": "stack_op(pop, [Top|Rest], Rest)."}
```

```problog
{"HASH": "5E40E418","Code": "stack_op(dup, [Top|Rest], [Top,Top|Rest])."}
```

```problog
{"HASH": "5E40E418","Code": "stack_op(swap, [X,Y|Rest], [Y,X|Rest])."}
```

```problog
{"HASH": "5E40E418","Code": "stack_op(over, [X,Y|Rest], [Y,X,Y|Rest])."}
```

```problog
{"HASH": "5E40E418","Code": "stack_op(rot, [X,Y,Z|Rest], [Z,X,Y|Rest])."}
```

```problog
{"HASH": "5E40E418","Code": "insertion_sort([], []).\ninsertion_sort([X|Xs], Sorted) :-\n    insertion_sort(Xs, SortedXs),\n    insert(X, SortedXs, Sorted).\n\ninsert(X, [], [X]).\ninsert(X, [Y|Ys], [X,Y|Ys]) :- X =< Y.\ninsert(X, [Y|Ys], [Y|Zs]) :- X > Y, insert(X, Ys, Zs)."}
```

Note that I've included the implementation of `insertion_sort` which is needed for the `sort` operation in your original code, though it wasn't directly referenced in the queries. The stack operations are implemented according to standard stack operation definitions:
- push adds an element to the top
- pop removes the top element
- dup duplicates the top element
- swap swaps the top two elements
- over copies the second element to the top
- rot rotates the top three elements