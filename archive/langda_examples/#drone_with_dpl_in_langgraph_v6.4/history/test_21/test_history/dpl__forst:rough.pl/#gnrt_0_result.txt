Here are the completed code snippets in JSON form for each query:

```problog
{"HASH": "5E40E418","Code": "stack_op(push(X), Stack, [X|Stack])."}
```

```problog
{"HASH": "5E40E418","Code": "stack_op(pop, [Top|Rest], Rest)."}
```

```problog
{"HASH": "5E40E418","Code": "stack_op(dup, [Top|Rest], [Top,Top|Rest])."}
```

```problog
{"HASH": "5E40E418","Code": "stack_op(swap, [X,Y|Rest], [Y,X|Rest])."}
```

```problog
{"HASH": "5E40E418","Code": "stack_op(over, [X,Y|Rest], [Y,X,Y|Rest])."}
```

```problog
{"HASH": "5E40E418","Code": "stack_op(rot, [X,Y,Z|Rest], [Z,X,Y|Rest])."}
```

```problog
{"HASH": "5E40E418","Code": "insertion_sort(List, Sorted) :- insertion_sort(List, [], Sorted).\ninsertion_sort([], Acc, Acc).\ninsertion_sort([H|T], Acc, Sorted) :- insert(H, Acc, NewAcc), insertion_sort(T, NewAcc, Sorted).\ninsert(X, [], [X]).\ninsert(X, [Y|Ys], [X,Y|Ys]) :- X =< Y.\ninsert(X, [Y|Ys], [Y|Zs]) :- X > Y, insert(X, Ys, Zs)."}
```

Note: The sort operation implementation you provided in the initial code is included in the last snippet along with the helper insertion_sort predicate. Each stack operation is implemented as a separate simple predicate that matches the query patterns.