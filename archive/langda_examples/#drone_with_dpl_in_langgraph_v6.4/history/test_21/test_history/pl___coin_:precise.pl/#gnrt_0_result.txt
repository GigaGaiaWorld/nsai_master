Based on the requirements, I'll complete the `coins_r/3` predicate to implement the described behavior. Here's the completed code in the requested JSON format:

```problog
{"HASH": "EA5E8D55","Code": "PH::make_coin(C,PH).\ncoin(C) :- make_coin(C,0.8).\ncoins_r(SC,SC,0).\ncoins_r(SC,S,CNT) :-\n    CNT > 0,\n    CNT1 is CNT - 1,\n    (coin(CNT) ->\n        NSC is SC + 1,\n        coins_r(NSC,S,CNT1)\n    ;\n        coins_r(SC,S,CNT1)\n    ).\n\ntotal(S) :- coins_r(0,S,4).\nquery(total(_))."}
```

The completed code:
1. Uses the probabilistic `coin/1` predicate with 0.8 probability of being true (heads)
2. Implements the recursive `coins_r/3` predicate that:
   - Base case: when CNT=0, returns the current success count SC
   - Recursive case: checks the CNT-th coin, increments SC if heads, then recurses with CNT-1
3. The `total/1` predicate initiates the counting process starting with 4 coins (CNT=4)
4. The query asks for the probability distribution of the total number of heads