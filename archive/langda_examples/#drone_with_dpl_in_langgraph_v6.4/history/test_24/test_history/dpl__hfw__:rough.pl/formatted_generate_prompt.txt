System: You are a coding assistant. You MUST use the available tools to complete the ProbLog code. Do not attempt to solve the problem without using tools.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>

detect_number(image_0, 0).
detect_number(image_1, 1).
detect_number(image_2, 2).
detect_number(image_3, 3).
detect_number(image_4, 4).
detect_number(image_5, 5).
detect_number(image_6, 6).
detect_number(image_7, 7).
detect_number(image_8, 8).
detect_number(image_9, 9).
detect_operator(image_plus, +).
detect_operator(image_minus, -).
detect_operator(image_multiply, *).
detect_operator(image_divide, /).
detect_all([N], [N2]) :- 
 detect_number(N, N2).
detect_all([N,O|T], [N2,O2|T2]) :- 
 detect_number(N, N2), 
 detect_operator(O, O2), 
 detect_all(T, T2).
almost_equal(X, Y) :- 
 ground(Y), 
 abs(X - Y) < 0.0001.
almost_equal(X, Y) :- 
 var(Y), 
 Y is float(X).
expression(Images, Result) :- 
 detect_all(Images, Symbols), 
 parse(Symbols, Result).
parse([N], R) :- 
 almost_equal(N, R).
<Langda> Information:
<HASH> Hash tag of code: FB41E2F7 </HASH>
<Requirements>Define parse/2, it get a number followed with one of four operations(addition, subtraction, multiplication and division) in the form of a list, each rule is written under a separate parse/2 predicate.(consider almost equal) </Requirements></Langda>
.
query(expression([image_2, image_divide, image_3, image_plus, image_3, image_minus, image_2, image_multiply, image_7], X)).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 

**split**


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

detect_number(image_0, 0).
detect_number(image_1, 1).
detect_number(image_2, 2).
detect_number(image_3, 3).
detect_number(image_4, 4).
detect_number(image_5, 5).
detect_number(image_6, 6).
detect_number(image_7, 7).
detect_number(image_8, 8).
detect_number(image_9, 9).
detect_operator(image_plus, +).
detect_operator(image_minus, -).
detect_operator(image_multiply, *).
detect_operator(image_divide, /).
detect_all([N], [N2]) :- 
 detect_number(N, N2).
detect_all([N,O|T], [N2,O2|T2]) :- 
 detect_number(N, N2), 
 detect_operator(O, O2), 
 detect_all(T, T2).
almost_equal(X, Y) :- 
 ground(Y), 
 abs(X - Y) < 0.0001.
almost_equal(X, Y) :- 
 var(Y), 
 Y is float(X).
expression(Images, Result) :- 
 detect_all(Images, Symbols), 
 parse(Symbols, Result).
parse([N], R) :- 
 almost_equal(N, R).
<Langda> Information:
<HASH> Hash tag of code: FB41E2F7 </HASH>
<Requirements>Define parse/2, it get a number followed with one of four operations(addition, subtraction, multiplication and division) in the form of a list, each rule is written under a separate parse/2 predicate.(consider almost equal) </Requirements></Langda>
.
query(expression([image_2, image_divide, image_3, image_plus, image_3, image_minus, image_2, image_multiply, image_7], X)).

</origin_code>
<generated_code>

detect_number(image_0, 0).
detect_number(image_1, 1).
detect_number(image_2, 2).
detect_number(image_3, 3).
detect_number(image_4, 4).
detect_number(image_5, 5).
detect_number(image_6, 6).
detect_number(image_7, 7).
detect_number(image_8, 8).
detect_number(image_9, 9).
detect_operator(image_plus, +).
detect_operator(image_minus, -).
detect_operator(image_multiply, *).
detect_operator(image_divide, /).

detect_all([N], [N2]) :- 
    detect_number(N, N2).
detect_all([N,O|T], [N2,O2|T2]) :- 
    detect_number(N, N2), 
    detect_operator(O, O2), 
    detect_all(T, T2).

almost_equal(X, Y) :- 
    ground(Y), 
    abs(X - Y) < 0.0001.
almost_equal(X, Y) :- 
    var(Y), 
    Y is float(X).

expression(Images, Result) :- 
    detect_all(Images, Symbols), 
    parse(Symbols, Result).

parse([N], R) :- 
    almost_equal(N, R).
parse([N1, +, N2 | T], R) :- 
    Temp is N1 + N2,
    parse([Temp | T], R).
parse([N1, -, N2 | T], R) :- 
    Temp is N1 - N2,
    parse([Temp | T], R).
parse([N1, *, N2 | T], R) :- 
    Temp is N1 * N2,
    parse([Temp | T], R).
parse([N1, /, N2 | T], R) :- 
    Temp is N1 / N2,
    parse([Temp | T], R).

query(expression([image_2, image_divide, image_3, image_plus, image_3, image_minus, image_2, image_multiply, image_7], X)).

<generated_code>
<Final_Answer>
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```

If there's no corresponding code exist:
```problog
{"HASH": "XXXX7890","Code": ""}
```
</Final_Answer>

**FIRST RESULT:
The `parse/2` predicate needs to handle arithmetic operations (addition, subtraction, multiplication, and division) in the form of a list, where each operation is applied to the result of the previous operation. Here is the completed code:

```problog
detect_number(image_0, 0).
detect_number(image_1, 1).
detect_number(image_2, 2).
detect_number(image_3, 3).
detect_number(image_4, 4).
detect_number(image_5, 5).
detect_number(image_6, 6).
detect_number(image_7, 7).
detect_number(image_8, 8).
detect_number(image_9, 9).
detect_operator(image_plus, +).
detect_operator(image_minus, -).
detect_operator(image_multiply, *).
detect_operator(image_divide, /).

detect_all([N], [N2]) :- 
    detect_number(N, N2).
detect_all([N,O|T], [N2,O2|T2]) :- 
    detect_number(N, N2), 
    detect_operator(O, O2), 
    detect_all(T, T2).

almost_equal(X, Y) :- 
    ground(Y), 
    abs(X - Y) < 0.0001.
almost_equal(X, Y) :- 
    var(Y), 
    Y is float(X).

expression(Images, Result) :- 
    detect_all(Images, Symbols), 
    parse(Symbols, Result).

parse([N], R) :- 
    almost_equal(N, R).
parse([N1, +, N2 | T], R) :- 
    Temp is N1 + N2,
    parse([Temp | T], R).
parse([N1, -, N2 | T], R) :- 
    Temp is N1 - N2,
    parse([Temp | T], R).
parse([N1, *, N2 | T], R) :- 
    Temp is N1 * N2,
    parse([Temp | T], R).
parse([N1, /, N2 | T], R) :- 
    Temp is N1 / N2,
    parse([Temp | T], R).

query(expression([image_2, image_divide, image_3, image_plus, image_3, image_minus, image_2, image_multiply, image_7], X)).
```

### Explanation:
1. **`parse/2` Predicates**:
   - The `parse/2` predicate is defined for each arithmetic operation (`+`, `-`, `*`, `/`). Each rule processes the first operation in the list, computes the result, and recursively processes the remaining list.
   - The base case `parse([N], R)` handles the final result when only one number remains.

2. **Arithmetic Operations**:
   - Each operation rule (`+`, `-`, `*`, `/`) computes the result of the operation and passes it along with the remaining list to the next recursive call.

3. **`almost_equal/2`**:
   - Ensures that floating-point comparisons are handled correctly by allowing a small margin of error (`0.0001`).

4. **Query**:
   - The query evaluates the expression `2 / 3 + 3 - 2 * 7` and binds the result to `X`.