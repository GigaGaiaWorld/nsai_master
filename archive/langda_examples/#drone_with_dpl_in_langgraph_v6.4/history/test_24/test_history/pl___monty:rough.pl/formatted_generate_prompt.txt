System: You are a coding assistant. You MUST use the available tools to complete the ProbLog code. Do not attempt to solve the problem without using tools.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>

% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).
member(X,[X|T]).
member(X,[H|T]) :- member(X,T).
<Langda> Information:
<HASH> Hash tag of code: 245014E2 </HASH>
<Requirements>Define open_door/1 Predicate to solve the monty Hall problem, you can use multiple open_door/1 predicates </Requirements></Langda>
.
win_keep :-
 select_door(A),
 prize(A).
win_switch :-
 member(A, [1,2,3]),
 \+ select_door(A),
 prize(A),
 \+ open_door(A).
query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 

**split**


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).
member(X,[X|T]).
member(X,[H|T]) :- member(X,T).
<Langda> Information:
<HASH> Hash tag of code: 245014E2 </HASH>
<Requirements>Define open_door/1 Predicate to solve the monty Hall problem, you can use multiple open_door/1 predicates </Requirements></Langda>
.
win_keep :-
 select_door(A),
 prize(A).
win_switch :-
 member(A, [1,2,3]),
 \+ select_door(A),
 prize(A),
 \+ open_door(A).
query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).

</origin_code>
<generated_code>

% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).

member(X,[X|T]).
member(X,[H|T]) :- member(X,T).

% Define open_door/1 predicate
open_door(Door) :-
    select_door(Selected),
    prize(Prize),
    member(Door, [1,2,3]),
    \+ select_door(Door),
    \+ prize(Door),
    Door \= Prize,
    Door \= Selected.

win_keep :-
    select_door(A),
    prize(A).

win_switch :-
    member(A, [1,2,3]),
    \+ select_door(A),
    prize(A),
    \+ open_door(A).

query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).

<generated_code>
<Final_Answer>
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```

If there's no corresponding code exist:
```problog
{"HASH": "XXXX7890","Code": ""}
```
</Final_Answer>

**FIRST RESULT:
Based on the retrieved information and the requirements, the `open_door/1` predicate for the Monty Hall problem can be defined as follows. The host will always open a door that is not the selected door and does not contain the prize. Here is the completed code:

```problog
% Based on Monty Hall problem on https://github.com/friguzzi/cplint
1/3::prize(1) ; 1/3::prize(2) ; 1/3::prize(3).
select_door(1).

member(X,[X|T]).
member(X,[H|T]) :- member(X,T).

% Define open_door/1 predicate
open_door(Door) :-
    select_door(Selected),
    prize(Prize),
    member(Door, [1,2,3]),
    \+ select_door(Door),
    \+ prize(Door),
    Door \= Prize,
    Door \= Selected.

win_keep :-
    select_door(A),
    prize(A).

win_switch :-
    member(A, [1,2,3]),
    \+ select_door(A),
    prize(A),
    \+ open_door(A).

query(prize(_)).
query(select_door(_)).
query(win_keep).
query(win_switch).
```

### Explanation:
1. **`open_door/1` Predicate**:
   - The host opens a door (`Door`) that is neither the selected door (`Selected`) nor the door with the prize (`Prize`).
   - The door must be one of the three doors (`1`, `2`, or `3`).
   - The host avoids opening the selected door or the prize door.

2. **`win_keep` and `win_switch`**:
   - `win_keep` succeeds if the prize is behind the initially selected door.
   - `win_switch` succeeds if the prize is behind one of the other two doors (not the selected door and not the opened door).

This implementation aligns with the standard Monty Hall problem rules.