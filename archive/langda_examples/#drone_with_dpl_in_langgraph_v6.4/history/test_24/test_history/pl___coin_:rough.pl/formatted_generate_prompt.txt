System: You are a coding assistant. You MUST use the available tools to complete the ProbLog code. Do not attempt to solve the problem without using tools.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to generate the complete code based on the user's requirements in each <langda> block.
<Code>

PH::make_coin(C,PH).
coin(C) :- make_coin(C,0.8).
coins_r(SC,SC,0).
coins_r(SC,S,CNT) :-
 CNT > 0,
 
<Langda> Information:
<HASH> Hash tag of code: DF1FDC54 </HASH>
<Requirements>Sample CNT independent coins and accumulate the number of heads facing up SC, and finally get the total number of heads after tossing CNT coins S </Requirements></Langda>
.
total(S) :- coins_r(0,S,4).
query(total(_)).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 

**split**


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

PH::make_coin(C,PH).
coin(C) :- make_coin(C,0.8).
coins_r(SC,SC,0).
coins_r(SC,S,CNT) :-
 CNT > 0,
 
<Langda> Information:
<HASH> Hash tag of code: DF1FDC54 </HASH>
<Requirements>Sample CNT independent coins and accumulate the number of heads facing up SC, and finally get the total number of heads after tossing CNT coins S </Requirements></Langda>
.
total(S) :- coins_r(0,S,4).
query(total(_)).

</origin_code>
<generated_code>

PH::make_coin(C, PH).
coin(C) :- make_coin(C, 0.8).

coins_r(SC, SC, 0).
coins_r(SC, S, CNT) :-
    CNT > 0,
    coin(CNT),
    SC1 is SC + 1,
    CNT1 is CNT - 1,
    coins_r(SC1, S, CNT1).
coins_r(SC, S, CNT) :-
    CNT > 0,
    \+ coin(CNT),
    CNT1 is CNT - 1,
    coins_r(SC, S, CNT1).

total(S) :- coins_r(0, S, 4).
query(total(_)).

<generated_code>
<Final_Answer>
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```

If there's no corresponding code exist:
```problog
{"HASH": "XXXX7890","Code": ""}
```
</Final_Answer>

**FIRST RESULT:
Based on the requirements and the retrieved information, the completed ProbLog code for simulating the tossing of `CNT` independent coins and accumulating the number of heads (`S`) is as follows:

```problog
PH::make_coin(C, PH).
coin(C) :- make_coin(C, 0.8).

coins_r(SC, SC, 0).
coins_r(SC, S, CNT) :-
    CNT > 0,
    coin(CNT),
    SC1 is SC + 1,
    CNT1 is CNT - 1,
    coins_r(SC1, S, CNT1).
coins_r(SC, S, CNT) :-
    CNT > 0,
    \+ coin(CNT),
    CNT1 is CNT - 1,
    coins_r(SC, S, CNT1).

total(S) :- coins_r(0, S, 4).
query(total(_)).
```

### Explanation:
1. **Probabilistic Fact**: The `coin(C)` predicate is defined with a probability of 0.8 for each coin toss resulting in heads.
2. **Base Case**: `coins_r(SC, SC, 0)` stops the recursion when `CNT` reaches 0, returning the accumulated count of heads (`SC`).
3. **Recursive Cases**:
   - If the current coin toss (`coin(CNT)`) is heads, increment the count (`SC1 is SC + 1`) and proceed with the next toss (`CNT1 is CNT - 1`).
   - If the toss is not heads (`\+ coin(CNT)`), proceed without incrementing the count.
4. **Query**: The `total(S)` predicate initializes the count to 0 and starts the recursion with `CNT = 4`. The `query(total(_))` allows ProbLog to compute the probability distribution over the total number of heads.