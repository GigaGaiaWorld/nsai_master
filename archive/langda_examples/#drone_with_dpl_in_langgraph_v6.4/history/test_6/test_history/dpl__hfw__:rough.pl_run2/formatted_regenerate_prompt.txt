System: You are a coding assistant. Use the tools as needed to complete the ProbLog code.
Human: You are an expert programmer proficient in Problog and DeepProbLog. Your task is to regenerate the code in each <langda> block inside <Code>
in each <langda> block, <Report> shows why the <Code_Block> need to be regenerated, please regenerate the code according based on these information.
<Code>

detect_number(image_0, 0).
detect_number(image_1, 1).
detect_number(image_2, 2).
detect_number(image_3, 3).
detect_number(image_4, 4).
detect_number(image_5, 5).
detect_number(image_6, 6).
detect_number(image_7, 7).
detect_number(image_8, 8).
detect_number(image_9, 9).
detect_operator(image_plus, +).
detect_operator(image_minus, -).
detect_operator(image_multiply, *).
detect_operator(image_divide, /).
detect_all([N], [N2]) :- 
 detect_number(N, N2).
detect_all([N,O|T], [N2,O2|T2]) :- 
 detect_number(N, N2), 
 detect_operator(O, O2), 
 detect_all(T, T2).
almost_equal(X, Y) :- 
 ground(Y), 
 abs(X - Y) < 0.0001.
almost_equal(X, Y) :- 
 var(Y), 
 Y is float(X).
expression(Images, Result) :- 
 detect_all(Images, Symbols), 
 parse(Symbols, Result).
<Langda>
<Code_Block>parse([N], N).
parse(Symbols, Result) :-
    split_at_lowest_precedence(Symbols, Left, Operator, Right),
    parse(Left, LeftResult),
    parse(Right, RightResult),
    apply_operator(Operator, LeftResult, RightResult, Result).

split_at_lowest_precedence([N, O | T], [N], O, T) :-
    lowest_precedence_operator(O).
split_at_lowest_precedence([N, O | T], [N, O | Left], Op, Right) :-
    not(lowest_precedence_operator(O)),
    split_at_lowest_precedence(T, Left, Op, Right).

lowest_precedence_operator('+').
lowest_precedence_operator('-').

apply_operator('+', L, R, Result) :- Result is L + R.
apply_operator('-', L, R, Result) :- Result is L - R.
apply_operator('*', L, R, Result) :- Result is L * R.
apply_operator('/', L, R, Result) :- R \= 0, Result is L / R.</Code_Block>
<Report>The `parse/2` predicate and its helper predicates (`split_at_lowest_precedence/4`, `lowest_precedence_operator/1`, and `apply_operator/4`) are syntactically correct but logically flawed. The main issues are: 1) `split_at_lowest_precedence/4` does not correctly handle operator precedence, leading to incorrect parsing order (e.g., `2 / 3 + 3 - 2 * 7` should be parsed as `(2 / 3) + (3 - (2 * 7))` but isn't); 2) The test result shows incorrect evaluation (0.0000), confirming the logical error; 3) The implementation doesn't fully integrate with `almost_equal/2` for floating-point comparisons. The code needs regeneration to fix operator precedence handling and ensure correct evaluation.</Report>
<HASH> Hash tag of code: 190031BC </HASH>
<Requirements>Recursive expression evaluator: parse/2, which can perform the following operations:  Addition processing  Subtraction processing  Multiplication processing  Division processing. </Requirements></Langda>
query(expression([image_2, image_divide, image_3, image_plus, image_3, image_minus, image_2, image_multiply, image_7], X)).

</Code>
<Final_Answer> The generated completed code should be formatted as follows:
// other contents
```problog
//the completed original code here
```
</Final_Answer>


AI: 


In section <origin_code> and <generated_code> you will be give two codes,
- in <origin_code> there's incomplete code with <langda> blocks.
- in <generated_code> there's completed code of <origin_code>.
your task is to extract and format each code block in <generated_code> that corresponds to the <langda> blocks in <origin_code>
<origin_code>

detect_number(image_0, 0).
detect_number(image_1, 1).
detect_number(image_2, 2).
detect_number(image_3, 3).
detect_number(image_4, 4).
detect_number(image_5, 5).
detect_number(image_6, 6).
detect_number(image_7, 7).
detect_number(image_8, 8).
detect_number(image_9, 9).
detect_operator(image_plus, +).
detect_operator(image_minus, -).
detect_operator(image_multiply, *).
detect_operator(image_divide, /).
detect_all([N], [N2]) :- 
 detect_number(N, N2).
detect_all([N,O|T], [N2,O2|T2]) :- 
 detect_number(N, N2), 
 detect_operator(O, O2), 
 detect_all(T, T2).
almost_equal(X, Y) :- 
 ground(Y), 
 abs(X - Y) < 0.0001.
almost_equal(X, Y) :- 
 var(Y), 
 Y is float(X).
expression(Images, Result) :- 
 detect_all(Images, Symbols), 
 parse(Symbols, Result).
<Langda>
<Code_Block>parse([N], N).
parse(Symbols, Result) :-
    split_at_lowest_precedence(Symbols, Left, Operator, Right),
    parse(Left, LeftResult),
    parse(Right, RightResult),
    apply_operator(Operator, LeftResult, RightResult, Result).

split_at_lowest_precedence([N, O | T], [N], O, T) :-
    lowest_precedence_operator(O).
split_at_lowest_precedence([N, O | T], [N, O | Left], Op, Right) :-
    not(lowest_precedence_operator(O)),
    split_at_lowest_precedence(T, Left, Op, Right).

lowest_precedence_operator('+').
lowest_precedence_operator('-').

apply_operator('+', L, R, Result) :- Result is L + R.
apply_operator('-', L, R, Result) :- Result is L - R.
apply_operator('*', L, R, Result) :- Result is L * R.
apply_operator('/', L, R, Result) :- R \= 0, Result is L / R.</Code_Block>
<Report>The `parse/2` predicate and its helper predicates (`split_at_lowest_precedence/4`, `lowest_precedence_operator/1`, and `apply_operator/4`) are syntactically correct but logically flawed. The main issues are: 1) `split_at_lowest_precedence/4` does not correctly handle operator precedence, leading to incorrect parsing order (e.g., `2 / 3 + 3 - 2 * 7` should be parsed as `(2 / 3) + (3 - (2 * 7))` but isn't); 2) The test result shows incorrect evaluation (0.0000), confirming the logical error; 3) The implementation doesn't fully integrate with `almost_equal/2` for floating-point comparisons. The code needs regeneration to fix operator precedence handling and ensure correct evaluation.</Report>
<HASH> Hash tag of code: 190031BC </HASH>
<Requirements>Recursive expression evaluator: parse/2, which can perform the following operations:  Addition processing  Subtraction processing  Multiplication processing  Division processing. </Requirements></Langda>
query(expression([image_2, image_divide, image_3, image_plus, image_3, image_minus, image_2, image_multiply, image_7], X)).

</origin_code>
<generated_code>

detect_number(image_0, 0).
detect_number(image_1, 1).
detect_number(image_2, 2).
detect_number(image_3, 3).
detect_number(image_4, 4).
detect_number(image_5, 5).
detect_number(image_6, 6).
detect_number(image_7, 7).
detect_number(image_8, 8).
detect_number(image_9, 9).
detect_operator(image_plus, '+').
detect_operator(image_minus, '-').
detect_operator(image_multiply, '*').
detect_operator(image_divide, '/').

detect_all([N], [N2]) :- 
    detect_number(N, N2).
detect_all([N,O|T], [N2,O2|T2]) :- 
    detect_number(N, N2), 
    detect_operator(O, O2), 
    detect_all(T, T2).

almost_equal(X, Y) :- 
    ground(Y), 
    abs(X - Y) < 0.0001.
almost_equal(X, Y) :- 
    var(Y), 
    Y is float(X).

expression(Images, Result) :- 
    detect_all(Images, Symbols), 
    parse(Symbols, Result).

parse([N], N).
parse(Symbols, Result) :-
    split_at_lowest_precedence(Symbols, Left, Operator, Right),
    parse(Left, LeftResult),
    parse(Right, RightResult),
    apply_operator(Operator, LeftResult, RightResult, Result).

split_at_lowest_precedence([N, O | T], [N], O, T) :-
    lowest_precedence_operator(O).
split_at_lowest_precedence([N, O | T], [N, O | Left], Op, Right) :-
    not(lowest_precedence_operator(O)),
    split_at_lowest_precedence(T, Left, Op, Right).

lowest_precedence_operator('+').
lowest_precedence_operator('-').

apply_operator('+', L, R, Result) :- Result is L + R.
apply_operator('-', L, R, Result) :- Result is L - R.
apply_operator('*', L, R, Result) :- Result is L * R.
apply_operator('/', L, R, Result) :- R \= 0, Result is L / R.

<generated_code>
<Final_Answer> 
For each code block, extract it and format it in the following JSON format:

```problog
{"HASH": "XXXX1234","Code": "Completed code snippet 1"}
```
```problog
{"HASH": "XXXX3456","Code": "Completed code snippet 2"}
```
</Final_Answer>