Here are the extracted and formatted code blocks from the `<generated_code>` that correspond to the `<langda>` blocks in `<origin_code>`:

```problog
{"HASH": "190031BC", "Code": "parse([N], N).\nparse(Symbols, Result) :-\n    parse_expression(Symbols, Result).\n\nparse_expression(Symbols, Result) :-\n    shunting_yard(Symbols, RPN),\n    evaluate_rpn(RPN, Result).\n\n% Shunting-yard algorithm to convert infix to RPN\nshunting_yard(Symbols, RPN) :-\n    shunting_yard(Symbols, [], [], RPN).\n\nshunting_yard([], Operators, Output, RPN) :-\n    append(Output, Operators, RPN).\nshunting_yard([X|Xs], Operators, Output, RPN) :-\n    (   number(X) ->\n        shunting_yard(Xs, Operators, [X|Output], RPN)\n    ;   operator(X, Precedence, _),\n        process_operator(X, Precedence, Operators, NewOperators, Output, NewOutput),\n        shunting_yard(Xs, NewOperators, NewOutput, RPN)\n    ).\n\nprocess_operator(Op, Precedence, [], [Op], Output, Output).\nprocess_operator(Op, Precedence, [Top|Ops], NewOperators, Output, NewOutput) :-\n    operator(Top, TopPrecedence, _),\n    (   Precedence =< TopPrecedence ->\n        process_operator(Op, Precedence, Ops, NewOperators, [Top|Output], NewOutput)\n    ;   NewOperators = [Op, Top|Ops],\n        NewOutput = Output\n    ).\n\n% Evaluate RPN expression\nevaluate_rpn([X], X).\nevaluate_rpn(RPN, Result) :-\n    evaluate_rpn(RPN, [], Result).\n\nevaluate_rpn([], [Result], Result).\nevaluate_rpn([X|Xs], Stack, Result) :-\n    (   number(X) ->\n        evaluate_rpn(Xs, [X|Stack], Result)\n    ;   operator(X, _, Op),\n        pop_two(Stack, A, B, NewStack),\n        compute(Op, B, A, Value),\n        evaluate_rpn(Xs, [Value|NewStack], Result)\n    ).\n\npop_two([A, B|Stack], B, A, Stack).\n\ncompute('+', A, B, Result) :- Result is A + B.\ncompute('-', A, B, Result) :- Result is A - B.\ncompute('*', A, B, Result) :- Result is A * B.\ncompute('/', A, B, Result) :- B \\= 0, Result is A / B.\n\noperator('+', 1, '+').\noperator('-', 1, '-').\noperator('*', 2, '*').\noperator('/', 2, '/')."}
```