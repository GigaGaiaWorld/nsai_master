```problog
{"HASH": "418D2062","Code": "% Merge Sort Algorithm in Problog\n\n% Base case for an empty list\nmerge_sort([], []).\n\n% Base case for a single-element list\nmerge_sort([X], [X]).\n\n% Recursive case: split the list, sort the halves, and merge them\nmerge_sort(List, Sorted) :-\n    length(List, Len),\n    Len > 1,\n    split(List, Left, Right),\n    merge_sort(Left, SortedLeft),\n    merge_sort(Right, SortedRight),\n    merge(SortedLeft, SortedRight, Sorted).\n\n% Split the list into two halves\nsplit(List, Left, Right) :-\n    length(List, Len),\n    Half is Len // 2,\n    length(Left, Half),\n    append(Left, Right, List).\n\n% Merge two sorted lists into one sorted list\nmerge([], Right, Right).\nmerge(Left, [], Left).\nmerge([LeftHead|LeftTail], [RightHead|RightTail], [LeftHead|Merged]) :-\n    LeftHead @=< RightHead,\n    merge(LeftTail, [RightHead|RightTail], Merged).\nmerge([LeftHead|LeftTail], [RightHead|RightTail], [RightHead|Merged]) :-\n    LeftHead @> RightHead,\n    merge([LeftHead|LeftTail], RightTail, Merged)."}
```